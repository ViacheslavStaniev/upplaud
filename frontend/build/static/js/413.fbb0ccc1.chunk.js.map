{"version":3,"file":"static/js/413.fbb0ccc1.chunk.js","mappings":"gMAAMA,EAAmB,SAACC,GACtB,MAA0B,UAAtBA,EAAMC,YACyB,kBAAjBD,EAAME,QAAuBF,EAAME,QAAU,GAWhC,IAApBF,EAAMG,SAErB,ECbA,SAASC,EAAiBJ,GAA2B,IAApBK,EAAY,UAAH,6CAAG,OACzC,MAAO,CACHC,MAAO,CACHC,EAAGP,EAAMK,EAAY,KACrBG,EAAGR,EAAMK,EAAY,MAGjC,CACA,IAAMI,EAAiB,SAACC,GACpB,OAAO,SAACV,GAAK,OAAKD,EAAiBC,IAAUU,EAAQV,EAAOI,EAAiBJ,GAAO,CACxF,E,UCNMW,EAAwB,SAACC,GAAO,OAAe,IAAVA,CAAc,ECJzD,SAASC,EAAYC,EAAQC,EAAWL,GAAsC,IAA7BM,EAAU,UAAH,6CAAG,CAAEC,SAAS,GAElE,OADAH,EAAOI,iBAAiBH,EAAWL,EAASM,GACrC,kBAAMF,EAAOK,oBAAoBJ,EAAWL,EAAQ,CAC/D,CAsBA,SAASU,EAAYC,EAAKN,EAAWL,EAASM,IAC1CM,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAUF,EAAIG,QACpB,GAAId,GAAWa,EACX,OAAOV,EAAYU,EAASR,EAAWL,EAASM,EAExD,GAAG,CAACK,EAAKN,EAAWL,EAASM,GACjC,CC/BA,SAASS,EAAgBX,EAAQC,EAAWL,EAASM,GACjD,OAAOH,EAAYC,EAAQC,EAAWN,EAAeC,GAAUM,EACnE,CACA,SAASU,EAAgBL,EAAKN,EAAWL,EAASM,GAC9C,OAAOI,EAAYC,EAAKN,EAAWL,GAAWD,EAAeC,GAAUM,EAC3E,C,eCRMW,EAAW,SAACC,EAAGC,GAAC,OAAKC,KAAKC,IAAIH,EAAIC,EAAE,EAC1C,SAASG,EAAWJ,EAAGC,GAEnB,IAAMI,EAASN,EAASC,EAAErB,EAAGsB,EAAEtB,GACzB2B,EAASP,EAASC,EAAEpB,EAAGqB,EAAErB,GAC/B,OAAOsB,KAAKK,KAAK,SAAAF,EAAU,GAAC,SAAGC,EAAU,GAC7C,C,eCMME,EAAU,WACZ,WAAYpC,EAAOqC,GAAuC,oEAAJ,CAAC,EAAxBC,EAAkB,EAAlBA,mBA0D3B,IA1D6C,eAI7CC,KAAKC,WAAa,KAIlBD,KAAKE,cAAgB,KAIrBF,KAAKG,kBAAoB,KAIzBH,KAAKF,SAAW,CAAC,EACjBE,KAAKI,YAAc,WACf,GAAM,EAAKF,eAAiB,EAAKC,kBAAjC,CAEA,IAAME,EAAOC,EAAW,EAAKH,kBAAmB,EAAKI,SAC/CC,EAAmC,OAApB,EAAKP,WAIpBQ,EAA0BhB,EAAWY,EAAKK,OAAQ,CAAE1C,EAAG,EAAGC,EAAG,KAAQ,EAC3E,GAAKuC,GAAiBC,EAAtB,CAEA,IAAQ1C,EAAUsC,EAAVtC,MACA4C,EAAcC,EAAAA,EAAAA,UACtB,EAAKL,QAAQM,MAAK,kBAAK9C,GAAK,IAAE4C,UAAAA,KAC9B,MAA4B,EAAKb,SAAzBgB,EAAO,EAAPA,QAASC,EAAM,EAANA,OACZP,IACDM,GAAWA,EAAQ,EAAKZ,cAAeG,GACvC,EAAKJ,WAAa,EAAKC,eAE3Ba,GAAUA,EAAO,EAAKb,cAAeG,EAT3B,CARA,CAkBd,EACAL,KAAKgB,kBAAoB,SAACvD,EAAO4C,GAC7B,EAAKH,cAAgBzC,EACrB,EAAK0C,kBAAoBc,EAAeZ,EAAM,EAAKN,oBAEnDmB,EAAAA,GAAAA,OAAY,EAAKd,aAAa,EAClC,EACAJ,KAAKmB,gBAAkB,SAAC1D,EAAO4C,GAE3B,GADA,EAAKe,MACC,EAAKlB,eAAiB,EAAKC,kBAAjC,CAEA,MAAgC,EAAKL,SAA7BuB,EAAK,EAALA,MAAOC,EAAY,EAAZA,aACTC,EAAUjB,EAA0B,kBAAf7C,EAAM+D,KAC3B,EAAKrB,kBACLc,EAAeZ,EAAM,EAAKN,oBAAqB,EAAKQ,SACtD,EAAKN,YAAcoB,GACnBA,EAAM5D,EAAO8D,GAEjBD,GAAgBA,EAAa7D,EAAO8D,EAR1B,CASd,EAEK/D,EAAiBC,GAAtB,CAEAuC,KAAKF,SAAWA,EAChBE,KAAKD,mBAAqBA,EAC1B,IAAMM,EAAOxC,EAAiBJ,GACxBgE,EAAcR,EAAeZ,EAAML,KAAKD,oBACtChC,EAAU0D,EAAV1D,MACA4C,EAAcC,EAAAA,EAAAA,UACtBZ,KAAKO,QAAU,EAAC,kBAAKxC,GAAK,IAAE4C,UAAAA,KAC5B,IAAQe,EAAmB5B,EAAnB4B,eACRA,GACIA,EAAejE,EAAO6C,EAAWmB,EAAazB,KAAKO,UACvDP,KAAK2B,iBAAkBC,EAAAA,EAAAA,GAAK1C,EAAgB2C,OAAQ,cAAe7B,KAAKgB,mBAAoB9B,EAAgB2C,OAAQ,YAAa7B,KAAKmB,iBAAkBjC,EAAgB2C,OAAQ,gBAAiB7B,KAAKmB,iBAX5L,CAYd,CAOC,OAPA,sCACD,SAAerB,GACXE,KAAKF,SAAWA,CACpB,GAAC,iBACD,WACIE,KAAK2B,iBAAmB3B,KAAK2B,kBAC7BG,EAAAA,GAAAA,OAAkB9B,KAAKI,YAC3B,KAAC,EA/EW,GAiFhB,SAASa,EAAeZ,EAAMN,GAC1B,OAAOA,EAAqB,CAAEhC,MAAOgC,EAAmBM,EAAKtC,QAAWsC,CAC5E,CACA,SAAS0B,EAAc1C,EAAGC,GACtB,MAAO,CAAEtB,EAAGqB,EAAErB,EAAIsB,EAAEtB,EAAGC,EAAGoB,EAAEpB,EAAIqB,EAAErB,EACtC,CACA,SAASqC,EAAW,EAAWC,GAAS,IAAlBxC,EAAK,EAALA,MAClB,MAAO,CACHA,MAAAA,EACAiE,MAAOD,EAAchE,EAAOkE,EAAgB1B,IAC5CG,OAAQqB,EAAchE,EAAOmE,EAAiB3B,IAC9C4B,SAAUC,EAAY7B,EAAS,IAEvC,CACA,SAAS2B,EAAiB3B,GACtB,OAAOA,EAAQ,EACnB,CACA,SAAS0B,EAAgB1B,GACrB,OAAOA,EAAQA,EAAQ8B,OAAS,EACpC,CACA,SAASD,EAAY7B,EAAS+B,GAC1B,GAAI/B,EAAQ8B,OAAS,EACjB,MAAO,CAAErE,EAAG,EAAGC,EAAG,GAKtB,IAHA,IAAIsE,EAAIhC,EAAQ8B,OAAS,EACrBG,EAAmB,KACjBC,EAAYR,EAAgB1B,GAC3BgC,GAAK,IACRC,EAAmBjC,EAAQgC,KACvBE,EAAU9B,UAAY6B,EAAiB7B,UACvCvC,EAAsBkE,MAG1BC,IAEJ,IAAKC,EACD,MAAO,CAAExE,EAAG,EAAGC,EAAG,GAEtB,IAAMyE,GAAQD,EAAU9B,UAAY6B,EAAiB7B,WAAa,IAClE,GAAa,IAAT+B,EACA,MAAO,CAAE1E,EAAG,EAAGC,EAAG,GAEtB,IAAM0E,EAAkB,CACpB3E,GAAIyE,EAAUzE,EAAIwE,EAAiBxE,GAAK0E,EACxCzE,GAAIwE,EAAUxE,EAAIuE,EAAiBvE,GAAKyE,GAQ5C,OANIC,EAAgB3E,IAAM4E,MACtBD,EAAgB3E,EAAI,GAEpB2E,EAAgB1E,IAAM2E,MACtBD,EAAgB1E,EAAI,GAEjB0E,CACX,CClJA,SAASE,EAAWC,GAChB,IAAIC,EAAO,KACX,OAAO,WAIH,OAAa,OAATA,IACAA,EAAOD,EAJM,WACbC,EAAO,IACX,EAMJ,CACJ,CACA,IAAMC,EAAuBH,EAAW,kBAClCI,EAAqBJ,EAAW,gBACtC,SAASK,EAAcC,GACnB,IAAIJ,GAAO,EACX,GAAa,MAATI,EACAJ,EAAOE,SAEN,GAAa,MAATE,EACLJ,EAAOC,QAEN,CACD,IAAMI,EAAiBJ,IACjBK,EAAeJ,IACjBG,GAAkBC,EAClBN,EAAO,WACHK,IACAC,GACJ,GAIID,GACAA,IACAC,GACAA,IAEZ,CACA,OAAON,CACX,CACA,SAASO,IAGL,IAAMC,EAAkBL,GAAc,GACtC,OAAKK,IAELA,KACO,EACX,C,qCChDA,SAASC,EAAWC,GAChB,OAAOA,EAAKC,IAAMD,EAAKE,GAC3B,CACA,SAASC,EAAOC,GAAuC,IAAhCtF,EAAS,UAAH,6CAAG,EAAGuF,EAAc,UAAH,6CAAG,IAC7C,OAAOvE,KAAKC,IAAIqE,EAAQtF,IAAWuF,CACvC,CACA,SAASC,EAAc/B,EAAOgC,EAAQzF,GAAsB,IAAd0F,EAAS,UAAH,6CAAG,GACnDjC,EAAMiC,OAASA,EACfjC,EAAMkC,aAAcC,EAAAA,EAAAA,GAAIH,EAAOL,IAAKK,EAAON,IAAK1B,EAAMiC,QACtDjC,EAAMoC,MAAQZ,EAAWjF,GAAUiF,EAAWQ,IAC1CJ,EAAO5B,EAAMoC,MAAO,EAAG,OAAWC,MAAMrC,EAAMoC,UAC9CpC,EAAMoC,MAAQ,GAClBpC,EAAMsC,WACFH,EAAAA,EAAAA,GAAI5F,EAAOoF,IAAKpF,EAAOmF,IAAK1B,EAAMiC,QAAUjC,EAAMkC,aAClDN,EAAO5B,EAAMsC,YAAcD,MAAMrC,EAAMsC,cACvCtC,EAAMsC,UAAY,EAC1B,CACA,SAASC,EAAavC,EAAOgC,EAAQzF,EAAQ0F,GACzCF,EAAc/B,EAAMhE,EAAGgG,EAAOhG,EAAGO,EAAOP,EAAc,OAAXiG,QAA8B,IAAXA,OAAoB,EAASA,EAAOO,SAClGT,EAAc/B,EAAM/D,EAAG+F,EAAO/F,EAAGM,EAAON,EAAc,OAAXgG,QAA8B,IAAXA,OAAoB,EAASA,EAAOQ,QACtG,CACA,SAASC,EAAiBnG,EAAQoG,EAAUC,GACxCrG,EAAOoF,IAAMiB,EAAOjB,IAAMgB,EAAShB,IACnCpF,EAAOmF,IAAMnF,EAAOoF,IAAMH,EAAWmB,EACzC,CAKA,SAASE,EAAyBtG,EAAQuG,EAAQF,GAC9CrG,EAAOoF,IAAMmB,EAAOnB,IAAMiB,EAAOjB,IACjCpF,EAAOmF,IAAMnF,EAAOoF,IAAMH,EAAWsB,EACzC,CACA,SAASC,EAAqBxG,EAAQuG,EAAQF,GAC1CC,EAAyBtG,EAAOP,EAAG8G,EAAO9G,EAAG4G,EAAO5G,GACpD6G,EAAyBtG,EAAON,EAAG6G,EAAO7G,EAAG2G,EAAO3G,EACxD,C,cCZA,SAAS+G,EAA4BvB,EAAME,EAAKD,GAC5C,MAAO,CACHC,SAAasB,IAARtB,EAAoBF,EAAKE,IAAMA,OAAMsB,EAC1CvB,SAAauB,IAARvB,EACCD,EAAKC,IAAMA,GAAOD,EAAKC,IAAMD,EAAKE,UAClCsB,EAEd,CAcA,SAASC,EAA4BC,EAAYC,GAC7C,IAAIzB,EAAMyB,EAAgBzB,IAAMwB,EAAWxB,IACvCD,EAAM0B,EAAgB1B,IAAMyB,EAAWzB,IAG3C,GAAI0B,EAAgB1B,IAAM0B,EAAgBzB,IACtCwB,EAAWzB,IAAMyB,EAAWxB,IAAK,OACpB,CAACD,EAAKC,GAAlBA,EAAG,KAAED,EAAG,IACb,CACA,MAAO,CAAEC,IAAAA,EAAKD,IAAAA,EAClB,CAuCA,IChGI2B,EDgGEC,EAAiB,IAgBvB,SAASC,EAAmBC,EAAaC,EAAUC,GAC/C,MAAO,CACH/B,IAAKgC,EAAoBH,EAAaC,GACtC/B,IAAKiC,EAAoBH,EAAaE,GAE9C,CACA,SAASC,EAAoBH,EAAaI,GACtC,MAA8B,kBAAhBJ,EACRA,EACAA,EAAYI,IAAU,CAChC,ECzHA,SAAWP,GACPA,EAAuB,QAAI,UAC3BA,EAAqB,MAAI,aACzBA,EAAmB,IAAI,WACvBA,EAAoB,KAAI,YACxBA,EAAqB,MAAI,aACzBA,EAAsB,OAAI,cAC1BA,EAAoB,KAAI,MAC3B,CARD,CAQGA,IAAkBA,EAAgB,CAAC,ICTtC,SAASQ,EAASC,GACd,MAAO,CAACA,EAAS,KAAMA,EAAS,KACpC,CCGA,SAASC,EAAwB,GAA+B,IAA7BC,EAAG,EAAHA,IAC/B,MAAO,CACHhI,EAAG,CAAE2F,IAF+B,EAAJsC,KAEhBvC,IAF2B,EAALwC,OAGtCjI,EAAG,CAAE0F,IAAKqC,EAAKtC,IAHoC,EAANyC,QAKrD,C,eCVA,SAASC,EAAgBhC,GACrB,YAAiBa,IAAVb,GAAiC,IAAVA,CAClC,CACA,SAASiC,GAAS,GAA2B,IAAzBjC,EAAK,EAALA,MAAOkC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAC/B,OAASH,EAAgBhC,KACpBgC,EAAgBE,KAChBF,EAAgBG,EACzB,CACA,SAASC,GAAaC,GAClB,OAAQJ,GAASI,IACbC,GAAeD,IACfA,EAAOE,GACPF,EAAOG,QACPH,EAAOI,SACPJ,EAAOK,OACf,CACA,SAASJ,GAAeD,GACpB,OAAOM,GAAcN,EAAOzI,IAAM+I,GAAcN,EAAOxI,EAC3D,CACA,SAAS8I,GAAclD,GACnB,OAAOA,GAAmB,OAAVA,CACpB,CCfA,SAASmD,GAAWjJ,EAAOqG,EAAOF,GAG9B,OAAOA,EADQE,GADYrG,EAAQmG,EAGvC,CAIA,SAAS+C,GAAgBlJ,EAAOuG,EAAWF,EAAOF,EAAagD,GAI3D,YAHiBjC,IAAbiC,IACAnJ,EAAQiJ,GAAWjJ,EAAOmJ,EAAUhD,IAEjC8C,GAAWjJ,EAAOqG,EAAOF,GAAeI,CACnD,CAIA,SAAS6C,GAAe1D,GAAuD,IAAjDa,EAAY,UAAH,6CAAG,EAAGF,EAAQ,UAAH,6CAAG,EAAGF,EAAW,uCAAEgD,EAAQ,uCACzEzD,EAAKE,IAAMsD,GAAgBxD,EAAKE,IAAKW,EAAWF,EAAOF,EAAagD,GACpEzD,EAAKC,IAAMuD,GAAgBxD,EAAKC,IAAKY,EAAWF,EAAOF,EAAagD,EACxE,CAIA,SAASE,GAAcC,EAAK,GAAU,IAARrJ,EAAC,EAADA,EAAGC,EAAC,EAADA,EAC7BkJ,GAAeE,EAAIrJ,EAAGA,EAAEsG,UAAWtG,EAAEoG,MAAOpG,EAAEkG,aAC9CiD,GAAeE,EAAIpJ,EAAGA,EAAEqG,UAAWrG,EAAEmG,MAAOnG,EAAEiG,YAClD,CAgDA,SAASoD,GAAclD,GACnB,OAAImD,OAAOC,UAAUpD,IAEdA,EAAQ,iBAAmBA,EAAQ,cAD/BA,EACwD,CACvE,CACA,SAASqD,GAAchE,EAAMrE,GACzBqE,EAAKE,IAAMF,EAAKE,IAAMvE,EACtBqE,EAAKC,IAAMD,EAAKC,IAAMtE,CAC1B,CAMA,SAASsI,GAAcjE,EAAMkE,EAAY,GAA4B,mBAA3BC,EAAG,KAAEC,EAAQ,KAAEC,EAAS,KACxDC,OAAuC9C,IAA1B0C,EAAWG,GAA2BH,EAAWG,GAAa,GAC3E5D,GAAcC,EAAAA,EAAAA,GAAIV,EAAKE,IAAKF,EAAKC,IAAKqE,GAE5CZ,GAAe1D,EAAMkE,EAAWC,GAAMD,EAAWE,GAAW3D,EAAayD,EAAWvD,MACxF,CAIA,IAAM4D,GAAQ,CAAC,IAAK,SAAU,WACxBC,GAAQ,CAAC,IAAK,SAAU,WAI9B,SAASC,GAAab,EAAKc,GACvBT,GAAcL,EAAIrJ,EAAGmK,EAAWH,IAChCN,GAAcL,EAAIpJ,EAAGkK,EAAWF,GACpC,CC7GA,SAASG,GAAmBC,EAAUpH,GAClC,OAAO8E,EHeX,SAA4BhI,EAAOkD,GAC/B,IAAKA,EACD,OAAOlD,EACX,IAAMuK,EAAUrH,EAAe,CAAEjD,EAAGD,EAAMkI,KAAMhI,EAAGF,EAAMiI,MACnDuC,EAActH,EAAe,CAAEjD,EAAGD,EAAMmI,MAAOjI,EAAGF,EAAMoI,SAC9D,MAAO,CACHH,IAAKsC,EAAQrK,EACbgI,KAAMqC,EAAQtK,EACdmI,OAAQoC,EAAYtK,EACpBiI,MAAOqC,EAAYvK,EAE3B,CG1BmCwK,CAAmBH,EAASI,wBAAyBxH,GACxF,C,gBCLMyH,IACO,E,mCCIb,IAAMC,GAAsB,SAAH,sBAAKtJ,EAAC,KAAEC,EAAC,KAAEsJ,EAAC,KAAEC,EAAC,kCAAsBxJ,EAAC,aAAKC,EAAC,aAAKsJ,EAAC,aAAKC,EAAC,MAC3EC,GAAuB,CACzBC,OAAQ,SACRC,KAAM,OACNC,OAAQ,UACRC,QAAS,WACTC,UAAW,cACXC,OAAQT,GAAoB,CAAC,EAAG,IAAM,IAAM,IAC5CU,QAASV,GAAoB,CAAC,IAAM,EAAG,EAAG,MAC1CW,OAAQX,GAAoB,CAAC,IAAM,IAAM,KAAO,MAChDY,QAASZ,GAAoB,CAAC,IAAM,KAAM,IAAM,OAEpD,SAASa,GAAwBC,GAC7B,GAAKA,EAEL,OAAOC,MAAMC,QAAQF,GACfd,GAAoBc,GACpBX,GAAqBW,EAC/B,CCvBA,IAAMG,GAAe,CACjBC,MAAO,kBAAMC,OAAOC,eAAeC,KAAKC,QAAQC,UAAW,UAAU,GAEnEC,GAAU,CAAC,EACXC,GAAW,CAAC,EAClB,YAGWxC,GACPwC,GAASxC,GAAO,WAGZ,YAFqB3C,IAAjBkF,GAAQvC,KACRuC,GAAQvC,GAAOgC,GAAahC,MACzBuC,GAAQvC,EACnB,CAAE,EALN,IAAK,IAAMA,MAAOgC,GAAc,GAArBhC,I,iCCELyC,GAAoB,IAAIC,IAAI,CAAC,YAOnC,SAASC,GAA2B1G,EAAO2G,EAAW,GAAU,EAARC,SAAoC,IAA1BC,EAAU,EAAVA,WAAejM,GAAO,cAMpF,KAL+B2L,GAASP,SACpCQ,GAAkBM,IAAIH,KACrB/L,EAAQmM,aACc,WAAvBnM,EAAQoM,YACY,IAApBpM,EAAQqM,SAER,OAAO,EACX,IFzB4BrB,EEyBtBsB,EAAiDtM,EAAjDsM,UAAS,EAAwCtM,EAAtCuM,SAAAA,OAAQ,IAAG,MAAG,IAAwBvM,EAAtBwM,QAAAA,OAAO,IAAG,IAAC,EAAEjC,EAASvK,EAATuK,KAI9C,GAAqB,WAAjBvK,EAAQ+C,UF7BgBiI,EE6B6BhL,EAAQuK,OF3B7DU,MAAMC,QAAQF,IACK,kBAAXA,GAAuBX,GAAqBW,IE0BgB,CAKpE,GAAIhL,EAAQyM,SAAWtI,IACnB,OASJ,IARA,IAAMuI,GAAkBC,EAAAA,GAAAA,KAAQ,kBAAK3M,GAAO,IAAEwM,QAAS,KACnDI,EAAQ,CAAEC,MAAM,EAAOzH,MAAOkH,EAAU,IACtCQ,EAAwB,GAK1BC,EAAI,GACAH,EAAMC,MAAQE,EAAI,KACtBH,EAAQF,EAAgBM,OAAOD,GAC/BD,EAAsB1K,KAAKwK,EAAMxH,OACjC2H,GA/BQ,GAiCZT,EAAYQ,EACZP,EAAWQ,EAlCC,GAmCZxC,EAAO,QACX,CACA,IAAM0C,ECnDV,SAAsB1M,EAASwL,EAAWO,GAAwF,+DAAJ,CAAC,EAAC,IAAzEY,MAAAA,OAAK,IAAG,IAAC,EAAEX,EAAQ,EAARA,SAAQ,IAAEE,OAAAA,OAAM,IAAG,IAAC,MAAEL,WAAAA,OAAU,IAAG,SAAM,EAAE7B,EAAI,EAAJA,KAAM4C,EAAK,EAALA,MAC/G,OAAO5M,EAAQoM,SAAO,gBAAIZ,EAAYO,IAAS,mBAAUa,GAAK,GAAI,CAC9DD,MAAAA,EACAX,SAAAA,EACAvB,OAAQD,GAAwBR,GAChC6C,KAAM,OACNC,WAAYZ,EAAS,EACrBa,UAA0B,YAAflB,EAA2B,YAAc,UAE5D,CD0CsBmB,CAAanI,EAAMoI,MAAMhN,QAASuL,EAAWO,GAAW,kBACnEtM,GAAO,IACVkN,OAAQV,EACRD,SAAAA,EASAhC,KAAMA,KAiBV,OAPA0C,EAAUQ,SAAW,WACjBrI,EAAMsI,IE5Ed,SAA0BpB,EAAW,GAAiC,IAA/BG,EAAM,EAANA,OAAM,IAAEL,WAI3C,OAAOE,EAHOG,GAAyB,eADc,IAAG,SAAM,IACbA,EAAS,IAAM,EAC1D,EACAH,EAAU1I,OAAS,EAE7B,CFuEkB+J,CAAiBrB,EAAWtM,IACtCiM,GAAcA,GAClB,EAIO,CACC2B,kBACA,OAAOX,EAAUW,aAAe,CACpC,EACIA,gBAAYb,GACZE,EAAUW,YAAcb,CAC5B,EACAc,KAAM,WASF,IAAQD,EAAgBX,EAAhBW,YACR,GAAIA,EAAa,CACb,IAAMlB,GAAkBC,EAAAA,GAAAA,KAAQ,kBAAK3M,GAAO,IAAE8N,UAAU,KACxD1I,EAAM2I,gBAAgBrB,EAAgBM,OAAOY,EArFzC,IAqFoExI,MAAOsH,EAAgBM,OAAOY,GAAaxI,MArF/G,GAsFR,CACA3C,EAAAA,GAAAA,QAAY,kBAAMwK,EAAUe,QAAQ,GACxC,EAER,CGrGA,SAASd,GAAM7F,EAAU4G,GACrB,IAAMC,EAAQC,YAAYC,MACpBC,EAAe,SAAfA,EAAY,GAAsB,IAC9B7B,EADuB,EAATtK,UACQgM,EACxB1B,GAAWyB,IACX5K,EAAAA,GAAAA,KAAgBgL,GAChBhH,EAASmF,EAAUyB,GAE3B,EAEA,OADAxL,EAAAA,GAAAA,KAAU4L,GAAc,GACjB,kBAAMhL,EAAAA,GAAAA,KAAgBgL,EAAa,CAC9C,CCdA,SAASC,GAAuB,GAA+C,IAA7ChC,EAAS,EAATA,UAAWE,EAAO,EAAPA,QAASR,EAAQ,EAARA,SAAUC,EAAU,EAAVA,WACtDsC,EAAW,WACbvC,GAAYA,EAASM,EAAUA,EAAU1I,OAAS,IAClDqI,GAAcA,GAClB,EACA,OAAOO,EAAU,CAAEqB,KAAMX,GAAMqB,GAAW/B,IAAa+B,GAC3D,C,gBCJA,SAASC,GAAQ,GAAuL,IAEhMC,EAFWnC,EAAS,EAATA,UAAS,IAAE5I,SAAAA,OAAQ,IAAG,IAAC,EAAEwB,EAAG,EAAHA,IAAKD,EAAG,EAAHA,IAAG,IAAEyJ,MAAAA,OAAK,IAAG,KAAG,MAAEC,aAAAA,OAAY,IAAG,MAAG,MAAEC,gBAAAA,OAAe,IAAG,MAAG,MAAEC,cAAAA,OAAa,IAAG,KAAE,MAAEC,UAAAA,OAAS,IAAG,IAAC,EAAEC,EAAY,EAAZA,aAAcC,EAAM,EAANA,OAAQhD,EAAQ,EAARA,SAAUC,EAAU,EAAVA,WAAYgD,EAAM,EAANA,OACnLzJ,EAAS8G,EAAU,GAEzB,SAAS4C,EAAcC,GACnB,YAAgB3I,IAARtB,GAAqBiK,EAAIjK,QAAiBsB,IAARvB,GAAqBkK,EAAIlK,CACvE,CACA,SAASmK,EAAoBD,GACzB,YAAY3I,IAARtB,EACOD,OACCuB,IAARvB,GAEGnE,KAAKC,IAAImE,EAAMiK,GAAKrO,KAAKC,IAAIkE,EAAMkK,GAD/BjK,EAC0CD,CACzD,CACA,SAASoK,EAAerP,GACC,OAArByO,QAAkD,IAArBA,GAAuCA,EAAiBZ,OACrFY,GAAmB9B,EAAAA,GAAAA,KAAQ,gBACvBL,UAAW,CAAC,EAAG,GACf5I,SAAU,GACP1D,GAAO,IACVgP,OAAAA,EACAhD,SAAU,SAACmD,GACP,IAAIG,EACS,OAAbtD,QAAkC,IAAbA,GAA+BA,EAASmD,GACjC,QAA3BG,EAAKtP,EAAQgM,gBAA6B,IAAPsD,GAAyBA,EAAG/D,KAAKvL,EAASmP,EAClF,EACAlD,WAAAA,EACAgD,OAAAA,IAER,CACA,SAASM,EAAYvP,GACjBqP,GAAe,QACXtM,KAAM,SACNyM,UAAWZ,EACXvC,QAASwC,EACTC,UAAAA,GACG9O,GAEX,CACA,GAAIkP,EAAc1J,GAEd+J,EAAY,CACR7L,SAAAA,EACA4I,UAAW,CAAC9G,EAAQ4J,EAAoB5J,UAG3C,CASD,IAAI1F,EAAS4O,EAAQhL,EAAW8B,EACJ,qBAAjBuJ,IACPjP,EAASiP,EAAajP,IAC1B,IAEI2P,EACAjP,EAHEkP,EAAWN,EAAoBtP,GAC/B6P,EAAUD,IAAaxK,GAAO,EAAI,EAYxCmK,EAAe,CACXtM,KAAM,QACNuJ,UAAW,CAAC9G,EAAQ,GACpB9B,SAAAA,EACAiL,aAAAA,EACAD,MAAAA,EACAI,UAAAA,EACAC,aAAAA,EACA/C,SAAUkD,EAAcpP,GAjBN,SAACqP,GACnBM,EAAOjP,EACPA,EAAU2O,EACVzL,GAAWkM,EAAAA,GAAAA,GAAkBT,EAAIM,EAAMtN,EAAAA,EAAAA,QACtB,IAAZwN,GAAiBR,EAAIO,IACR,IAAbC,GAAkBR,EAAIO,IACvBH,EAAY,CAAEjD,UAAW,CAAC6C,EAAGO,GAAWhM,SAAAA,GAEhD,OASsD8C,GAE1D,CACA,MAAO,CACHqH,KAAM,kBAA2B,OAArBY,QAAkD,IAArBA,OAA8B,EAASA,EAAiBZ,MAAM,EAE/G,CCxFA,IAAMgC,GAAoB,WAAH,MAAU,CAC7B9M,KAAM,SACNyM,UAAW,IACXnD,QAAS,GACTyD,UAAW,GACd,EACKC,GAAyB,SAACjQ,GAAM,MAAM,CACxCiD,KAAM,SACNyM,UAAW,IACXnD,QAAoB,IAAXvM,EAAe,EAAIgB,KAAKK,KAAK,KAAO,GAC7C2O,UAAW,GACd,EACKE,GAAc,WAAH,MAAU,CACvBjN,KAAM,YACNwH,KAAM,SACNgC,SAAU,GACb,EACK0D,GAAsB,CACxBlN,KAAM,YACNwJ,SAAU,IAER2D,GAAqB,CACvB3Q,EAAGsQ,GACHrQ,EAAGqQ,GACH3H,EAAG2H,GACH1H,OAAQ0H,GACRzH,QAASyH,GACTxH,QAASwH,GACTM,QAASN,GACThI,OAAQkI,GACRjI,OAAQiI,GACRpK,MAAOoK,GACPK,QAASJ,GACTK,gBAAiBL,GACjBM,MAAON,GACPO,QAASR,IAEPS,GAAuB,SAACC,EAAU,GAAkB,IAAhBnE,EAAS,EAATA,UACtC,OAAIA,EAAU1I,OAAS,EACZqM,IAGSC,GAAmBO,IAAaP,GAAmBK,SACpDjE,EAAU,GAEjC,E,WClCMoE,GAAe,SAACvH,EAAK/D,GAEvB,MAAY,WAAR+D,MAKiB,kBAAV/D,IAAsB6F,MAAMC,QAAQ9F,OAE1B,kBAAVA,IACPuL,GAAAA,EAAAA,KAAavL,IACZA,EAAMwL,WAAW,SAK1B,E,YCrBMC,GAAc,IAAIhF,IAAI,CAAC,aAAc,WAAY,WAAY,YACnE,SAASiF,GAAmB3B,GACxB,MAAsBA,EAAE4B,MAAM,GAAI,GAAGC,MAAM,KAAI,eAAxC3M,EAAI,KAAEe,EAAK,KAClB,GAAa,gBAATf,EACA,OAAO8K,EACX,MAAiB/J,EAAM6L,MAAMC,GAAAA,KAAe,GAArCC,GAAuC,YAAjC,GACb,IAAKA,EACD,OAAOhC,EACX,IAAMiC,EAAOhM,EAAMiM,QAAQF,EAAQ,IAC/BG,EAAeT,GAAY3E,IAAI7H,GAAQ,EAAI,EAG/C,OAFI8M,IAAW/L,IACXkM,GAAgB,KACbjN,EAAO,IAAMiN,EAAeF,EAAO,GAC9C,CACA,IAAMG,GAAgB,oBAChBC,IAAS,kBACRb,GAAAA,GAAO,IACVc,kBAAmB,SAACtC,GAChB,IAAMuC,EAAYvC,EAAE8B,MAAMM,IAC1B,OAAOG,EAAYA,EAAUC,IAAIb,IAAoBc,KAAK,KAAOzC,CACrE,I,wBCnBE0C,IAAoB,kBACnBC,GAAAA,GAAgB,IAEnBxB,MAAAA,GAAAA,EACAD,gBAAiBC,GAAAA,EACjByB,aAAczB,GAAAA,EACdlD,KAAMkD,GAAAA,EACN0B,OAAQ1B,GAAAA,EAER2B,YAAa3B,GAAAA,EACb4B,eAAgB5B,GAAAA,EAChB6B,iBAAkB7B,GAAAA,EAClB8B,kBAAmB9B,GAAAA,EACnB+B,gBAAiB/B,GAAAA,EACjBkB,OAAAA,GACAc,aAAcd,KAKZe,GAAsB,SAACpJ,GAAG,OAAK0I,GAAkB1I,EAAI,ECvB3D,SAASsI,GAAkBtI,EAAK/D,GAC5B,IAAIkK,EACAkD,EAAmBD,GAAoBpJ,GAI3C,OAHIqJ,IAAqBhB,KACrBgB,EAAmB7B,GAAAA,GAE8B,QAA7CrB,EAAKkD,EAAiBf,yBAAsC,IAAPnC,OAAgB,EAASA,EAAG/D,KAAKiH,EAAkBpN,EACpH,C,kICJA,SAASqN,GAAoB,GAAM,EAAJC,KAAmB,EAAbxF,MAA4B,EAAbyF,cAA8B,EAAfC,gBAAiC,EAAhBC,iBAAwB,EAANpG,OAAkB,EAAVL,WAAuB,EAAXD,YAAiB,EAAJ2G,KAAa,EAAPtG,QAA0B,IAAduG,GAAU,cAC/J,QAAS1H,OAAO2H,KAAKD,GAAYnP,MACrC,CACA,SAASqP,GAAO7N,GACZ,OAAkB,IAAVA,GACc,kBAAVA,GACkB,IAAtB8N,WAAW9N,KACa,IAAxBA,EAAM+N,QAAQ,IAC1B,CACA,SAASC,GAAYC,GACjB,MAAoC,kBAAtBA,EACR,EACA5B,GAAkB,GAAI4B,EAChC,CACA,SAASC,GAAmBP,EAAY5J,GACpC,OAAO4J,EAAW5J,IAAQ4J,EAAoB,SAAKA,CACvD,CCnBA,SAASQ,GAAanO,EAAO2G,EAAWjM,EAAQiT,GAC5C,IAAMS,EAAqB9C,GAAa3E,EAAWjM,GAC/C0F,OAA6BgB,IAApBuM,EAAWD,KAAqBC,EAAWD,KAAO1N,EAAMqO,MAmBrE,MAlBe,SAAXjO,GAAqBgO,GAAwC,kBAAX1T,EAKlD0F,EAASiM,GAAkB1F,EAAWjM,GAEjCmT,GAAOzN,IAA6B,kBAAX1F,EAC9B0F,EAAS4N,GAAYtT,IAEfmL,MAAMC,QAAQpL,IACpBmT,GAAOnT,IACW,kBAAX0F,IACP1F,EAASsT,GAAY5N,IAKrByF,MAAMC,QAAQpL,IAKI,OAAdA,EAAO,KACPA,EAAO,GAAK0F,GAET1F,GAGA,CAAC0F,EAAQ1F,EAExB,CC1BA,IAAM4T,GAA6B,SAAC3H,EAAW3G,EAAOtF,GAA4B,IAApBiT,EAAa,UAAH,6CAAG,CAAC,EACxE,OAAO,SAAC9G,GACJ,IAAM0H,EAAkBL,GAAmBP,EAAYhH,IAAc,CAAC,EAMhEmB,EAAQyG,EAAgBzG,OAAS6F,EAAW7F,OAAS,EAK3D,EAAsB6F,EAAhBvG,QAAAA,OAAO,IAAG,IAAC,EACjBA,GAAoB7M,EAAsBuN,GAC1C,IAAMZ,EAAYiH,GAAanO,EAAO2G,EAAWjM,EAAQ6T,GAMnDC,EAAiBtH,EAAU,GAC3BuH,EAAiBvH,EAAUA,EAAU1I,OAAS,GAC9CkQ,EAAqBpD,GAAa3E,EAAW6H,GAC7CJ,EAAqB9C,GAAa3E,EAAW8H,IACnDE,EAAAA,EAAAA,GAAQD,IAAuBN,EAAoB,6BAAF,OAA+BzH,EAAS,kBAAU6H,EAAc,iBAASC,EAAc,cAAMD,EAAc,sEAA8DA,EAAc,qCAA6BC,EAAc,+BACnR,IAAI7T,GAAU,gBACVsM,UAAAA,EACA5I,SAAU0B,EAAMzB,eACbgQ,GAAe,IAClBnH,QAAAA,EACAR,SAAU,SAACmD,GACP/J,EAAMsI,IAAIyB,GACVwE,EAAgB3H,UAAY2H,EAAgB3H,SAASmD,EACzD,EACAlD,WAAY,WACRA,IACA0H,EAAgB1H,YAAc0H,EAAgB1H,YAClD,IAEJ,IAAK6H,IACAN,GACDvJ,KACyB,IAAzB0J,EAAgB5Q,KAKhB,OAAOuL,GAAuBtO,GAE7B,GAA6B,YAAzB2T,EAAgB5Q,KAKrB,OAAOyL,GAAQxO,GAMdyS,GAAoBkB,KACrB3T,GAAU,kBACHA,GACAwQ,GAAqBzE,EAAW/L,KAQvCA,EAAQuM,WACRvM,EAAQuM,SAAW5M,EAAsBK,EAAQuM,WAEjDvM,EAAQmM,cACRnM,EAAQmM,YAAcxM,EAAsBK,EAAQmM,cAExD,IAAM6H,EAAgB5O,EAAMoI,MACtBjN,EAAUyT,GAAiBA,EAAcxT,QAI/C,GAAIwT,GACAzT,aAAmB0T,eACC,OAAlBD,QAA4C,IAAlBA,OAA2B,EAASA,EAAcE,WAAWlI,UAAW,CACpG,IAAMmI,EAAuBrI,GAA2B1G,EAAO2G,EAAW/L,GAC1E,GAAImU,EACA,OAAOA,CACf,CAIA,OAAOxH,EAAAA,GAAAA,IAAQ3M,EACnB,CACJ,ECzFMoU,GAAsB,IAAIC,QAK1BC,GAAyB,WAC3B,WAAYN,IAAe,eAIvBzS,KAAKgT,eAAiB,KACtBhT,KAAKiT,YAAa,EAClBjT,KAAKkT,iBAAmB,KACxBlT,KAAKkE,YAAc,CAAElG,EAAG,EAAGC,EAAG,GAI9B+B,KAAKmT,aAAc,EACnBnT,KAAKoT,uBAAwB,EAI7BpT,KAAKqT,QC7BY,CACrBrV,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,ID+BjC1D,KAAKyS,cAAgBA,CACzB,CAiYC,OAjYA,6BACD,SAAMa,GAA4C,oEAAJ,CAAC,EAAC,IAA3BC,aAAAA,OAAY,IAAG,GAAK,EAIrC,IAAqC,IAAjCvT,KAAKyS,cAAce,UAAvB,CAEA,IAAM9R,EAAiB,SAACjE,GAGpB,EAAKgW,gBACDF,GACA,EAAKA,aAAa1V,EAAiBJ,EAAO,QAAQM,MAE1D,EACM+C,EAAU,SAACrD,EAAO4C,GACpB,IAAI0N,EAEJ,EAA+C,EAAK4E,WAA5CxP,EAAI,EAAJA,KAAMuQ,EAAe,EAAfA,gBAAiBC,EAAW,EAAXA,cAC3BxQ,GAASuQ,IACL,EAAKV,gBACL,EAAKA,iBACT,EAAKA,eAAiB9P,EAAcC,GAE/B,EAAK6P,mBAGd,EAAKC,YAAa,EAClB,EAAKC,iBAAmB,KACxB,EAAKU,qBACD,EAAKnB,cAAcoB,aACnB,EAAKpB,cAAcoB,WAAWC,oBAAqB,EACnD,EAAKrB,cAAcoB,WAAWtV,YAAS0G,GAK3CY,GAAS,SAACpC,GACN,IAAIsK,EAAIgG,EACJ9U,EAAU,EAAK+U,mBAAmBvQ,GAAMyO,OAAS,EAIrD,GAAI+B,GAAAA,GAAAA,KAAahV,GAAU,CACvB,IAAMiV,EAA8G,QAA9FH,EAA8C,QAAxChG,EAAK,EAAK0E,cAAcoB,kBAA+B,IAAP9F,OAAgB,EAASA,EAAGjJ,cAA2B,IAAPiP,OAAgB,EAASA,EAAGI,UAAU1Q,GAClK,GAAIyQ,EAEAjV,EADeuE,EAAW0Q,IACNvC,WAAW1S,GAAW,IAElD,CACA,EAAKiF,YAAYT,GAAQxE,CAC7B,IAEgB,OAAhB0U,QAAwC,IAAhBA,GAAkCA,EAAYlW,EAAO4C,GAChC,QAA5C0N,EAAK,EAAK0E,cAAc2B,sBAAmC,IAAPrG,GAAyBA,EAAGsG,UAAUhP,EAAciP,MAAM,GACnH,EACMvT,EAAS,SAACtD,EAAO4C,GAEnB,MAAyE,EAAKsS,WAAtEe,EAAe,EAAfA,gBAAiBa,EAAiB,EAAjBA,kBAAmBC,EAAe,EAAfA,gBAAiBC,EAAM,EAANA,OAE7D,GAAKf,GAAoB,EAAKV,eAA9B,CAEA,IAAQtS,EAAWL,EAAXK,OAER,GAAI6T,GAA+C,OAA1B,EAAKrB,iBAM1B,OALA,EAAKA,iBAAmBwB,GAAoBhU,QAEd,OAA1B,EAAKwS,mBACe,OAApBsB,QAAgD,IAApBA,GAAsCA,EAAgB,EAAKtB,oBAK/F,EAAKyB,WAAW,IAAKtU,EAAKtC,MAAO2C,GACjC,EAAKiU,WAAW,IAAKtU,EAAKtC,MAAO2C,GAOjC,EAAK+R,cAAcmC,SAKR,OAAXH,QAA8B,IAAXA,GAA6BA,EAAOhX,EAAO4C,EAzBpD,CA0Bd,EACMiB,EAAe,SAAC7D,EAAO4C,GAAI,OAAK,EAAKiM,KAAK7O,EAAO4C,EAAK,EAC5DL,KAAK6U,WAAa,IAAIhV,EAAWyT,EAAa,CAC1C5R,eAAAA,EACAZ,QAAAA,EACAC,OAAAA,EACAO,aAAAA,GACD,CAAEvB,mBAAoBC,KAAKyS,cAAcqC,yBAxFlC,CAyFd,GAAC,kBACD,SAAKrX,EAAO4C,GACR,IAAM4S,EAAajT,KAAKiT,WAExB,GADAjT,KAAKyM,SACAwG,EAAL,CAEA,IAAQ9Q,EAAa9B,EAAb8B,SACRnC,KAAK8N,eAAe3L,GACpB,IAAQ4S,EAAc/U,KAAK2S,WAAnBoC,UACM,OAAdA,QAAoC,IAAdA,GAAgCA,EAAUtX,EAAO4C,EAJ7D,CAKd,GAAC,oBACD,WACI,IAAI0N,EAAIgG,EACR/T,KAAKiT,YAAa,EACdjT,KAAKyS,cAAcoB,aACnB7T,KAAKyS,cAAcoB,WAAWC,oBAAqB,GAE5B,QAA1B/F,EAAK/N,KAAK6U,kBAA+B,IAAP9G,GAAyBA,EAAG3M,MAC/DpB,KAAK6U,gBAAa5P,GACUjF,KAAK2S,WAAzBe,iBACgB1T,KAAKgT,iBACzBhT,KAAKgT,iBACLhT,KAAKgT,eAAiB,MAEmB,QAA5Ce,EAAK/T,KAAKyS,cAAc2B,sBAAmC,IAAPL,GAAyBA,EAAGM,UAAUhP,EAAciP,MAAM,EACnH,GAAC,wBACD,SAAW7Q,EAAMuR,EAAQtU,GACrB,IAAQyC,EAASnD,KAAK2S,WAAdxP,KAER,GAAKzC,GAAWuU,GAAWxR,EAAMN,EAAMnD,KAAKkT,kBAA5C,CAEA,IAAMgC,EAAYlV,KAAKgU,mBAAmBvQ,GACtC0R,EAAOnV,KAAKkE,YAAYT,GAAQ/C,EAAO+C,GAEvCzD,KAAKmT,aAAenT,KAAKmT,YAAY1P,KACrC0R,ExBlKZ,SAA0BpX,EAAO,EAAcsV,GAAS,IAArB1P,EAAG,EAAHA,IAAKD,EAAG,EAAHA,IASpC,YARYuB,IAARtB,GAAqB5F,EAAQ4F,EAE7B5F,EAAQsV,GAAUlP,EAAAA,EAAAA,GAAIR,EAAK5F,EAAOsV,EAAQ1P,KAAOpE,KAAKmE,IAAI3F,EAAO4F,QAEpDsB,IAARvB,GAAqB3F,EAAQ2F,IAElC3F,EAAQsV,GAAUlP,EAAAA,EAAAA,GAAIT,EAAK3F,EAAOsV,EAAQ3P,KAAOnE,KAAKoE,IAAI5F,EAAO2F,IAE9D3F,CACX,CwBwJmBqX,CAAiBD,EAAMnV,KAAKmT,YAAY1P,GAAOzD,KAAKqT,QAAQ5P,KAEvEyR,EAAU/I,IAAIgJ,EAPJ,CAQd,GAAC,gCACD,WAAqB,WACjB,EAAyCnV,KAAK2S,WAAtC0C,EAAe,EAAfA,gBAAiB7P,EAAW,EAAXA,YACjBV,GAAW9E,KAAKyS,cAAcoB,YAAc,CAAC,GAA7C/O,OACFwQ,EAAkBtV,KAAKmT,YACzBkC,IAAmBE,EAAAA,EAAAA,GAAYF,GAC1BrV,KAAKmT,cACNnT,KAAKmT,YAAcnT,KAAKwV,yBAKxBxV,KAAKmT,eADLkC,IAAmBvQ,IxBpJnC,SAAiCqP,EAAW,GAA8B,IAA5BnO,EAAG,EAAHA,IAAKC,EAAI,EAAJA,KAAME,EAAM,EAANA,OAAQD,EAAK,EAALA,MAC7D,MAAO,CACHlI,EAAGgH,EAA4BmP,EAAUnW,EAAGiI,EAAMC,GAClDjI,EAAG+G,EAA4BmP,EAAUlW,EAAG+H,EAAKG,GAEzD,CwBgJmCsP,CAAwB3Q,EAAOqP,UAAWkB,GAMrErV,KAAKqT,QxB7Fb,WAA0D,IAA9B7N,EAAc,UAAH,6CAAGF,EAOtC,OANoB,IAAhBE,EACAA,EAAc,GAEO,IAAhBA,IACLA,EAAcF,GAEX,CACHtH,EAAGuH,EAAmBC,EAAa,OAAQ,SAC3CvH,EAAGsH,EAAmBC,EAAa,MAAO,UAElD,CwBkFuBkQ,CAAmBlQ,GAK9B8P,IAAoBtV,KAAKmT,aACzBrO,GACA9E,KAAKmT,cACJnT,KAAKoT,uBACNvN,GAAS,SAACpC,GACF,EAAKuQ,mBAAmBvQ,KACxB,EAAK0P,YAAY1P,GxBtHrC,SAA+BqB,EAAQqO,GACnC,IAAMwC,EAAsB,CAAC,EAO7B,YANwB1Q,IAApBkO,EAAYxP,MACZgS,EAAoBhS,IAAMwP,EAAYxP,IAAMmB,EAAOnB,UAE/BsB,IAApBkO,EAAYzP,MACZiS,EAAoBjS,IAAMyP,EAAYzP,IAAMoB,EAAOnB,KAEhDgS,CACX,CwB6G6CC,CAAsB9Q,EAAOqP,UAAU1Q,GAAO,EAAK0P,YAAY1P,IAEhG,GAER,GAAC,mCACD,WACI,MAAmEzD,KAAK2S,WAA/CQ,EAAW,EAA5BkC,gBAA8BQ,EAAwB,EAAxBA,yBACtC,IAAK1C,KAAgBoC,EAAAA,EAAAA,GAAYpC,GAC7B,OAAO,EACX,IAAM2C,EAAqB3C,EAAYlU,SACvC8W,EAAAA,EAAAA,GAAiC,OAAvBD,EAA6B,0GACvC,IAAQjC,EAAe7T,KAAKyS,cAApBoB,WAER,IAAKA,IAAeA,EAAW/O,OAC3B,OAAO,EACX,IAAMkR,ElBrNd,SAAwBhX,EAASiX,EAAoBlW,GACjD,IAAMmW,EAAc9N,GAAmBpJ,EAASe,GACxCoW,EAAWF,EAAXE,OAKR,OAJIA,IACA1O,GAAcyO,EAAYlY,EAAGmY,EAAOzV,OAAO1C,GAC3CyJ,GAAcyO,EAAYjY,EAAGkY,EAAOzV,OAAOzC,IAExCiY,CACX,CkB6M+BE,CAAeN,EAAoBjC,EAAWwC,KAAMrW,KAAKyS,cAAcqC,yBAC1FwB,ExB/JZ,SAAiCnC,EAAW6B,GACxC,MAAO,CACHhY,EAAGkH,EAA4BiP,EAAUnW,EAAGgY,EAAehY,GAC3DC,EAAGiH,EAA4BiP,EAAUlW,EAAG+X,EAAe/X,GAEnE,CwB0JkCsY,CAAwB1C,EAAW/O,OAAOqP,UAAW6B,GAK/E,GAAIH,EAA0B,CAC1B,IAAMW,EAAkBX,ErBvNpC,SAAiC,GAAU,IAAR7X,EAAC,EAADA,EAAGC,EAAC,EAADA,EAClC,MAAO,CAAE+H,IAAK/H,EAAE0F,IAAKuC,MAAOlI,EAAE0F,IAAKyC,OAAQlI,EAAEyF,IAAKuC,KAAMjI,EAAE2F,IAC9D,CqBqN6D8S,CAAwBH,IACzEtW,KAAKoT,wBAA0BoD,EAC3BA,IACAF,EAAsBvQ,EAAwByQ,GAEtD,CACA,OAAOF,CACX,GAAC,4BACD,SAAenU,GAAU,WACrB,EAAoGnC,KAAK2S,WAAjGxP,EAAI,EAAJA,KAAMuT,EAAY,EAAZA,aAAclR,EAAW,EAAXA,YAAamR,EAAc,EAAdA,eAAgBC,EAAgB,EAAhBA,iBAAkBC,EAAmB,EAAnBA,oBACrE1D,EAAcnT,KAAKmT,aAAe,CAAC,EACnC2D,EAAqBjR,GAAS,SAACpC,GACjC,GAAKwR,GAAWxR,EAAMN,EAAM,EAAK+P,kBAAjC,CAGA,IAAI1B,GAA8B,OAAhB2B,QAAwC,IAAhBA,OAAyB,EAASA,EAAY1P,KAAU,CAAC,EAC/FmT,IACApF,EAAa,CAAE7N,IAAK,EAAGD,IAAK,IAOhC,IAAM2J,EAAkB7H,EAAc,IAAM,IACtC8H,EAAgB9H,EAAc,GAAK,IACnCyH,GAAU,gBACZzL,KAAM,UACNW,SAAUuU,EAAevU,EAASsB,GAAQ,EAC1C4J,gBAAAA,EACAC,cAAAA,EACAF,aAAc,IACdG,UAAW,EACXgB,UAAW,IACRoI,GACAnF,GAKP,OAAO,EAAKuF,wBAAwBtT,EAAMwJ,EA1B1C,CA2BJ,IAEA,OAAO+J,QAAQC,IAAIH,GAAoBI,KAAKL,EAChD,GAAC,qCACD,SAAwBpT,EAAM+N,GAC1B,IAAM0D,EAAYlV,KAAKgU,mBAAmBvQ,GAC1C,OAAOyR,EAAUvI,MAAMwF,GAA2B1O,EAAMyR,EAAW,EAAG1D,GAC1E,GAAC,2BACD,WAAgB,WACZ3L,GAAS,SAACpC,GAAI,OAAK,EAAKuQ,mBAAmBvQ,GAAM6I,MAAM,GAC3D,GACA,gCAMA,SAAmB7I,GACf,IAAIsK,EACEoJ,EAAU,QAAU1T,EAAK2T,cACzBC,EAAsBrX,KAAKyS,cAAcE,WAAWwE,GAC1D,OAAOE,GAEDrX,KAAKyS,cAAc6E,SAAS7T,GAAwD,QAAhDsK,EAAK/N,KAAKyS,cAAcE,WAAW4E,eAA4B,IAAPxJ,OAAgB,EAASA,EAAGtK,KAAU,EAC5I,GAAC,0BACD,SAAa1F,GAAO,WAChB8H,GAAS,SAACpC,GAGN,GAAKwR,GAAWxR,EAFC,EAAKkP,WAAdxP,KAEoB,EAAK+P,kBAAjC,CAEA,IAAQW,EAAe,EAAKpB,cAApBoB,WACFqB,EAAY,EAAKlB,mBAAmBvQ,GAC1C,GAAIoQ,GAAcA,EAAW/O,OAAQ,CACjC,MAAqB+O,EAAW/O,OAAOqP,UAAU1Q,GAAzCE,EAAG,EAAHA,IAAKD,EAAG,EAAHA,IACbwR,EAAU/I,IAAIpO,EAAM0F,IAAQU,EAAAA,EAAAA,GAAIR,EAAKD,EAAK,IAC9C,CANU,CAOd,GACJ,GACA,4CAKA,WAAiC,IACzBqK,EADyB,OAE7B,GAAK/N,KAAKyS,cAAcxT,QAAxB,CAEA,MAAkCe,KAAK2S,WAA/BxP,EAAI,EAAJA,KAAMkS,EAAe,EAAfA,gBACNxB,EAAe7T,KAAKyS,cAApBoB,WACR,IAAK0B,EAAAA,EAAAA,GAAYF,IAAqBxB,GAAe7T,KAAKmT,YAA1D,CAMAnT,KAAKyT,gBAKL,IAAM+D,EAAc,CAAExZ,EAAG,EAAGC,EAAG,GAC/B4H,GAAS,SAACpC,GACN,IAAMyR,EAAY,EAAKlB,mBAAmBvQ,GAC1C,GAAIyR,EAAW,CACX,IAAMuC,EAASvC,EAAUhD,MACzBsF,EAAY/T,GxBtQ5B,SAAoBO,EAAQzF,GACxB,IAAI0F,EAAS,GACPyT,EAAelU,EAAWQ,GAC1B2T,EAAenU,EAAWjF,GAOhC,OANIoZ,EAAeD,EACfzT,GAAS2T,EAAAA,EAAAA,GAASrZ,EAAOoF,IAAKpF,EAAOmF,IAAMgU,EAAc1T,EAAOL,KAE3D+T,EAAeC,IACpB1T,GAAS2T,EAAAA,EAAAA,GAAS5T,EAAOL,IAAKK,EAAON,IAAMiU,EAAcpZ,EAAOoF,OAE7DkU,EAAAA,EAAAA,GAAM,EAAG,EAAG5T,EACvB,CwB2PoC6T,CAAW,CAAEnU,IAAK8T,EAAQ/T,IAAK+T,GAAU,EAAKtE,YAAY1P,GAClF,CACJ,IAIA,IAAQsU,EAAsB/X,KAAKyS,cAAcE,WAAzCoF,kBACR/X,KAAKyS,cAAcxT,QAAQ+Y,MAAM7P,UAAY4P,EACvCA,EAAkB,CAAC,EAAG,IACtB,OACqB,QAA1BhK,EAAK8F,EAAWwC,YAAyB,IAAPtI,GAAyBA,EAAGkK,eAC/DpE,EAAWqE,eACXlY,KAAK4T,qBAKL/N,GAAS,SAACpC,GACN,GAAKwR,GAAWxR,EAAMN,EAAM,MAA5B,CAKA,IAAM+R,EAAY,EAAKlB,mBAAmBvQ,GAC1C,EAAqB,EAAK0P,YAAY1P,GAA9BE,EAAG,EAAHA,IAAKD,EAAG,EAAHA,IACbwR,EAAU/I,KAAIhI,EAAAA,EAAAA,GAAIR,EAAKD,EAAK8T,EAAY/T,IAN9B,CAOd,GAzCU,CAJA,CA8Cd,GAAC,0BACD,WAAe,IACPsK,EADO,OAEX,GAAK/N,KAAKyS,cAAcxT,QAAxB,CAEA4T,GAAoB1G,IAAInM,KAAKyS,cAAezS,MAC5C,IAIMmY,EAAsBjZ,EAJZc,KAAKyS,cAAcxT,QAIkB,eAAe,SAACxB,GACjE,MAAsC,EAAKkV,WAAnCxP,EAAI,EAAJA,KAAI,IAAEiV,aACdjV,SAD0B,IAAG,GAAI,IACT,EAAKwJ,MAAMlP,EACvC,IACM4a,EAAyB,WAC3B,IAAQhD,EAAoB,EAAK1C,WAAzB0C,iBACJE,EAAAA,EAAAA,GAAYF,KACZ,EAAKlC,YAAc,EAAKqC,wBAEhC,EACQ3B,EAAe7T,KAAKyS,cAApBoB,WACFyE,EAA4BzE,EAAWlV,iBAAiB,UAAW0Z,GACrExE,IAAeA,EAAW/O,SACC,QAA1BiJ,EAAK8F,EAAWwC,YAAyB,IAAPtI,GAAyBA,EAAGkK,eAC/DpE,EAAWqE,gBAEfG,IAKA,IAAME,EAAqBja,EAAYuD,OAAQ,UAAU,kBAAM,EAAK2W,gCAAgC,IAK9FC,EAA2B5E,EAAWlV,iBAAiB,aAAc,YAAiC,IAA9BqD,EAAK,EAALA,MAAO0W,EAAgB,EAAhBA,iBAC7E,EAAKzF,YAAcyF,IACnB7S,GAAS,SAACpC,GACN,IAAMkV,EAAc,EAAK3E,mBAAmBvQ,GACvCkV,IAEL,EAAKzU,YAAYT,IAASzB,EAAMyB,GAAMa,UACtCqU,EAAYxM,IAAIwM,EAAYzG,MAAQlQ,EAAMyB,GAAMa,WACpD,IACA,EAAKmO,cAAcmC,SAE3B,IACA,OAAO,WACH2D,IACAJ,IACAG,IAC6B,OAA7BG,QAAkE,IAA7BA,GAA+CA,GACxF,CAjDU,CAkDd,GAAC,sBACD,WACI,IAAMG,EAAQ5Y,KAAKyS,cAAcE,WACjC,EAA0JiG,EAAlJzV,KAAAA,OAAI,IAAG,GAAK,IAAsIyV,EAApIrE,kBAAAA,OAAiB,IAAG,GAAK,IAA2GqE,EAAzGlF,gBAAAA,OAAe,IAAG,GAAK,IAAkFkF,EAAhFvD,gBAAAA,OAAe,IAAG,GAAK,IAAyDuD,EAAvDpT,YAAAA,OAAW,IAAG,EAAAF,EAAc,IAA2BsT,EAAzBlC,aAAAA,OAAY,IAAG,GAAI,EACpJ,OAAO,kBACAkC,GAAK,IACRzV,KAAAA,EACAoR,kBAAAA,EACAb,gBAAAA,EACA2B,gBAAAA,EACA7P,YAAAA,EACAkR,aAAAA,GAER,KAAC,EApZ0B,GAsZ/B,SAASzB,GAAWlJ,EAAW5I,EAAM+P,GACjC,QAAkB,IAAT/P,GAAiBA,IAAS4I,KACT,OAArBmH,GAA6BA,IAAqBnH,EAC3D,CAQA,SAAS2I,GAAoBhU,GAA4B,IAApBmY,EAAgB,UAAH,6CAAG,GAC7C9M,EAAY,KAOhB,OANIxM,KAAKC,IAAIkB,EAAOzC,GAAK4a,EACrB9M,EAAY,IAEPxM,KAAKC,IAAIkB,EAAO1C,GAAK6a,IAC1B9M,EAAY,KAETA,CACX,C,gCE/bA,SAAS+M,GAAiBhT,GACtB,OAAO/G,EAAAA,EAAAA,YAAU,kBAAM,kBAAM+G,GAAU,IAAE,GAC7C,CCJA,IAAMiT,GAA0B,SAACC,GAAI,OAAK,SAACJ,GAEvC,OADAI,EAAKJ,GACE,IACX,CAAC,ECCKzV,GAAO,CACT8V,IAAKF,ICaT,SAAuB,GAAoE,IAAlEG,EAAK,EAALA,MAAOC,EAAU,EAAVA,WAAYC,EAAQ,EAARA,SAAUC,EAAiB,EAAjBA,kBAAmB5G,EAAa,EAAbA,cAC/D6G,EAAeJ,GAASC,GAAcC,GAAYC,EAClDxE,GAAa0E,EAAAA,EAAAA,QAAO,MAClBxZ,GAAuByZ,EAAAA,EAAAA,YAAWC,GAAAA,GAAlC1Z,mBACFD,EAAW,CACb4B,eAAgB2X,EAChBvY,QAASqY,EACTpY,OAAQmY,EACR7X,MAAO,SAAC5D,EAAO4C,GACXwU,EAAW5V,QAAU,KACrBma,GAAYA,EAAS3b,EAAO4C,EAChC,IAEJtB,EAAAA,EAAAA,YAAU,WACqB,OAAvB8V,EAAW5V,SACX4V,EAAW5V,QAAQya,eAAe5Z,EAE1C,IAMAX,EAAgBsT,EAAe,cAAe6G,GAL9C,SAAuB7b,GACnBoX,EAAW5V,QAAU,IAAIY,EAAWpC,EAAOqC,EAAU,CACjDC,mBAAAA,GAER,GAEA+Y,IAAiB,kBAAMjE,EAAW5V,SAAW4V,EAAW5V,QAAQmC,KAAK,GACzE,IDrCI+B,KAAM4V,IEGV,SAAiBH,GACb,IAAsBe,EAAqCf,EAAnDgB,aAAiCnH,EAAkBmG,EAAlBnG,cACnCmH,GAAeC,EAAAA,GAAAA,IAAY,kBAAM,IAAI9G,GAA0BN,EAAc,KAGnF1T,EAAAA,EAAAA,YAAU,kBAAM4a,GAAqBA,EAAkBG,UAAUF,EAAa,GAAE,CAACA,EAAcD,KAE/F5a,EAAAA,EAAAA,YAAU,kBAAM6a,EAAaG,cAAc,GAAE,CAACH,GAClD,K,oCCSA,SAASI,KACL,IAAMC,GAAUT,EAAAA,EAAAA,YAAWU,GAAAA,GAC3B,GAAgB,OAAZD,EACA,MAAO,EAAC,EAAM,MAClB,IAAQzG,EAAwCyG,EAAxCzG,UAAW2G,EAA6BF,EAA7BE,eAAgBC,EAAaH,EAAbG,SAI7BC,GAAKC,EAAAA,EAAAA,UACXvb,EAAAA,EAAAA,YAAU,kBAAMqb,EAASC,EAAG,GAAE,IAE9B,OAAQ7G,GAAa2G,EAAiB,EAAC,EADlB,WAAH,OAASA,GAAkBA,EAAeE,EAAG,GACD,EAAC,EACnE,C,uCCpCA,SAASE,GAAgBC,EAAQ/W,GAC7B,OAAIA,EAAKC,MAAQD,EAAKE,IACX,EACH6W,GAAU/W,EAAKC,IAAMD,EAAKE,KAAQ,GAC9C,CAQA,IAAM8W,GAAsB,CACxBC,QAAS,SAACjD,EAAQkD,GACd,IAAKA,EAAKpc,OACN,OAAOkZ,EAKX,GAAsB,kBAAXA,EAAqB,CAC5B,IAAImD,GAAAA,GAAAA,KAAQnD,GAIR,OAAOA,EAHPA,EAAS9F,WAAW8F,EAK5B,CAKA,IAAMzZ,EAAIuc,GAAgB9C,EAAQkD,EAAKpc,OAAOP,GACxCC,EAAIsc,GAAgB9C,EAAQkD,EAAKpc,OAAON,GAC9C,MAAO,GAAP,OAAUD,EAAC,aAAKC,EAAC,IACrB,G,YCnCJ,SAAS4c,GAAchX,GACnB,MAAwB,kBAAVA,GAAsBA,EAAMwL,WAAW,SACzD,CAUA,IAAMyL,GAAmB,uDACzB,SAASC,GAAiB9b,GACtB,IAAMyQ,EAAQoL,GAAiBE,KAAK/b,GACpC,IAAKyQ,EACD,MAAO,CAAC,GACZ,cAA4BA,EAAK,GACjC,MAAO,CADO,KAAU,KAE5B,CAEA,SAASuL,GAAiBhc,EAASD,GAAoB,IAAXkc,EAAQ,UAAH,6CAAG,GAChDnF,EAAAA,EAAAA,GAAUmF,GAFG,EAEgB,yDAAF,OAA2Djc,EAAO,yDAC7F,MAA0B8b,GAAiB9b,GAAQ,eAA5Ckc,EAAK,KAAEC,EAAQ,KAEtB,GAAKD,EAAL,CAGA,IAAME,EAAWxZ,OAAOyZ,iBAAiBtc,GAASuc,iBAAiBJ,GACnE,OAAIE,EACOA,EAASG,OAEXX,GAAcO,GAEZH,GAAiBG,EAAUpc,EAASkc,EAAQ,GAG5CE,CAXD,CAad,CCrCA,IAAMK,GAAW,QACXC,GAAmB,CACrBhB,QAAS,SAACjD,EAAQ,GAAmC,IAAjCkE,EAAS,EAATA,UAAWC,EAAe,EAAfA,gBACrBC,EAAWpE,EAIXqE,EAAuBrE,EAAOsE,SAAS,QACvCC,EAAe,GACjBF,IACArE,EAASA,EAAO3H,QAAQgL,IAAkB,SAACpL,GAEvC,OADAsM,EAAanb,KAAK6O,GACX+L,EACX,KAEJ,IAAMQ,EAAS7M,GAAAA,EAAAA,MAAcqI,GAE7B,GAAIwE,EAAO5Z,OAAS,EAChB,OAAOwZ,EACX,IAAMK,EAAW9M,GAAAA,EAAAA,kBAA0BqI,GACrC/W,EAA8B,kBAAdub,EAAO,GAAkB,EAAI,EAE7CE,EAASP,EAAgB5d,EAAEoG,MAAQuX,EAAU3d,EAC7Coe,EAASR,EAAgB3d,EAAEmG,MAAQuX,EAAU1d,EACnDge,EAAO,EAAIvb,IAAWyb,EACtBF,EAAO,EAAIvb,IAAW0b,EAOtB,IAAMC,GAAelY,EAAAA,EAAAA,GAAIgY,EAAQC,EAAQ,IAEP,kBAAvBH,EAAO,EAAIvb,KAClBub,EAAO,EAAIvb,IAAW2b,GAEQ,kBAAvBJ,EAAO,EAAIvb,KAClBub,EAAO,EAAIvb,IAAW2b,GAC1B,IAAIC,EAASJ,EAASD,GACtB,GAAIH,EAAsB,CACtB,IAAIvZ,EAAI,EACR+Z,EAASA,EAAOxM,QAAQ2L,IAAU,WAC9B,IAAMc,EAAcP,EAAazZ,GAEjC,OADAA,IACOga,CACX,GACJ,CACA,OAAOD,CACX,G,YC3CEE,GAAwB,uGA8FzB,OA9FyB,yCAM1B,WAAoB,WAChB,EAAoExc,KAAK4Y,MAAjEnG,EAAa,EAAbA,cAAegK,EAAW,EAAXA,YAAaC,EAAiB,EAAjBA,kBAAmBC,EAAQ,EAARA,SAC/C9I,EAAepB,EAAfoB,YACR+I,EAAAA,GAAAA,GAAkBC,IACdhJ,IACI4I,EAAYK,OACZL,EAAYK,MAAMC,IAAIlJ,GACtB6I,GAAqBA,EAAkBtC,UAAYuC,GACnDD,EAAkBtC,SAASvG,GAE/BA,EAAWwC,KAAK2G,YAChBnJ,EAAWlV,iBAAiB,qBAAqB,WAC7C,EAAKse,cACT,IACApJ,EAAWqJ,YAAW,kBACfrJ,EAAWpV,SAAO,IACrB0b,eAAgB,kBAAM,EAAK8C,cAAc,MAGjDE,GAAAA,EAAAA,gBAAuC,CAC3C,GAAC,qCACD,SAAwBC,GAAW,WAC/B,EAA6Dpd,KAAK4Y,MAA1DyE,EAAgB,EAAhBA,iBAAkB5K,EAAa,EAAbA,cAAetP,EAAI,EAAJA,KAAMqQ,EAAS,EAATA,UACzCK,EAAapB,EAAcoB,WACjC,OAAKA,GASLA,EAAWL,UAAYA,EACnBrQ,GACAia,EAAUC,mBAAqBA,QACVpY,IAArBoY,EACAxJ,EAAWyJ,aAGXtd,KAAKid,eAELG,EAAU5J,YAAcA,IACpBA,EACAK,EAAW0J,UAEL1J,EAAW2J,YAMjBtc,EAAAA,GAAAA,YAAgB,WACZ,IAAI6M,GACmC,QAAhCA,EAAK8F,EAAW4J,kBAA+B,IAAP1P,OAAgB,EAASA,EAAG2P,QAAQrb,SAC/E,EAAK4a,cAEb,KAGD,MAnCI,IAoCf,GAAC,gCACD,WACI,IAAQpJ,EAAe7T,KAAK4Y,MAAMnG,cAA1BoB,WACJA,IACAA,EAAWwC,KAAK2G,aACXnJ,EAAW3G,kBAAoB2G,EAAW8J,UAC3C3d,KAAKid,eAGjB,GAAC,kCACD,WACI,MAA2Ejd,KAAK4Y,MAAxEnG,EAAa,EAAbA,cAAegK,EAAW,EAAXA,YAAgCmB,EAAc,EAAjClB,kBAC5B7I,EAAepB,EAAfoB,WACJA,IACAA,EAAWgK,6BACS,OAAhBpB,QAAwC,IAAhBA,OAAyB,EAASA,EAAYK,QACtEL,EAAYK,MAAMgB,OAAOjK,IACN,OAAnB+J,QAA8C,IAAnBA,OAA4B,EAASA,EAAeG,aAC/EH,EAAeG,WAAWlK,GAEtC,GAAC,0BACD,WACI,IAAQoJ,EAAiBjd,KAAK4Y,MAAtBqE,aACS,OAAjBA,QAA0C,IAAjBA,GAAmCA,GAChE,GAAC,oBACD,WACI,OAAO,IACX,KAAC,EA9FyB,CAASe,EAAAA,WAqGvC,IAAMnB,GAAyB,CAC3BoB,cAAc,kBACPxD,IAAmB,IACtByD,QAAS,CACL,sBACA,uBACA,yBACA,6BAGRC,oBAAqB1D,GACrB2D,qBAAsB3D,GACtB4D,uBAAwB5D,GACxB6D,wBAAyB7D,GACzB8D,UAAW7C,IC3HT8C,GAAiB,CACnBC,cDuGJ,SAAuB7F,GACnB,MAAkCoB,KAAa,eAAxCxG,EAAS,KAAEyJ,EAAY,KACxBR,GAAcjD,EAAAA,EAAAA,YAAWkF,GAAAA,GAC/B,OAAQV,EAAAA,cAA6BxB,IAA0B,kBAAK5D,GAAK,IAAE6D,YAAaA,EAAaC,mBAAmBlD,EAAAA,EAAAA,YAAWmF,GAAAA,GAA2BnL,UAAWA,EAAWyJ,aAAcA,IACtM,G,oCE9GA,SAAS2B,GAAezJ,EAAMjH,GAC1B,IAAKxE,MAAMC,QAAQuE,GACf,OAAO,EACX,IAAM2Q,EAAa3Q,EAAK7L,OACxB,GAAIwc,IAAe1J,EAAK9S,OACpB,OAAO,EACX,IAAK,IAAIE,EAAI,EAAGA,EAAIsc,EAAYtc,IAC5B,GAAI2L,EAAK3L,KAAO4S,EAAK5S,GACjB,OAAO,EAEf,OAAO,CACX,CCRA,ICAMuc,GAAoB,SAAClR,GAAC,MAAK,aAAamR,KAAKnR,EAAE,E,mCCA/CoR,GAAgB,SAACpR,GAAC,OAAK,SAACpM,GAAI,OAAKA,EAAKud,KAAKnR,EAAE,GCK7CqR,GAAsB,CAACrP,GAAAA,GAAQgL,GAAAA,GAAI3G,GAAAA,GAASiL,GAAAA,GAASC,GAAAA,GAAIC,GAAAA,GCLlD,CACTL,KAAM,SAACnR,GAAC,MAAW,SAANA,CAAY,EACzByR,MAAO,SAACzR,GAAC,OAAKA,CAAC,IDOb0R,GAAyB,SAAC1R,GAAC,OAAKqR,GAAoBM,KAAKP,GAAcpR,GAAG,EEJ1E4R,GAAa,GAAH,gBAAOP,IAAmB,CAAElQ,GAAAA,EAAOK,GAAAA,IAI7CqQ,GAAgB,SAAC7R,GAAC,OAAK4R,GAAWD,KAAKP,GAAcpR,GAAG,E,WCM9D,SAAS8R,GAAejN,EAAekN,EAAYC,GAC/C,IAAMhH,EAAQnG,EAAcE,WAC5B,OAAOkN,EAAAA,GAAAA,GAAwBjH,EAAO+G,OAAuB1a,IAAX2a,EAAuBA,EAAShH,EAAMgH,OAf5F,SAAoBnN,GAChB,IAAMxT,EAAU,CAAC,EAEjB,OADAwT,EAAchM,OAAOqZ,SAAQ,SAACjc,EAAO+D,GAAG,OAAM3I,EAAQ2I,GAAO/D,EAAMqO,KAAK,IACjEjT,CACX,CAWoG8gB,CAAWtN,GAP/G,SAAqBA,GACjB,IAAMtQ,EAAW,CAAC,EAElB,OADAsQ,EAAchM,OAAOqZ,SAAQ,SAACjc,EAAO+D,GAAG,OAAMzF,EAASyF,GAAO/D,EAAMzB,aAAa,IAC1ED,CACX,CAG+HC,CAAYqQ,GAC3I,C,sCCRA,SAASuN,GAAevN,EAAe7K,EAAK/D,GACpC4O,EAAcwN,SAASrY,GACvB6K,EAAc6E,SAAS1P,GAAKuE,IAAItI,GAGhC4O,EAAcyN,SAAStY,GAAK+Q,EAAAA,GAAAA,GAAY9U,GAEhD,CACA,SAASsc,GAAU1N,EAAekN,GAC9B,IAAMtE,EAAWqE,GAAejN,EAAekN,GAC/C,EAAyDtE,EAAW5I,EAAc2N,qBAAqB/E,GAAU,GAAS,CAAC,EAAC,IAAtHgF,cAAAA,OAAa,IAAG,GAAC,EAAC,EAAsB9hB,GAAtB,EAAEiT,YAA0B,eAEpD,IAAK,IAAM5J,KADXrJ,GAAS,kBAAKA,GAAW8hB,GACC,CAEtBL,GAAevN,EAAe7K,GADhB0Y,EAAAA,GAAAA,GAA6B/hB,EAAOqJ,IAEtD,CACJ,CAsEA,SAAS2Y,GAAwB3Y,EAAK4J,GAClC,GAAKA,EAGL,OADwBA,EAAW5J,IAAQ4J,EAAoB,SAAKA,GAC7CD,IAC3B,C,0BCtGA,SAASiP,GAAwB3c,GAC7B,OAAO4c,SAAQC,EAAAA,GAAAA,GAAc7c,IAAUA,EAAMkZ,IACjD,CCAA,SAAS4D,GAAgCtG,EAAIvX,EAAMe,GAC/C,IAAQ+c,EAA2B/e,OAA3B+e,uBACFC,ECNY,SAACxG,EAAIxW,GAAK,gBAAQwW,EAAE,aAAKxW,EAAK,CDM5Bid,CAAczG,EAAI0G,GAAAA,EAAAA,IAAmBje,GAAQ,YAAcA,GACzE4I,EAAYkV,GAA0BA,EAAuB1O,IAAI2O,GACvE,GAAInV,EAAW,CACX,IAAMsV,EAAcpU,YAAYC,MAkChC,OAtBA3L,EAAAA,GAAAA,QAAY,WACJ2C,EAAM6H,YACN7H,EAAM6H,UAAUW,YAAcO,YAAYC,MAAQmU,EAE1D,IAQA9f,EAAAA,GAAAA,QAAY,WACR0f,EAAuBK,OAAOJ,GAI9B,IACInV,EAAUe,QAEF,CAAZ,MAAOyU,GAAK,CAChB,IACOxV,EAAUW,aAAe,CACpC,CAEI,OAAO,CAEf,C,gBE7CM8U,GAA+B,SAAUC,EAAAA,GAAAA,GADjB,kB,kCCwB9B,SAASC,GAAe5O,EAAe6O,GAAuB,IACtDvT,EADwCtP,EAAU,UAAH,6CAAG,CAAC,EAEjD4c,EAAWqE,GAAejN,EAAe6O,EAAS7iB,EAAQmhB,QAChE,EAAkEvE,GAAY,CAAC,EAAC,IAA1E7J,WAAAA,OAAU,IAAG,EAAAiB,EAAcxD,wBAA0B,CAAC,EAAC,EACzDxQ,EAAQ8iB,qBACR/P,EAAa/S,EAAQ8iB,oBAMzB,IAAMC,EAAenG,EACf,kBAAMoG,GAAchP,EAAe4I,EAAU5c,EAAQ,EACrD,kBAAMuY,QAAQ0K,SAAS,EAKvBC,GAA+D,QAAxC5T,EAAK0E,EAAcmP,uBAAoC,IAAP7T,OAAgB,EAASA,EAAG8T,MACnG,WAAsB,IAArBC,EAAe,UAAH,6CAAG,EACd,EAAkEtQ,EAAU,IAApEJ,cAAAA,OAAa,IAAG,IAAC,EAAEC,EAAe,EAAfA,gBAAiBC,EAAgB,EAAhBA,iBAC5C,OAAOyQ,GAAgBtP,EAAe6O,EAASlQ,EAAgB0Q,EAAczQ,EAAiBC,EAAkB7S,EACpH,EACE,kBAAMuY,QAAQ0K,SAAS,EAK7B,EAAiBlQ,EAATL,EAAI,EAAJA,KACR,GAAIA,EAAM,CACN,MAA+B,mBAATA,EAChB,CAACqQ,EAAcG,GACf,CAACA,EAAoBH,GAAa,eAFjCQ,EAAK,KAAEC,EAAI,KAGlB,OAAOD,IAAQ9K,KAAK+K,EACxB,CAEI,OAAOjL,QAAQC,IAAI,CAACuK,IAAgBG,EAAmBljB,EAAQkN,QAEvE,CAIA,SAAS8V,GAAchP,EAAekN,GAA0D,IACxF5R,EADwF,yDAAJ,CAAC,EAAC,IAA1CpC,MAAAA,OAAK,IAAG,IAAC,EAAE4V,EAAkB,EAAlBA,mBAAoB/f,EAAI,EAAJA,KAE/E,EAAsFiR,EAAc2N,qBAAqBT,GAAW,IAA9HnO,WAAAA,OAAU,IAAG,EAAAiB,EAAcxD,uBAAsB,EAAEoR,EAAa,EAAbA,cAAkB9hB,GAAM,cAC3E2jB,EAAazP,EAAc6E,SAAS,cACtCiK,IACA/P,EAAa+P,GACjB,IAAMY,EAAa,GACbC,EAAqB5gB,IAAiD,QAAvCuM,EAAK0E,EAAc2B,sBAAmC,IAAPrG,OAAgB,EAASA,EAAGsU,WAAW7gB,IAAO,WACvHoG,GACP,IAAM/D,EAAQ4O,EAAc6E,SAAS1P,GAC/B0a,EAAc/jB,EAAOqJ,GAC3B,IAAK/D,QACeoB,IAAhBqd,GACCF,GACGG,GAAqBH,EAAoBxa,GAC7C,iBAEJ,IAAMwK,GAAkB,QAAEzG,MAAAA,EAAOV,QAAS,GAAMuG,GAKhD,IAAK3N,EAAM2e,YAAa,CACpB,IAAMC,EAAWhQ,EAAcE,WAAWwO,IACtCsB,IACArQ,EAAgBnH,QAAU0V,GAAgC8B,EAAU7a,EAAK/D,GAEjF,CACA,IAAI6H,EAAY7H,EAAM8I,MAAMwF,GAA2BvK,EAAK/D,EAAOye,EAAa7P,EAAciQ,oBAAsB3B,GAAAA,EAAAA,IAAmBnZ,GACjI,CAAEpG,MAAM,GACR4Q,IACFoO,GAAwB0B,KACxBA,EAAWnF,IAAInV,GACf8D,EAAYA,EAAUwL,MAAK,kBAAMgL,EAAWpE,OAAOlW,EAAI,KAE3Dua,EAAWthB,KAAK6K,EAAW,EA3B/B,IAAK,IAAM9D,KAAOrJ,EAAQ,EAAfqJ,GA6BX,OAAOoP,QAAQC,IAAIkL,GAAYjL,MAAK,WAChCmJ,GAAiBF,GAAU1N,EAAe4N,EAC9C,GACJ,CACA,SAAS0B,GAAgBtP,EAAe6O,GAAgF,IAAvElQ,EAAgB,UAAH,6CAAG,EAAGC,EAAkB,UAAH,6CAAG,EAAGC,EAAmB,UAAH,6CAAG,EAAG7S,EAAO,uCAC5G0jB,EAAa,GACbQ,GAAsBlQ,EAAcmP,gBAAgBC,KAAO,GAAKxQ,EAChEuR,EAA+C,IAArBtR,EAC1B,eAAC/O,EAAI,UAAH,6CAAG,EAAC,OAAKA,EAAI8O,CAAe,EAC9B,eAAC9O,EAAI,UAAH,6CAAG,EAAC,OAAKogB,EAAqBpgB,EAAI8O,CAAe,EAUzD,OATA3H,MAAM6H,KAAKkB,EAAcmP,iBACpBiB,KAAKC,IACLhD,SAAQ,SAACiD,EAAOxgB,GACjBwgB,EAAMC,OAAO,iBAAkB1B,GAC/Ba,EAAWthB,KAAKwgB,GAAe0B,EAAOzB,GAAS,kBACxC7iB,GAAO,IACVkN,MAAOyF,EAAgBwR,EAAwBrgB,MAChD2U,MAAK,kBAAM6L,EAAMC,OAAO,oBAAqB1B,EAAQ,IAC5D,IACOtK,QAAQC,IAAIkL,EACvB,CAIA,SAASW,GAAgBzjB,EAAGC,GACxB,OAAOD,EAAE4jB,iBAAiB3jB,EAC9B,CAOA,SAASijB,GAAqB,EAAmC3a,GAAK,IAAtCsb,EAAa,EAAbA,cAAeC,EAAc,EAAdA,eACrCC,EAAcF,EAAcnZ,eAAenC,KAAgC,IAAxBub,EAAevb,GAExE,OADAub,EAAevb,IAAO,EACfwb,CACX,C,kDCtIMC,GAAuB,CACzBhe,EAAcie,QACdje,EAAcke,OACdle,EAAcme,MACdne,EAAcoe,MACdpe,EAAcqe,IACdre,EAAciP,KACdjP,EAAcse,MAEZC,GAAuB,UAAIP,IAAsBQ,UACjDC,GAAoBT,GAAqBhhB,OAC/C,SAAS0hB,GAAYtR,GACjB,OAAO,SAAC0P,GAAU,OAAKnL,QAAQC,IAAIkL,EAAW/R,KAAI,gBAAG1E,EAAS,EAATA,UAAWjN,EAAO,EAAPA,QAAO,ODZ3E,SAA8BgU,EAAekN,GAA0B,IAE/DjU,EAFiDjN,EAAU,UAAH,6CAAG,CAAC,EAGhE,GAFAgU,EAAcuQ,OAAO,iBAAkBrD,GAEnCjW,MAAMC,QAAQgW,GAAa,CAC3B,IAAMwC,EAAaxC,EAAWvP,KAAI,SAACkR,GAAO,OAAKD,GAAe5O,EAAe6O,EAAS7iB,EAAQ,IAC9FiN,EAAYsL,QAAQC,IAAIkL,EAC5B,MACK,GAA0B,kBAAfxC,EACZjU,EAAY2V,GAAe5O,EAAekN,EAAYlhB,OAErD,CACD,IAAMulB,EAA2C,oBAAfrE,EAC5BD,GAAejN,EAAekN,EAAYlhB,EAAQmhB,QAClDD,EACNjU,EAAY+V,GAAchP,EAAeuR,EAAoBvlB,EACjE,CACA,OAAOiN,EAAUwL,MAAK,kBAAMzE,EAAcuQ,OAAO,oBAAqBrD,EAAW,GACrF,CCLkFsE,CAAqBxR,EAAe/G,EAAWjN,EAAQ,IAAE,CAC3I,CACA,SAASylB,GAAqBzR,GAC1B,IAAIrH,EAAU2Y,GAAYtR,GACpBpH,EAmSV,WAAuB,MACnB,OAAO,EAAP,cACKhG,EAAcie,QAAUa,IAAgB,KAAK,UAC7C9e,EAAcke,OAASY,OAAiB,UACxC9e,EAAcoe,MAAQU,OAAiB,UACvC9e,EAAcqe,IAAMS,OAAiB,UACrC9e,EAAciP,KAAO6P,OAAiB,UACtC9e,EAAcme,MAAQW,OAAiB,UACvC9e,EAAcse,KAAOQ,MAAiB,CAE/C,CA7SkBC,GACVC,GAAkB,EAKhBC,EAA0B,SAACC,EAAK5E,GAClC,IAAMtE,EAAWqE,GAAejN,EAAekN,GAC/C,GAAItE,EAAU,CACuCA,EAAzC7J,WAAR,IAAoB6O,EAA6BhF,EAA7BgF,cAAkB9hB,GAAM,QAAK8c,EAAQ,IACzDkJ,GAAM,0BAAKA,GAAQhmB,GAAW8hB,EAClC,CACA,OAAOkE,CACX,EAkBA,SAASC,EAAe/lB,EAASgmB,GA8B7B,IA7BA,IAAM7L,EAAQnG,EAAcE,WACtBsH,EAAUxH,EAAciS,mBAAkB,IAAS,CAAC,EAKpDvC,EAAa,GAKbwC,EAAc,IAAIra,IAMpBsa,EAAkB,CAAC,EAKnBC,EAAsBjiB,IAC1B,WAMSL,GACL,IAAMf,EAAOoiB,GAAqBrhB,GAC5BuiB,EAAYzZ,EAAM7J,GAClBujB,OAAuB9f,IAAhB2T,EAAMpX,GAAsBoX,EAAMpX,GAAQyY,EAAQzY,GACzDwjB,GAAgBC,EAAAA,GAAAA,GAAeF,GAK/BG,EAAc1jB,IAASijB,EAAoBK,EAAUK,SAAW,MAClD,IAAhBD,IACAL,EAAsBtiB,GAO1B,IAAI6iB,EAAcL,IAAS9K,EAAQzY,IAASujB,IAASnM,EAAMpX,IAASwjB,EAepE,GAXII,GACAf,GACA5R,EAAc4S,yBACdD,GAAc,GAMlBN,EAAU5B,eAAgB,UAAK0B,IAI7BE,EAAUK,UAA4B,OAAhBD,IAElBH,IAASD,EAAUQ,WAErBC,EAAAA,GAAAA,GAAoBR,IACJ,mBAATA,EACP,iBAOJ,IAAMS,EAqKlB,SAAgCtX,EAAMiH,GAClC,GAAoB,kBAATA,EACP,OAAOA,IAASjH,EAEf,GAAIxE,MAAMC,QAAQwL,GACnB,OAAQyJ,GAAezJ,EAAMjH,GAEjC,OAAO,CACX,CA7KqCuX,CAAuBX,EAAUQ,SAAUP,GAChEW,EAAoBF,GAEnBhkB,IAASijB,GACNK,EAAUK,WACTC,GACDJ,GAEHziB,EAAIsiB,GAAuBG,EAK1BW,EAAiBjc,MAAMC,QAAQob,GAAQA,EAAO,CAACA,GAKjDa,EAAiBD,EAAeE,OAAOvB,EAAyB,CAAC,IACjD,IAAhBY,IACAU,EAAiB,CAAC,GAUtB,MAAoCd,EAA5BgB,mBAAAA,OAAkB,IAAG,GAAC,EAAC,EACzBC,GAAU,kBACTD,GACAF,GAEDI,EAAgB,SAACpe,GACnB8d,GAAoB,EACpBf,EAAY1D,OAAOrZ,GACnBkd,EAAU3B,eAAevb,IAAO,CACpC,EACA,IAAK,IAAMA,KAAOme,EAAS,CACvB,IAAM5Q,EAAOyQ,EAAehe,GACtBsG,EAAO4X,EAAmBle,GAE5Bgd,EAAgB7a,eAAenC,KAK/BuN,IAASjH,GAKL+X,EAAAA,GAAAA,GAAkB9Q,KAAS8Q,EAAAA,GAAAA,GAAkB/X,IACxC0Q,GAAezJ,EAAMjH,IAASsX,EAC/BQ,EAAcpe,GAOdkd,EAAU5B,cAActb,IAAO,OAGrB3C,IAATkQ,EAEL6Q,EAAcpe,GAId+c,EAAY5H,IAAInV,QAGN3C,IAATkQ,GAAsBwP,EAAYha,IAAI/C,GAK3Coe,EAAcpe,GAOdkd,EAAU5B,cAActb,IAAO,EAEvC,CAKAkd,EAAUQ,SAAWP,EACrBD,EAAUgB,mBAAqBF,EAI3Bd,EAAUK,WACVP,GAAkB,kBAAKA,GAAoBgB,IAE3CvB,GAAmB5R,EAAcyT,wBACjCR,GAAoB,GAOpBA,IAAsBN,GACtBjD,EAAWthB,KAAI,MAAfshB,GAAU,QAASwD,EAAevV,KAAI,SAAC1E,GAAS,MAAM,CAClDA,UAAWA,EACXjN,SAAS,QAAE+C,KAAAA,GAAS/C,GACvB,KACJ,EAnKI8D,EAAI,EAAGA,EAAIuhB,GAAmBvhB,IAAK,EAAnCA,GA0KT,GAAIoiB,EAAY9C,KAAM,CAClB,IAAMsE,EAAoB,CAAC,EAC3BxB,EAAY7E,SAAQ,SAAClY,GACjB,IAAMwe,EAAiB3T,EAAc4T,cAAcze,QAC5B3C,IAAnBmhB,IACAD,EAAkBve,GAAOwe,EAEjC,IACAjE,EAAWthB,KAAK,CAAE6K,UAAWya,GACjC,CACA,IAAIG,EAAgB7F,QAAQ0B,EAAW9f,QAOvC,OANIgiB,IACkB,IAAlBzL,EAAMrB,UACL9E,EAAc4S,yBACfiB,GAAgB,GAEpBjC,GAAkB,EACXiC,EAAgBlb,EAAQ+W,GAAcnL,QAAQ0K,SACzD,CAkBA,MAAO,CACH8C,eAAAA,EACAnQ,UAhBJ,SAAmB7S,EAAM2jB,EAAU1mB,GAC/B,IAAIsP,EAEJ,GAAI1C,EAAM7J,GAAM2jB,WAAaA,EACzB,OAAOnO,QAAQ0K,UAEsB,QAAxC3T,EAAK0E,EAAcmP,uBAAoC,IAAP7T,GAAyBA,EAAG+R,SAAQ,SAACiD,GAAY,IAAIhV,EAAI,OAAuC,QAA/BA,EAAKgV,EAAM3O,sBAAmC,IAAPrG,OAAgB,EAASA,EAAGsG,UAAU7S,EAAM2jB,EAAW,IAChN9Z,EAAM7J,GAAM2jB,SAAWA,EACvB,IAAMhD,EAAaqC,EAAe/lB,EAAS+C,GAC3C,IAAK,IAAMoG,KAAOyD,EACdA,EAAMzD,GAAKsb,cAAgB,CAAC,EAEhC,OAAOf,CACX,EAIIoE,mBA5PJ,SAA4BC,GACxBpb,EAAUob,EAAa/T,EAC3B,EA2PI4P,SAAU,kBAAMhX,CAAK,EAE7B,CAUA,SAAS8Y,KAAkC,IAAlBgB,EAAW,UAAH,8CAC7B,MAAO,CACHA,SAAAA,EACAjC,cAAe,CAAC,EAChBC,eAAgB,CAAC,EACjB2C,mBAAoB,CAAC,EAE7B,CClTA,IAAM3D,GAAa,CACfzW,UAAWqN,IAAwB,YAAgC,IAA7BtG,EAAa,EAAbA,cAAerH,EAAO,EAAPA,QAMjDqH,EAAc2B,iBAAmB3B,EAAc2B,eAAiB8P,GAAqBzR,KAIjF8S,EAAAA,GAAAA,GAAoBna,KACpBrM,EAAAA,EAAAA,YAAU,kBAAMqM,EAAQ0O,UAAUrH,EAAc,GAAE,CAACrH,GAE3D,IACAqb,KAAM1N,IAAwB,SAACH,GAC3B,IAAQgH,EAA0BhH,EAA1BgH,OAAQnN,EAAkBmG,EAAlBnG,cAChB,EAAkCuH,KAAa,eAAxCxG,EAAS,KAAEyJ,EAAY,KACxByJ,GAAkBlN,EAAAA,EAAAA,YAAWU,GAAAA,IACnCnb,EAAAA,EAAAA,YAAU,WACN0T,EAAce,UAAYA,EAC1B,IAAM9H,EAAY+G,EAAc2B,gBAC5B3B,EAAc2B,eAAeC,UAAUhP,EAAcse,MAAOnQ,EAAW,CACnEoM,OAAS8G,GAAmBA,EAAgB9G,QACxCA,IAERlU,IAAc8H,GACd9H,EAAUwL,KAAK+F,EAEvB,GAAG,CAACzJ,GACR,KCjCJ,SAASmT,GAAiBlU,EAAe0S,EAAUyB,EAAe9gB,GAC9D,OAAO,SAACrI,EAAO4C,GACQ,UAAf5C,EAAM+D,MAAoB8B,MAK1BsjB,GAAiBnU,EAAc2B,gBAC/B3B,EAAc2B,eAAeC,UAAUhP,EAAcoe,MAAO0B,GAEhErf,GAAYA,EAASrI,EAAO4C,GAChC,CACJ,CCVA,IAAMwmB,GAAgB,SAAhBA,EAAiBjiB,EAAQme,GAC3B,QAAKA,IAGIne,IAAWme,GAIT8D,EAAcjiB,EAAQme,EAAM+D,eAE3C,E,mFCZMC,GAAoB,IAAIjU,QAMxBkU,GAAY,IAAIlU,QAChBmU,GAAuB,SAACC,GAC1B,IAAMphB,EAAWihB,GAAkB7U,IAAIgV,EAAM3oB,QAC7CuH,GAAYA,EAASohB,EACzB,EACMC,GAA2B,SAACC,GAC9BA,EAAQtH,QAAQmH,GACpB,EAoBA,SAASI,GAAoBroB,EAASP,EAASqH,GAC3C,IAAMwhB,EApBV,SAAkC,GAAsB,IAApBjR,EAAI,EAAJA,KAAS5X,GAAO,cAC1C8oB,EAAalR,GAAQmR,SAItBR,GAAUrc,IAAI4c,IACfP,GAAU7a,IAAIob,EAAY,CAAC,GAE/B,IAAME,EAAgBT,GAAU9U,IAAIqV,GAC9B3f,EAAM8f,KAAKC,UAAUlpB,GAQ3B,OAHKgpB,EAAc7f,KACf6f,EAAc7f,GAAO,IAAIggB,qBAAqBT,IAA0B,QAAE9Q,KAAAA,GAAS5X,KAEhFgpB,EAAc7f,EACzB,CAEsCigB,CAAyBppB,GAG3D,OAFAsoB,GAAkB5a,IAAInN,EAAS8G,GAC/BwhB,EAA0BQ,QAAQ9oB,GAC3B,WACH+nB,GAAkB9F,OAAOjiB,GACzBsoB,EAA0BS,UAAU/oB,EACxC,CACJ,CC5BA,IAAMgpB,GAAiB,CACnBC,KAAM,EACNhR,IAAK,GAET,SAASiR,GAAwBC,EAAe9c,EAAOoH,EAAe,GAAqD,IAAnD4D,EAAI,EAAJA,KAAc+R,EAAU,EAAlBC,OAAM,IAAcC,OAAAA,OAAM,IAAG,SAAM,EAAEC,EAAI,EAAJA,MAC/GxpB,EAAAA,EAAAA,YAAU,WACN,GAAKopB,GAAkB1V,EAAcxT,QAArC,CAEA,IAAMR,EAAU,CACZ4X,KAAe,OAATA,QAA0B,IAATA,OAAkB,EAASA,EAAKpX,QACvDmpB,WAAAA,EACAI,UAA6B,kBAAXF,EAAsBA,EAASN,GAAeM,IAiCpE,OAAOjB,GAAoB5U,EAAcxT,QAASR,GA/BrB,SAACyoB,GAC1B,IAAQuB,EAAmBvB,EAAnBuB,eAIR,GAAIpd,EAAMqd,WAAaD,IAEvBpd,EAAMqd,SAAWD,GAKbF,GAASE,IAAkBpd,EAAMsd,gBAArC,CAGSF,IACLpd,EAAMsd,gBAAiB,GAEvBlW,EAAc2B,gBACd3B,EAAc2B,eAAeC,UAAUhP,EAAcke,OAAQkF,GAMjE,IAAM7P,EAAQnG,EAAcE,WACtB7M,EAAW2iB,EACX7P,EAAMgQ,gBACNhQ,EAAMiQ,gBACZ/iB,GAAYA,EAASohB,EAZrB,CAaJ,GApCU,CAsCd,GAAG,CAACiB,EAAe9R,EAAM+R,EAAYE,GACzC,CAMA,SAASQ,GAA+BX,EAAe9c,EAAOoH,EAAe,GAAqB,QAAnB2I,SAAAA,OAAQ,IAAG,GAAI,GAC1Frc,EAAAA,EAAAA,YAAU,WACDopB,GAAkB/M,GAavB2N,uBAAsB,WAClB1d,EAAMsd,gBAAiB,EACvB,IAAQC,EAAoBnW,EAAcE,WAAlCiW,gBACRA,GAAmBA,EAAgB,MAC/BnW,EAAc2B,gBACd3B,EAAc2B,eAAeC,UAAUhP,EAAcke,QAAQ,EAErE,GACJ,GAAG,CAAC4E,GACR,CCxFA,ICiBIa,GDjBEC,GAAoB,CACtBC,OAAQnQ,IDFZ,SAAqB,GAAkF,IAAhFtG,EAAa,EAAbA,cAAe0W,EAAW,EAAXA,YAAaP,EAAe,EAAfA,gBAAiBC,EAAe,EAAfA,gBAAe,IAAEO,SAAAA,OAAQ,IAAG,GAAC,EAAC,EACxF/d,GAAQkO,EAAAA,EAAAA,QAAO,CACjBoP,gBAAgB,EAChBD,UAAU,IAEVP,EAAgB1H,QAAQ0I,GAAeP,GAAmBC,GAC1DO,EAASb,MAAQld,EAAMpM,QAAQ0pB,iBAC/BR,GAAgB,IACgC,qBAAzBP,qBACrBkB,GACAZ,IACMC,EAAe9c,EAAMpM,QAASwT,EAAe2W,EAC7D,ICTIC,IAAKtQ,IEIT,SAAuB,GAAuE,IAArEuQ,EAAK,EAALA,MAAOC,EAAU,EAAVA,WAAYC,EAAW,EAAXA,YAAaC,EAAQ,EAARA,SAAUhX,EAAa,EAAbA,cAAkBmG,GAAK,cAChF8Q,EAAoBJ,GAASC,GAAcC,GAAeC,EAC1DE,GAAapQ,EAAAA,EAAAA,SAAO,GACpBqQ,GAA4BrQ,EAAAA,EAAAA,QAAO,MAInCsQ,EAAe,CACjBnrB,UAAW6qB,GACPD,GACAE,GACA5Q,EAAqB,gBAE7B,SAASkR,IACLF,EAA0B3qB,SAAW2qB,EAA0B3qB,UAC/D2qB,EAA0B3qB,QAAU,IACxC,CACA,SAAS8qB,IAOL,OANAD,IACAH,EAAW1qB,SAAU,EACDwT,EAAcE,WAClB8W,UAAYhX,EAAc2B,gBACtC3B,EAAc2B,eAAeC,UAAUhP,EAAcqe,KAAK,IAEtDpgB,GACZ,CACA,SAAS0mB,EAAYvsB,EAAO4C,GACxB,IAAI0N,EAAIgG,EAAIkW,EAAIC,EACXH,MAMJlD,GAAcpU,EAAcxT,QAASxB,EAAMc,QAEW,QAAhD2rB,GAAMD,EAAKxX,EAAcE,YAAY2W,aAA0B,IAAPY,GAAyBA,EAAGlgB,KAAKigB,EAAIxsB,EAAO4C,GAD9C,QAAtD0T,GAAMhG,EAAK0E,EAAcE,YAAY6W,mBAAgC,IAAPzV,GAAyBA,EAAG/J,KAAK+D,EAAItQ,EAAO4C,GAErH,CACA,SAAS8pB,EAAgB1sB,EAAO4C,GAC5B,IAAI0N,EAAIgG,EACHgW,MAEkD,QAAtDhW,GAAMhG,EAAK0E,EAAcE,YAAY6W,mBAAgC,IAAPzV,GAAyBA,EAAG/J,KAAK+D,EAAItQ,EAAO4C,GAC/G,CACA,IAAM+pB,GAAaC,EAAAA,EAAAA,cAAY,SAAC5sB,EAAO4C,GACnC,IAAI0N,EAEJ,GADA+b,KACIH,EAAW1qB,QAAf,CAEA0qB,EAAW1qB,SAAU,EACrB2qB,EAA0B3qB,SAAU2C,EAAAA,EAAAA,GAAK1C,EAAgB2C,OAAQ,YAAamoB,EAAaH,GAAe3qB,EAAgB2C,OAAQ,gBAAiBsoB,EAAiBN,IACpK,IAAMS,EAAc7X,EAAcE,WAI9B2X,EAAYb,UAAYhX,EAAc2B,gBACtC3B,EAAc2B,eAAeC,UAAUhP,EAAcqe,KAAK,GAE5B,QAAjC3V,EAAKuc,EAAYf,kBAA+B,IAAPxb,GAAyBA,EAAG/D,KAAKsgB,EAAa7sB,EAAO4C,EAVrF,CAWd,GAAG,CAACogB,QAAQ8I,GAAa9W,IACzBtT,EAAgBsT,EAAe,cAAeiX,EAAoBU,OAAanlB,EAAW4kB,GAC1F/Q,GAAiBgR,EACrB,IFjEIS,MAAOxR,IGCX,SAAyB,GAAgC,IAA9ByR,EAAU,EAAVA,WAAY/X,EAAa,EAAbA,cAC3B2B,EAAmB3B,EAAnB2B,eACFqW,GAAUJ,EAAAA,EAAAA,cAAY,WACxBjW,GAAkBA,EAAeC,UAAUhP,EAAcme,OAAO,EACpE,GAAG,CAACpP,IACEsW,GAASL,EAAAA,EAAAA,cAAY,WACvBjW,GAAkBA,EAAeC,UAAUhP,EAAcme,OAAO,EACpE,GAAG,CAACpP,IACJvV,EAAY4T,EAAe,QAAS+X,EAAaC,OAAUxlB,GAC3DpG,EAAY4T,EAAe,OAAQ+X,EAAaE,OAASzlB,EAC7D,IHVI0lB,MAAO5R,IJQX,SAAyB,GAA0D,IAAxD6R,EAAY,EAAZA,aAAcC,EAAU,EAAVA,WAAYC,EAAU,EAAVA,WAAYrY,EAAa,EAAbA,cAC7DtT,EAAgBsT,EAAe,gBAAgBsY,EAAAA,EAAAA,UAAQ,WACnD,OAAOH,GAAgBE,EACjBnE,GAAiBlU,GAAe,EAAMgO,QAAQqK,GAAaF,QAC3D3lB,CACV,GAAG,CAAC2lB,EAAcnK,QAAQqK,GAAarY,IAAiB,CAAE/T,SAAUksB,IACpEzrB,EAAgBsT,EAAe,gBAAgBsY,EAAAA,EAAAA,UAAQ,WACnD,OAAOF,GAAcC,EACfnE,GAAiBlU,GAAe,EAAOgO,QAAQqK,GAAaD,QAC5D5lB,CACV,GAAG,CAAC2lB,EAAcnK,QAAQqK,GAAarY,IAAiB,CAAE/T,SAAUmsB,GACxE,K,4DKrBMG,GAAiB,IAAI1gB,IAAI,CAC3B,QACA,SACA,MACA,OACA,QACA,SACA,IACA,MAEE2gB,GAAkB,SAACrjB,GAAG,OAAKojB,GAAergB,IAAI/C,EAAI,EAIlDsjB,GAAgB,SAACtd,GAAC,OAAKA,IAAMgC,GAAAA,IAAUhC,IAAMgN,GAAAA,EAAE,GAErD,SAAWoO,GACPA,EAA4B,MAAI,QAChCA,EAA6B,OAAI,SACjCA,EAA2B,KAAI,OAC/BA,EAA4B,MAAI,QAChCA,EAA0B,IAAI,MAC9BA,EAA6B,OAAI,QACpC,CAPD,CAOGA,KAAyBA,GAAuB,CAAC,IACpD,IAAMmC,GAAmB,SAACC,EAAQC,GAAG,OAAK1Z,WAAWyZ,EAAO3b,MAAM,MAAM4b,GAAK,EACvEC,GAAyB,SAACC,EAAMC,GAAI,OAAK,SAACC,EAAO,GAAkB,IAAhBtjB,EAAS,EAATA,UACrD,GAAkB,SAAdA,IAAyBA,EACzB,OAAO,EACX,IAAMujB,EAAWvjB,EAAUuH,MAAM,sBACjC,GAAIgc,EACA,OAAOP,GAAiBO,EAAS,GAAIF,GAGrC,IAAMJ,EAASjjB,EAAUuH,MAAM,oBAC/B,OAAI0b,EACOD,GAAiBC,EAAO,GAAIG,GAG5B,CAGnB,CAAC,EACKI,GAAgB,IAAIrhB,IAAI,CAAC,IAAK,IAAK,MACnCshB,GAAgCC,GAAAA,EAAAA,QAA0B,SAACjkB,GAAG,OAAM+jB,GAAchhB,IAAI/C,EAAI,IAChG,SAASkkB,GAAgCrZ,GACrC,IAAMsZ,EAAoB,GAW1B,OAVAH,GAA8B9L,SAAQ,SAAClY,GACnC,IAAM/D,EAAQ4O,EAAc6E,SAAS1P,QACvB3C,IAAVpB,IACAkoB,EAAkBlrB,KAAK,CAAC+G,EAAK/D,EAAMqO,QACnCrO,EAAMsI,IAAIvE,EAAIyH,WAAW,SAAW,EAAI,GAEhD,IAEI0c,EAAkB1pB,QAClBoQ,EAAcmC,SACXmX,CACX,CACA,IAAMC,GAAmB,CAErBC,MAAO,kBAAGjuB,EAAC,EAADA,EAAC,IAAMkuB,YAAAA,OAAW,IAAG,MAAG,MAAEC,aAAAA,OAAY,IAAG,MAAG,SAAOnuB,EAAE0F,IAAM1F,EAAE2F,IAAMgO,WAAWua,GAAeva,WAAWwa,EAAa,EAC/HC,OAAQ,kBAAGnuB,EAAC,EAADA,EAAC,IAAMouB,WAAAA,OAAU,IAAG,MAAG,MAAEC,cAAAA,OAAa,IAAG,MAAG,SAAOruB,EAAEyF,IAAMzF,EAAE0F,IAAMgO,WAAW0a,GAAc1a,WAAW2a,EAAc,EAChItmB,IAAK,SAACylB,EAAO,GAAF,IAAIzlB,EAAG,EAAHA,IAAG,OAAO2L,WAAW3L,EAAI,EACxCC,KAAM,SAACwlB,EAAO,GAAF,IAAIxlB,EAAI,EAAJA,KAAI,OAAO0L,WAAW1L,EAAK,EAC3CE,OAAQ,kBAAGlI,EAAC,EAADA,EAAO+H,EAAG,EAAHA,IAAG,OAAO2L,WAAW3L,IAAQ/H,EAAEyF,IAAMzF,EAAE0F,IAAI,EAC7DuC,MAAO,kBAAGlI,EAAC,EAADA,EAAOiI,EAAI,EAAJA,KAAI,OAAO0L,WAAW1L,IAASjI,EAAE0F,IAAM1F,EAAE2F,IAAI,EAE9D3F,EAAGstB,GAAuB,EAAG,IAC7BrtB,EAAGqtB,GAAuB,EAAG,KAE3BiB,GAA2B,SAAChuB,EAAQkU,EAAe+Z,GACrD,IAAMC,EAAaha,EAAcrK,qBAC3BpJ,EAAUyT,EAAcxT,QACxBytB,EAAuBpR,iBAAiBtc,GACtC2tB,EAAYD,EAAZC,QACF1oB,EAAS,CAAC,EAGA,SAAZ0oB,GACAla,EAAcma,eAAe,UAAWruB,EAAOouB,SAAW,SAK9DH,EAAY1M,SAAQ,SAAClY,GACjB3D,EAAO2D,GAAOokB,GAAiBpkB,GAAK6kB,EAAYC,EACpD,IAEAja,EAAcmC,SACd,IAAMiY,EAAapa,EAAcrK,qBAQjC,OAPAokB,EAAY1M,SAAQ,SAAClY,GAGjB,IAAM/D,EAAQ4O,EAAc6E,SAAS1P,GACrC/D,GAASA,EAAMipB,KAAK7oB,EAAO2D,IAC3BrJ,EAAOqJ,GAAOokB,GAAiBpkB,GAAKilB,EAAYH,EACpD,IACOnuB,CACX,EAmHA,SAASwuB,GAAeta,EAAelU,EAAQ0F,EAAQoc,GACnD,OA3MqB,SAAC9hB,GACtB,OAAOuL,OAAO2H,KAAKlT,GAAQ0pB,KAAKgD,GACpC,CAyMW+B,CAAiBzuB,GAnHa,SAACkU,EAAelU,GAA4C,IAApC0F,EAAS,UAAH,6CAAG,CAAC,EAAGoc,EAAgB,UAAH,6CAAG,CAAC,EAC3F9hB,GAAS,UAAKA,GACd8hB,GAAgB,UAAKA,GACrB,IAAM4M,EAAuBnjB,OAAO2H,KAAKlT,GAAQ0R,OAAOgb,IAGpDiC,EAAyB,GACzBC,GAAsC,EACpCC,EAAuB,GA4E7B,GA3EAH,EAAqBnN,SAAQ,SAAClY,GAC1B,IAAM/D,EAAQ4O,EAAc6E,SAAS1P,GACrC,GAAK6K,EAAcwN,SAASrY,GAA5B,CAEA,IAGIylB,EAHA9b,EAAOtN,EAAO2D,GACd0lB,EAAWhO,GAAuB/N,GAChCgc,EAAKhvB,EAAOqJ,GAMlB,IAAIqe,EAAAA,GAAAA,GAAkBsH,GAAK,CACvB,IAAMC,EAAeD,EAAGlrB,OAClBorB,EAAsB,OAAVF,EAAG,GAAc,EAAI,EACvChc,EAAOgc,EAAGE,GACVH,EAAWhO,GAAuB/N,GAClC,IAAK,IAAIhP,EAAIkrB,EAAWlrB,EAAIirB,EAAcjrB,IACjC8qB,GAMDtX,EAAAA,EAAAA,GAAUuJ,GAAuBiO,EAAGhrB,MAAQ8qB,EAAQ,2CALpDA,EAAS/N,GAAuBiO,EAAGhrB,KACnCwT,EAAAA,EAAAA,GAAUsX,IAAWC,GAChBpC,GAAcoC,IAAapC,GAAcmC,GAAU,gEAMpE,MAEIA,EAAS/N,GAAuBiO,GAEpC,GAAID,IAAaD,EAGb,GAAInC,GAAcoC,IAAapC,GAAcmC,GAAS,CAClD,IAAMpuB,EAAU4E,EAAMqO,MACC,kBAAZjT,GACP4E,EAAMsI,IAAIwF,WAAW1S,IAEP,kBAAPsuB,EACPhvB,EAAOqJ,GAAO+J,WAAW4b,GAEpB7jB,MAAMC,QAAQ4jB,IAAOF,IAAWzS,GAAAA,KACrCrc,EAAOqJ,GAAO2lB,EAAGnd,IAAIuB,YAE7B,MACuB,OAAb2b,QAAkC,IAAbA,OAAsB,EAASA,EAASnlB,aACvD,OAAXklB,QAA8B,IAAXA,OAAoB,EAASA,EAAOllB,aAC9C,IAAToJ,GAAqB,IAAPgc,GAGF,IAAThc,EACA1N,EAAMsI,IAAIkhB,EAAOllB,UAAUoJ,IAG3BhT,EAAOqJ,GAAO0lB,EAASnlB,UAAUolB,IAMhCJ,IACDD,EACIpB,GAAgCrZ,GACpC0a,GAAsC,GAE1CC,EAAqBvsB,KAAK+G,GAC1ByY,EAAczY,QACa3C,IAAvBob,EAAczY,GACRyY,EAAczY,GACdrJ,EAAOqJ,GACjB/D,EAAMipB,KAAKS,GApET,CAuEd,IACIH,EAAqB/qB,OAAQ,CAC7B,IAAMqrB,EAAUN,EAAqBxb,QAAQ,WAAa,EACpD/P,OAAO8rB,YACP,KACAC,EAAkBrB,GAAyBhuB,EAAQkU,EAAe2a,GAaxE,OAXIF,EAAuB7qB,QACvB6qB,EAAuBpN,SAAQ,YAAkB,mBAAhBlY,EAAG,KAAE/D,EAAK,KACvC4O,EAAc6E,SAAS1P,GAAKuE,IAAItI,EACpC,IAGJ4O,EAAcmC,SAEViZ,GAAAA,GAAyB,OAAZH,GACb7rB,OAAOisB,SAAS,CAAE9nB,IAAK0nB,IAEpB,CAAEnvB,OAAQqvB,EAAiBvN,cAAAA,EACtC,CAEI,MAAO,CAAE9hB,OAAAA,EAAQ8hB,cAAAA,EAEzB,CAUU0N,CAAiCtb,EAAelU,EAAQ0F,EAAQoc,GAChE,CAAE9hB,OAAAA,EAAQ8hB,cAAAA,EACpB,CG1NA,IAAM2N,GAAkB,SAACvb,EAAelU,EAAQ0F,EAAQoc,GACpD,IAAMhF,E5BuCV,SAA6B5I,EAAe,EAAe4N,GAAe,IAAzB9hB,EAAM,kCAC7CS,EAAUyT,EAAcxT,QAC9B,KAAMD,aAAmBiL,SACrB,MAAO,CAAE1L,OAAAA,EAAQ8hB,cAAAA,GAiBrB,IAAK,IAAMzY,KAdPyY,IACAA,GAAgB,UAAKA,IAGzB5N,EAAchM,OAAOqZ,SAAQ,SAACjc,GAC1B,IAAM5E,EAAU4E,EAAMqO,MACtB,GAAK2I,GAAc5b,GAAnB,CAEA,IAAMoc,EAAWJ,GAAiBhc,EAASD,GACvCqc,GACAxX,EAAMsI,IAAIkP,EAHJ,CAId,IAGkB9c,EAAQ,CACtB,IAAMU,EAAUV,EAAOqJ,GACvB,GAAKiT,GAAc5b,GAAnB,CAEA,IAAMoc,EAAWJ,GAAiBhc,EAASD,GACtCqc,IAGL9c,EAAOqJ,GAAOyT,EAIVgF,QAAwCpb,IAAvBob,EAAczY,KAC/ByY,EAAczY,GAAO3I,GAVb,CAYhB,CACA,MAAO,CAAEV,OAAAA,EAAQ8hB,cAAAA,EACrB,C4B5EqB4N,CAAoBxb,EAAelU,EAAQ8hB,GAG5D,OAAO0M,GAAeta,EAFtBlU,EAAS8c,EAAS9c,OAE2B0F,EAD7Coc,EAAgBhF,EAASgF,cAE7B,E,WCXM6N,GAAuB,CAAEjvB,QAAS,MAClCkvB,GAA2B,CAAElvB,SAAS,G,kECkBtCmvB,GAAetkB,OAAO2H,KAAK4c,GAAAA,GAC3BC,GAAcF,GAAa/rB,OAC3BksB,GAAoB,CACtB,iBACA,oBACA,SACA,sBACA,gBACA,uBACA,2BAMEC,GAAa,WACf,cAAgF,WAAlE5pB,EAAM,EAANA,OAAQgU,EAAK,EAALA,MAAO6V,EAAmB,EAAnBA,oBAAqBC,EAAW,EAAXA,YAAgBjwB,EAAU,UAAH,6CAAG,CAAC,GAAC,eAK1EuB,KAAKf,QAAU,KAIfe,KAAK2uB,SAAW,IAAIrkB,IAIpBtK,KAAK4uB,eAAgB,EACrB5uB,KAAK6uB,uBAAwB,EAQ7B7uB,KAAK0iB,mBAAqB,KAM1B1iB,KAAKyG,OAAS,IAAIqoB,IAKlB9uB,KAAKwT,WAAY,EAKjBxT,KAAK+uB,mBAAqB,IAAID,IAM9B9uB,KAAKgvB,iBAAmB,CAAC,EAIzBhvB,KAAKivB,OAAS,CAAC,EAMfjvB,KAAKkvB,uBAAyB,CAAC,EAC/BlvB,KAAKmvB,aAAe,kBAAM,EAAKnM,OAAO,SAAU,EAAKoM,aAAa,EAClEpvB,KAAK4U,OAAS,WACL,EAAK3V,UAEV,EAAKowB,eACL,EAAKC,eAAe,EAAKrwB,QAAS,EAAKswB,YAAa,EAAK3W,MAAMZ,MAAO,EAAKnE,YAC/E,EACA7T,KAAKwvB,eAAiB,kBAAMtuB,EAAAA,GAAAA,OAAY,EAAK0T,QAAQ,GAAO,EAAK,EACjE,IAAQwa,EAA8BV,EAA9BU,aAAcG,EAAgBb,EAAhBa,YACtBvvB,KAAKovB,aAAeA,EACpBpvB,KAAKyvB,YAAa,UAAKL,GACvBpvB,KAAK0vB,cAAgB9W,EAAMrB,SAAU,UAAK6X,GAAiB,CAAC,EAC5DpvB,KAAKuvB,YAAcA,EACnBvvB,KAAK4E,OAASA,EACd5E,KAAK4Y,MAAQA,EACb5Y,KAAKkb,MAAQtW,EAASA,EAAOsW,MAAQ,EAAI,EACzClb,KAAKyuB,oBAAsBA,EAC3BzuB,KAAKvB,QAAUA,EACfuB,KAAK6uB,uBAAwBA,EAAAA,GAAAA,GAAsBjW,GACnD5Y,KAAK4uB,eAAgBA,EAAAA,GAAAA,GAAchW,GAC/B5Y,KAAK4uB,gBACL5uB,KAAK4hB,gBAAkB,IAAItX,KAE/BtK,KAAKqlB,uBAAyB5E,QAAQ7b,GAAUA,EAAO3F,SAWvD,MAA+Ce,KAAK2vB,4BAA4B/W,EAAO,CAAC,GAAhFsJ,EAAU,EAAVA,WAAe0N,GAAmB,cAC1C,IAAK,IAAMhoB,KAAOgoB,EAAqB,CACnC,IAAM/rB,EAAQ+rB,EAAoBhoB,QACR3C,IAAtBmqB,EAAaxnB,KAAsB8Y,EAAAA,GAAAA,GAAc7c,KACjDA,EAAMsI,IAAIijB,EAAaxnB,IAAM,GACzB4Y,GAAwB0B,IACxBA,EAAWnF,IAAInV,GAG3B,CACJ,CAkVC,OAjVD,mDAOA,SAA4BioB,EAAQC,GAChC,MAAO,CAAC,CACZ,GAAC,mBACD,SAAMznB,GAAU,IACR0F,EADQ,OAEZ/N,KAAKf,QAAUoJ,EACXrI,KAAK6T,YACL7T,KAAK6T,WAAWkc,MAAM1nB,GAEtBrI,KAAK4E,QAAU5E,KAAK4uB,gBAAkB5uB,KAAK6uB,wBAC3C7uB,KAAKgwB,sBAA+C,QAAtBjiB,EAAK/N,KAAK4E,cAA2B,IAAPmJ,OAAgB,EAASA,EAAGkiB,gBAAgBjwB,OAE5GA,KAAKyG,OAAOqZ,SAAQ,SAACjc,EAAO+D,GAAG,OAAK,EAAKsoB,kBAAkBtoB,EAAK/D,EAAM,IACjEsqB,GAAyBlvB,SCzJtC,WAEI,GADAkvB,GAAyBlvB,SAAU,EAC9B4uB,GAAAA,EAEL,GAAIhsB,OAAOsuB,WAAY,CACnB,IAAMC,EAAmBvuB,OAAOsuB,WAAW,4BACrCE,EAA8B,WAAH,OAAUnC,GAAqBjvB,QAAUmxB,EAAiBE,OAAO,EAClGF,EAAiBG,YAAYF,GAC7BA,GACJ,MAEInC,GAAqBjvB,SAAU,CAEvC,CD6IYuxB,GAEJxwB,KAAK0iB,mBAC4B,UAA7B1iB,KAAKyuB,sBAE8B,WAA7BzuB,KAAKyuB,qBAEDP,GAAqBjvB,SAI/Be,KAAK4E,QACL5E,KAAK4E,OAAO+pB,SAAS5R,IAAI/c,MAC7BA,KAAKywB,SAASzwB,KAAK4Y,MACvB,GAAC,qBACD,WACI,IAAI7K,EAAIgG,EAAIkW,EAOZ,IAAK,IAAMriB,KANgB,QAA1BmG,EAAK/N,KAAK6T,kBAA+B,IAAP9F,GAAyBA,EAAG2iB,UAC/D5uB,EAAAA,GAAAA,OAAkB9B,KAAKmvB,cACvBrtB,EAAAA,GAAAA,OAAkB9B,KAAK4U,QACvB5U,KAAK+uB,mBAAmBjP,SAAQ,SAAChC,GAAM,OAAKA,GAAQ,IACd,QAArC/J,EAAK/T,KAAKgwB,6BAA0C,IAAPjc,GAAyBA,EAAG/J,KAAKhK,MACxD,QAAtBiqB,EAAKjqB,KAAK4E,cAA2B,IAAPqlB,GAAyBA,EAAG0E,SAAS1N,OAAOjhB,MACzDA,KAAKivB,OACnBjvB,KAAKivB,OAAOrnB,GAAK+oB,QAErB3wB,KAAKf,QAAU,IACnB,GAAC,+BACD,SAAkB2I,EAAK/D,GAAO,WACpB+sB,EAAmB7P,GAAAA,EAAAA,IAAmBnZ,GACtCipB,EAAiBhtB,EAAMitB,GAAG,UAAU,SAACC,GACvC,EAAK3B,aAAaxnB,GAAOmpB,EACzB,EAAKnY,MAAMnO,UACPvJ,EAAAA,GAAAA,OAAY,EAAKiuB,cAAc,GAAO,GACtCyB,GAAoB,EAAK/c,aACzB,EAAKA,WAAWmd,kBAAmB,EAE3C,IACMC,EAAwBptB,EAAMitB,GAAG,gBAAiB9wB,KAAKwvB,gBAC7DxvB,KAAK+uB,mBAAmB5iB,IAAIvE,GAAK,WAC7BipB,IACAI,GACJ,GACJ,GAAC,8BACD,SAAiBC,GAIb,OAAKlxB,KAAKf,SACLe,KAAKmxB,0BACNnxB,KAAKwB,OAAS0vB,EAAM1vB,KAEjBxB,KAAKmxB,yBAAyBnxB,KAAKf,QAASiyB,EAAMjyB,SAD9C,CAEf,GAAC,0BACD,WAA6CmyB,EAAUC,EAAmBC,EAAcC,EAA2BC,GAA0B,WAAjHC,GAAL,EAAR9C,UAA0B,eAC/B+C,EAAW,GAUjB,IAAK,IAAInvB,EAAI,EAAGA,EAAI+rB,GAAa/rB,IAAK,CAClC,IAAMO,EAAOsrB,GAAa7rB,GAC1B,EAAiC8rB,GAAAA,EAAmBvrB,GAA5C6uB,EAAS,EAATA,UAAWC,EAAS,EAATA,UAMfD,EAAUF,IAAkBG,GAC5BF,EAAS7wB,MAAKgxB,EAAAA,EAAAA,eAAcD,GAAW,gBACnChqB,IAAK9E,GACF2uB,GAAa,IAChBhf,cAAezS,QAG3B,CACA,IAAKA,KAAK6T,YAAc0d,EAA2B,CAC/CvxB,KAAK6T,WAAa,IAAI0d,EAA0BD,EAActxB,KAAKovB,aAAcpvB,KAAK4E,QAAU5E,KAAK4E,OAAOiP,YAC5G,IAAQ8I,EAA0D8U,EAA1D9U,SAAU7X,EAAgD2sB,EAAhD3sB,OAAQ3B,EAAwCsuB,EAAxCtuB,KAAMkS,EAAkCoc,EAAlCpc,gBAAiByc,EAAiBL,EAAjBK,aACjD9xB,KAAK6T,WAAWqJ,WAAW,CACvBP,SAAAA,EACA7X,OAAAA,EACAitB,oBAAqBtR,QAAQtd,IACxBkS,IAAmBE,EAAAA,EAAAA,GAAYF,GACpC5C,cAAezS,KACfwvB,eAAgB,kBAAM,EAAKA,gBAAgB,EAQ3CwC,cAAiC,kBAAXltB,EAAsBA,EAAS,OACrDmtB,uBAAwBT,EACxBM,aAAAA,GAER,CACA,OAAOJ,CACX,GAAC,0BACD,WACI1xB,KAAKkyB,MAAMlyB,KAAKuvB,YAAavvB,KAAKovB,aAAcpvB,KAAKvB,QAASuB,KAAK4Y,MACvE,GACA,gCAKA,WACI,OAAO5Y,KAAKf,QACNe,KAAKmyB,2BAA2BnyB,KAAKf,QAASe,KAAK4Y,OtCrQxC,CACrB5a,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,GsCwQrC,GAAC,4BACD,SAAekE,GACX,OAAO5H,KAAKovB,aAAaxnB,EAC7B,GAAC,4BACD,SAAeA,EAAK/D,GAChB7D,KAAKovB,aAAaxnB,GAAO/D,CAC7B,GACA,kCAOA,SAAqBtF,GAA0B,IAAlB6zB,IAAY,UAAH,+CAClC,OAAOpyB,KAAKqyB,iCAAiC9zB,EAAQyB,KAAK4Y,MAAOwZ,EACrE,GACA,sBAIA,SAASxZ,IACDA,EAAMb,mBAAqB/X,KAAK4Y,MAAMb,oBACtC/X,KAAKwvB,iBAET,IAAMpS,EAAYpd,KAAK4Y,MACvB5Y,KAAK4Y,MAAQA,EAIb,IAAK,IAAIrW,EAAI,EAAGA,EAAIgsB,GAAkBlsB,OAAQE,IAAK,CAC/C,IAAMqF,EAAM2mB,GAAkBhsB,GAC1BvC,KAAKkvB,uBAAuBtnB,KAC5B5H,KAAKkvB,uBAAuBtnB,YACrB5H,KAAKkvB,uBAAuBtnB,IAEvC,IAAM0qB,EAAW1Z,EAAM,KAAOhR,GAC1B0qB,IACAtyB,KAAKkvB,uBAAuBtnB,GAAO5H,KAAK8wB,GAAGlpB,EAAK0qB,GAExD,CACAtyB,KAAKgvB,iBEtTb,SAAqChwB,EAASmW,EAAMjH,GAChD,IAAQgU,EAAe/M,EAAf+M,WACR,IAAK,IAAMta,KAAOuN,EAAM,CACpB,IAAMod,EAAYpd,EAAKvN,GACjB4qB,EAAYtkB,EAAKtG,GACvB,IAAI8Y,EAAAA,GAAAA,GAAc6R,GAKdvzB,EAAQkhB,SAAStY,EAAK2qB,GAClB/R,GAAwB0B,IACxBA,EAAWnF,IAAInV,QAUlB,IAAI8Y,EAAAA,GAAAA,GAAc8R,GAKnBxzB,EAAQkhB,SAAStY,GAAK+Q,EAAAA,GAAAA,GAAY4Z,EAAW,CAAEtmB,MAAOjN,KAClDwhB,GAAwB0B,IACxBA,EAAWpE,OAAOlW,QAGrB,GAAI4qB,IAAcD,EAMnB,GAAIvzB,EAAQihB,SAASrY,GAAM,CACvB,IAAM6qB,EAAgBzzB,EAAQsY,SAAS1P,IAEtC6qB,EAAcjQ,aAAeiQ,EAActmB,IAAIomB,EACpD,KACK,CACD,IAAMxB,EAAc/xB,EAAQ0zB,eAAe9qB,GAC3C5I,EAAQkhB,SAAStY,GAAK+Q,EAAAA,GAAAA,QAA4B1T,IAAhB8rB,EAA4BA,EAAcwB,EAAW,CAAEtmB,MAAOjN,IACpG,CAER,CAEA,IAAK,IAAM4I,KAAOsG,OACIjJ,IAAdkQ,EAAKvN,IACL5I,EAAQ2zB,YAAY/qB,GAE5B,OAAOuN,CACX,CF+PgCyd,CAA4B5yB,KAAMA,KAAK2vB,4BAA4B/W,EAAOwE,GAAYpd,KAAKgvB,kBAC/GhvB,KAAK6yB,wBACL7yB,KAAK6yB,wBAEb,GAAC,sBACD,WACI,OAAO7yB,KAAK4Y,KAChB,GACA,wBAGA,SAAW9V,GACP,IAAIiL,EACJ,OAAsC,QAA9BA,EAAK/N,KAAK4Y,MAAMka,gBAA6B,IAAP/kB,OAAgB,EAASA,EAAGjL,EAC9E,GACA,kCAGA,WACI,OAAO9C,KAAK4Y,MAAMpH,UACtB,GAAC,mCACD,WACI,OAAOxR,KAAK4Y,MAAM7Y,kBACtB,GAAC,mCACD,WACI,IAAIgO,EACJ,OAAO/N,KAAK4uB,cAAgB5uB,KAA8B,QAAtB+N,EAAK/N,KAAK4E,cAA2B,IAAPmJ,OAAgB,EAASA,EAAGglB,uBAClG,GAAC,+BACD,WAAyC,IACjChlB,EAAIgG,EADMif,EAAgB,UAAH,8CAE3B,GAAIA,EACA,OAA8B,QAAtBjlB,EAAK/N,KAAK4E,cAA2B,IAAPmJ,OAAgB,EAASA,EAAG2W,oBACtE,IAAK1kB,KAAK6uB,sBAAuB,CAC7B,IAAM5U,GAAkC,QAAtBlG,EAAK/T,KAAK4E,cAA2B,IAAPmP,OAAgB,EAASA,EAAG2Q,sBAAwB,CAAC,EAIrG,YAH2Bzf,IAAvBjF,KAAK4Y,MAAMrB,UACX0C,EAAQ1C,QAAUvX,KAAK4Y,MAAMrB,SAE1B0C,CACX,CAEA,IADA,IAAMA,EAAU,CAAC,EACR1X,EAAI,EAAGA,EAAI0wB,GAAiB1wB,IAAK,CACtC,IAAMO,EAAOowB,GAAa3wB,GACpBwiB,EAAO/kB,KAAK4Y,MAAM9V,KACpBmiB,EAAAA,GAAAA,GAAeF,KAAkB,IAATA,KACxB9K,EAAQnX,GAAQiiB,EAExB,CACA,OAAO9K,CACX,GACA,6BAGA,SAAgB8I,GACZ,IAAIhV,EACEolB,EAAqBnzB,KAAK+yB,wBAChC,GAAII,EAEA,OAD8C,QAA7CplB,EAAKolB,EAAmBvR,uBAAoC,IAAP7T,GAAyBA,EAAGgP,IAAIgG,GAC/E,kBAAMoQ,EAAmBvR,gBAAgBX,OAAO8B,EAAM,CAErE,GACA,sBAGA,SAASnb,EAAK/D,GAENA,IAAU7D,KAAKyG,OAAOyL,IAAItK,KAC1B5H,KAAK2yB,YAAY/qB,GACjB5H,KAAKkwB,kBAAkBtoB,EAAK/D,IAEhC7D,KAAKyG,OAAO0F,IAAIvE,EAAK/D,GACrB7D,KAAKovB,aAAaxnB,GAAO/D,EAAMqO,KACnC,GACA,yBAGA,SAAYtK,GACR,IAAImG,EACJ/N,KAAKyG,OAAOwa,OAAOrZ,GACyB,QAA3CmG,EAAK/N,KAAK+uB,mBAAmB7c,IAAItK,UAAyB,IAAPmG,GAAyBA,IAC7E/N,KAAK+uB,mBAAmB9N,OAAOrZ,UACxB5H,KAAKovB,aAAaxnB,GACzB5H,KAAKozB,2BAA2BxrB,EAAK5H,KAAKuvB,YAC9C,GACA,sBAGA,SAAS3nB,GACL,OAAO5H,KAAKyG,OAAOkE,IAAI/C,EAC3B,GAAC,sBACD,SAASA,EAAKmI,GACV,GAAI/P,KAAK4Y,MAAMnS,QAAUzG,KAAK4Y,MAAMnS,OAAOmB,GACvC,OAAO5H,KAAK4Y,MAAMnS,OAAOmB,GAE7B,IAAI/D,EAAQ7D,KAAKyG,OAAOyL,IAAItK,GAK5B,YAJc3C,IAAVpB,QAAwCoB,IAAjB8K,IACvBlM,GAAQ8U,EAAAA,GAAAA,GAAY5I,EAAc,CAAE9D,MAAOjM,OAC3CA,KAAKkgB,SAAStY,EAAK/D,IAEhBA,CACX,GACA,uBAKA,SAAU+D,GACN,YAAkC3C,IAA3BjF,KAAKovB,aAAaxnB,IAAuB5H,KAAKf,QAE/Ce,KAAKqzB,sBAAsBrzB,KAAKf,QAAS2I,EAAK5H,KAAKvB,SADnDuB,KAAKovB,aAAaxnB,EAE5B,GACA,2BAIA,SAAcA,EAAK/D,GACf7D,KAAKyvB,WAAW7nB,GAAO/D,CAC3B,GACA,2BAIA,SAAc+D,GACV,IAAImG,EACIwJ,EAAYvX,KAAK4Y,MAAjBrB,QACF+b,EAAsC,kBAAZ/b,GAA2C,kBAAZA,EACD,QAAvDxJ,GAAK8R,EAAAA,GAAAA,GAAwB7f,KAAK4Y,MAAOrB,UAA6B,IAAPxJ,OAAgB,EAASA,EAAGnG,QAC5F3C,EAIN,GAAIsS,QAAgCtS,IAArBquB,EACX,OAAOA,EAMX,IAAM/0B,EAASyB,KAAKuzB,uBAAuBvzB,KAAK4Y,MAAOhR,GACvD,YAAe3C,IAAX1G,IAAyBmiB,EAAAA,GAAAA,GAAcniB,QAMR0G,IAA5BjF,KAAK0vB,cAAc9nB,SACD3C,IAArBquB,OACEruB,EACAjF,KAAKyvB,WAAW7nB,GARXrJ,CASf,GAAC,gBACD,SAAGC,EAAWsH,GAIV,OAHK9F,KAAKivB,OAAOzwB,KACbwB,KAAKivB,OAAOzwB,GAAa,IAAIg1B,GAAAA,GAE1BxzB,KAAKivB,OAAOzwB,GAAWue,IAAIjX,EACtC,GAAC,oBACD,SAAOtH,GACI,IADgB,MACnBuP,EAAG,mBADU0lB,EAAI,iCAAJA,EAAI,kBAEa,QAAjC1lB,EAAK/N,KAAKivB,OAAOzwB,UAA+B,IAAPuP,IAAyB,EAAAA,GAAGiV,OAAM,QAAIyQ,EACpF,KAAC,EAtbc,GAwbbP,GAAe,CAAC,WAAS,gBAAK7P,KAC9B4P,GAAkBC,GAAa7wB,O,kCGxd/BqxB,GAAgB,uGAyCjB,OAzCiB,gDAClB,SAAyBr0B,EAAGC,GAMxB,OAAsC,EAA/BD,EAAEs0B,wBAAwBr0B,GAAS,GAAK,CACnD,GAAC,oCACD,SAAuBsZ,EAAOhR,GAC1B,IAAImG,EACJ,OAA8B,QAAtBA,EAAK6K,EAAMZ,aAA0B,IAAPjK,OAAgB,EAASA,EAAGnG,EACtE,GAAC,wCACD,SAA2BA,EAAK,GAAiB,IAAfgsB,EAAI,EAAJA,KAAM5b,EAAK,EAALA,aAC7B4b,EAAKhsB,UACLoQ,EAAMpQ,EACjB,GAAC,8CACD,aAAgGisB,GAAW,IAAxEriB,EAAU,EAAVA,WAAY6O,EAAa,EAAbA,cAAkB9hB,GAAM,cAAMu1B,EAAe,EAAfA,gBACrE7vB,ErBmFZ,SAAmB1F,EAAQiT,EAAYiB,GACnC,IAAI1E,EACE9J,EAAS,CAAC,EAChB,IAAK,IAAM2D,KAAOrJ,EAAQ,CACtB,IAAMw1B,EAAmBxT,GAAwB3Y,EAAK4J,GACtDvN,EAAO2D,QACkB3C,IAArB8uB,EACMA,EACuC,QAAtChmB,EAAK0E,EAAc6E,SAAS1P,UAAyB,IAAPmG,OAAgB,EAASA,EAAGmE,KACzF,CACA,OAAOjO,CACX,CqB9FqB+vB,CAAUz1B,EAAQiT,GAAc,CAAC,EAAGxR,MAYjD,GARI8zB,IACIzT,IACAA,EAAgByT,EAAgBzT,IAChC9hB,IACAA,EAASu1B,EAAgBv1B,IACzB0F,IACAA,EAAS6vB,EAAgB7vB,KAE7B4vB,EAAW,ErBkBvB,SAAiCphB,EAAelU,EAAQ0F,GACpD,IAAI8J,EAAIgG,EACFkgB,EAAenqB,OAAO2H,KAAKlT,GAAQ0R,QAAO,SAACrI,GAAG,OAAM6K,EAAcwN,SAASrY,EAAI,IAC/EssB,EAAeD,EAAa5xB,OAClC,GAAK6xB,EAEL,IAAK,IAAI3xB,EAAI,EAAGA,EAAI2xB,EAAc3xB,IAAK,CACnC,IAAMqF,EAAMqsB,EAAa1xB,GACnB4xB,EAAc51B,EAAOqJ,GACvB/D,EAAQ,KAKR6F,MAAMC,QAAQwqB,KACdtwB,EAAQswB,EAAY,IAOV,OAAVtwB,IACAA,EAAoG,QAA3FkQ,EAA4B,QAAtBhG,EAAK9J,EAAO2D,UAAyB,IAAPmG,EAAgBA,EAAK0E,EAAc2hB,UAAUxsB,UAAyB,IAAPmM,EAAgBA,EAAKxV,EAAOqJ,SAM9H3C,IAAVpB,GAAiC,OAAVA,IAEN,kBAAVA,IPhFc,iBAAiBkb,KOiFnBlb,IAAUib,GAAkBjb,IAE/CA,EAAQ8N,WAAW9N,IAEb4b,GAAc5b,IAAUuL,GAAAA,EAAAA,KAAa+kB,KAC3CtwB,EAAQqM,GAAkBtI,EAAKusB,IAEnC1hB,EAAcyN,SAAStY,GAAK+Q,EAAAA,GAAAA,GAAY9U,EAAO,CAAEoI,MAAOwG,UACpCxN,IAAhBhB,EAAO2D,KACP3D,EAAO2D,GAAO/D,GAEJ,OAAVA,GACA4O,EAAc4hB,cAAczsB,EAAK/D,GACzC,CACJ,CqB/DYywB,CAAwBt0B,KAAMzB,EAAQ0F,GACtC,IAAMswB,EAASvG,GAAgBhuB,KAAMzB,EAAQ0F,EAAQoc,GACrDA,EAAgBkU,EAAOlU,cACvB9hB,EAASg2B,EAAOh2B,MACpB,CACA,OAAO,QACHiT,WAAAA,EACA6O,cAAAA,GACG9hB,EAEX,KAAC,EAzCiB,CAASiwB,ICQ9B,IACKgG,GAAiB,uGAsClB,OAtCkB,6CACnB,SAAsBnsB,EAAUT,GAC5B,GAAImZ,GAAAA,EAAAA,IAAmBnZ,GAAM,CACzB,IAAM6sB,EAAczjB,GAAoBpJ,GACxC,OAAO6sB,GAAcA,EAAYzlB,SAAe,CACpD,CAEI,IAVchQ,EAUR01B,GAVQ11B,EAUyBqJ,EATxCxG,OAAOyZ,iBAAiBtc,IAUjB6E,IAASgX,EAAAA,GAAAA,GAAcjT,GACvB8sB,EAAcnZ,iBAAiB3T,GAC/B8sB,EAAc9sB,KAAS,EAC7B,MAAwB,kBAAV/D,EAAqBA,EAAM2X,OAAS3X,CAE1D,GAAC,wCACD,SAA2BwE,EAAU,GACjC,OAAOD,GAAmBC,EAD2B,EAAlBtI,mBAEvC,GAAC,mBACD,SAAMwvB,EAAaH,EAAc3wB,EAASma,IACtC+b,EAAAA,GAAAA,GAAgBpF,EAAaH,EAAc3wB,EAASma,EAAMb,kBAC9D,GAAC,yCACD,SAA4Ba,EAAOwE,GAC/B,OAAOuS,EAAAA,GAAAA,GAA4B/W,EAAOwE,EAC9C,GAAC,oCACD,WAAyB,WACjBpd,KAAK40B,oBACL50B,KAAK40B,2BACE50B,KAAK40B,mBAEhB,IAAQjG,EAAa3uB,KAAK4Y,MAAlB+V,UACJjO,EAAAA,GAAAA,GAAciO,KACd3uB,KAAK40B,kBAAoBjG,EAASmC,GAAG,UAAU,SAACrZ,GACxC,EAAKxY,UACL,EAAKA,QAAQ41B,YAAc,GAAH,OAAMpd,GACtC,IAER,GAAC,4BACD,SAAepP,EAAUknB,EAAauF,EAAWjhB,IAC7CkhB,EAAAA,GAAAA,GAAW1sB,EAAUknB,EAAauF,EAAWjhB,EACjD,KAAC,EAtCkB,CAAS6f,I,mFCF1BsB,GAAgB,4CAClB,aAAc,MAEY,OAFZ,gBACV,eAASC,YACJC,UAAW,EAAM,CAC1B,CA2BC,OA3BA,8CACD,SAAuBtc,EAAOhR,GAC1B,OAAOgR,EAAMhR,EACjB,GAAC,mCACD,SAAsBS,EAAUT,GAC5B,IAAImG,EACJ,OAAIgT,GAAAA,EAAAA,IAAmBnZ,IACyB,QAAnCmG,EAAKiD,GAAoBpJ,UAAyB,IAAPmG,OAAgB,EAASA,EAAGiB,UAAY,GAEhGpH,EAAOutB,GAAAA,EAAAA,IAAwBvtB,GAA0BA,GAAnBwZ,EAAAA,GAAAA,GAAYxZ,GAC3CS,EAAS+sB,aAAaxtB,GACjC,GAAC,wCACD,WACI,M3CjBiB,CACrB5J,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,G2CmBrC,GAAC,yCACD,SAA4BkV,EAAOwE,GAC/B,OAAOuS,EAAAA,GAAAA,GAA4B/W,EAAOwE,EAC9C,GAAC,mBACD,SAAMmS,EAAaH,EAAc3wB,EAASma,IACtCyc,EAAAA,GAAAA,GAAc9F,EAAaH,EAAc3wB,EAASuB,KAAKk1B,SAAUtc,EAAMb,kBAC3E,GAAC,4BACD,SAAe1P,EAAUknB,EAAauF,EAAWjhB,IAC7CyhB,EAAAA,GAAAA,GAAUjtB,EAAUknB,EAAauF,EAAWjhB,EAChD,GAAC,mBACD,SAAMxL,GACFrI,KAAKk1B,UAAWA,EAAAA,GAAAA,GAAS7sB,EAASktB,UAClC,sDAAYltB,EAChB,KAAC,EA/BiB,CAASqrB,I,YCJzB8B,IAAe,gBACjBC,SCJ2B,SAAC7D,EAAWnzB,GACvC,OAAOi3B,EAAAA,GAAAA,GAAe9D,GAChB,IAAIoD,GAAiBv2B,EAAS,CAAEk3B,4BAA4B,IAC5D,IAAInB,GAAkB/1B,EAAS,CAAEk3B,4BAA4B,GACvE,GDCOxT,IACA8G,I,4BEJD2M,GAAU,CAAC,UAAW,WAAY,aAAc,eAChDC,GAAaD,GAAQvzB,OACrByzB,GAAW,SAACjyB,GAAK,MAAsB,kBAAVA,EAAqB8N,WAAW9N,GAASA,CAAK,EAC3EkyB,GAAO,SAAClyB,GAAK,MAAsB,kBAAVA,GAAsB+W,GAAAA,GAAAA,KAAQ/W,EAAM,EACnE,SAASmyB,GAAUz3B,EAAQ03B,EAAQC,EAAMte,EAAUue,EAAwBC,GACnED,GACA53B,EAAOsQ,SAAU1K,EAAAA,EAAAA,GAAI,OAEJc,IAAjBixB,EAAKrnB,QAAwBqnB,EAAKrnB,QAAU,EAAGwnB,GAAgBze,IAC/DrZ,EAAO+3B,aAAcnyB,EAAAA,EAAAA,QAAuBc,IAAnBgxB,EAAOpnB,QAAwBonB,EAAOpnB,QAAU,EAAG,EAAG0nB,GAAiB3e,KAE3Fwe,IACL73B,EAAOsQ,SAAU1K,EAAAA,EAAAA,QAAuBc,IAAnBgxB,EAAOpnB,QAAwBonB,EAAOpnB,QAAU,OAAoB5J,IAAjBixB,EAAKrnB,QAAwBqnB,EAAKrnB,QAAU,EAAG+I,IAK3H,IAAK,IAAIrV,EAAI,EAAGA,EAAIszB,GAAYtzB,IAAK,CACjC,IAAMi0B,EAAc,SAAH,OAAYZ,GAAQrzB,GAAE,UACnCk0B,EAAeC,GAAUT,EAAQO,GACjCG,EAAaD,GAAUR,EAAMM,GACjC,QAAqBvxB,IAAjBwxB,QAA6CxxB,IAAf0xB,EAElCF,IAAiBA,EAAe,GAChCE,IAAeA,EAAa,GACI,IAAjBF,GACI,IAAfE,GACAZ,GAAKU,KAAkBV,GAAKY,IAE5Bp4B,EAAOi4B,GAAej3B,KAAKmE,KAAIS,EAAAA,EAAAA,GAAI2xB,GAASW,GAAeX,GAASa,GAAa/e,GAAW,IACxF3D,GAAAA,GAAAA,KAAa0iB,IAAe1iB,GAAAA,GAAAA,KAAawiB,MACzCl4B,EAAOi4B,IAAgB,MAI3Bj4B,EAAOi4B,GAAeG,CAE9B,EAIIV,EAAOrvB,QAAUsvB,EAAKtvB,UACtBrI,EAAOqI,QAASzC,EAAAA,EAAAA,GAAI8xB,EAAOrvB,QAAU,EAAGsvB,EAAKtvB,QAAU,EAAGgR,GAElE,CACA,SAAS8e,GAAUjwB,EAAQmwB,GACvB,YAA8B3xB,IAAvBwB,EAAOmwB,GACRnwB,EAAOmwB,GACPnwB,EAAOwX,YACjB,CAwBA,IAAMoY,GAAkBQ,GAAS,EAAG,GAAKxtB,GAAAA,IACnCktB,GAAmBM,GAAS,GAAK,IAAMC,GAAAA,GAC7C,SAASD,GAASlzB,EAAKD,EAAK+F,GACxB,OAAO,SAACstB,GAEJ,OAAIA,EAAIpzB,EACG,EACPozB,EAAIrzB,EACG,EACJ+F,GAAOmO,EAAAA,EAAAA,GAASjU,EAAKD,EAAKqzB,GACrC,CACJ,CCrFA,SAASC,GAAavzB,EAAMwzB,GACxBxzB,EAAKE,IAAMszB,EAAWtzB,IACtBF,EAAKC,IAAMuzB,EAAWvzB,GAC1B,CAMA,SAASwzB,GAAY7vB,EAAK8vB,GACtBH,GAAa3vB,EAAIrJ,EAAGm5B,EAAUn5B,GAC9Bg5B,GAAa3vB,EAAIpJ,EAAGk5B,EAAUl5B,EAClC,CCVA,SAASm5B,GAAiBr5B,EAAOuG,EAAWF,EAAOF,EAAagD,GAM5D,OAJAnJ,EAAQiJ,GADRjJ,GAASuG,EACiB,EAAIF,EAAOF,QACpBe,IAAbiC,IACAnJ,EAAQiJ,GAAWjJ,EAAO,EAAImJ,EAAUhD,IAErCnG,CACX,CAsBA,SAASs5B,GAAqB5zB,EAAMkE,EAAY,EAA4B1D,EAAQqzB,GAAY,mBAA/C1vB,EAAG,KAAEC,EAAQ,KAAEC,EAAS,MAlBzE,SAAyBrE,GAA8F,IAAxFa,EAAY,UAAH,6CAAG,EAAGF,EAAQ,UAAH,6CAAG,EAAGH,EAAS,UAAH,6CAAG,GAAKiD,EAAQ,uCAAE+vB,EAAa,UAAH,6CAAGxzB,EAAM6zB,EAAa,UAAH,6CAAG7zB,EAC7G,GAAIwQ,GAAAA,GAAAA,KAAa3P,GAAY,CACzBA,EAAYqN,WAAWrN,GAEvBA,GADyBH,EAAAA,EAAAA,GAAImzB,EAAW3zB,IAAK2zB,EAAW5zB,IAAKY,EAAY,KAC1CgzB,EAAW3zB,GAC9C,CACA,GAAyB,kBAAdW,EAAX,CAEA,IAAIJ,GAAcC,EAAAA,EAAAA,GAAI8yB,EAAWtzB,IAAKszB,EAAWvzB,IAAKO,GAClDR,IAASwzB,IACT/yB,GAAeI,GACnBb,EAAKE,IAAMyzB,GAAiB3zB,EAAKE,IAAKW,EAAWF,EAAOF,EAAagD,GACrEzD,EAAKC,IAAM0zB,GAAiB3zB,EAAKC,IAAKY,EAAWF,EAAOF,EAAagD,EAL3D,CAMd,CAMIqwB,CAAgB9zB,EAAMkE,EAAWC,GAAMD,EAAWE,GAAWF,EAAWG,GAAYH,EAAWvD,MAAOH,EAAQqzB,EAClH,CAIA,IAAMtvB,GAAQ,CAAC,IAAK,SAAU,WACxBC,GAAQ,CAAC,IAAK,SAAU,WAK9B,SAASuvB,GAAoBnwB,EAAKM,EAAYwvB,EAAWM,GACrDJ,GAAqBhwB,EAAIrJ,EAAG2J,EAAYK,GAAqB,OAAdmvB,QAAoC,IAAdA,OAAuB,EAASA,EAAUn5B,EAAiB,OAAdy5B,QAAoC,IAAdA,OAAuB,EAASA,EAAUz5B,GAClLq5B,GAAqBhwB,EAAIpJ,EAAG0J,EAAYM,GAAqB,OAAdkvB,QAAoC,IAAdA,OAAuB,EAASA,EAAUl5B,EAAiB,OAAdw5B,QAAoC,IAAdA,OAAuB,EAASA,EAAUx5B,EACtL,CCjDA,SAASy5B,GAAgB11B,GACrB,OAA2B,IAApBA,EAAMsC,WAAmC,IAAhBtC,EAAMoC,KAC1C,CACA,SAASuzB,GAAY31B,GACjB,OAAO01B,GAAgB11B,EAAMhE,IAAM05B,GAAgB11B,EAAM/D,EAC7D,CACA,SAAS25B,GAAUv4B,EAAGC,GAClB,OAAQD,EAAErB,EAAE2F,MAAQrE,EAAEtB,EAAE2F,KACpBtE,EAAErB,EAAE0F,MAAQpE,EAAEtB,EAAE0F,KAChBrE,EAAEpB,EAAE0F,MAAQrE,EAAErB,EAAE0F,KAChBtE,EAAEpB,EAAEyF,MAAQpE,EAAErB,EAAEyF,GACxB,CACA,SAASm0B,GAAYxwB,GACjB,OAAO7D,EAAW6D,EAAIrJ,GAAKwF,EAAW6D,EAAIpJ,EAC9C,C,gBCdM65B,GAAS,WACX,cAAc,eACV93B,KAAK0d,QAAU,EACnB,CAqGC,OArGA,2BACD,SAAI/C,IACAod,EAAAA,GAAAA,IAAc/3B,KAAK0d,QAAS/C,GAC5BA,EAAK6U,gBACT,GAAC,oBACD,SAAO7U,GAKH,IAJAqd,EAAAA,GAAAA,IAAWh4B,KAAK0d,QAAS/C,GACrBA,IAAS3a,KAAKi4B,WACdj4B,KAAKi4B,cAAWhzB,GAEhB0V,IAAS3a,KAAKk2B,KAAM,CACpB,IAAM+B,EAAWj4B,KAAK0d,QAAQ1d,KAAK0d,QAAQrb,OAAS,GAChD41B,GACAj4B,KAAKud,QAAQ0a,EAErB,CACJ,GAAC,sBACD,SAAStd,GACL,IAMIsd,EANEC,EAAcl4B,KAAK0d,QAAQya,WAAU,SAACC,GAAM,OAAKzd,IAASyd,CAAM,IACtE,GAAoB,IAAhBF,EACA,OAAO,EAKX,IAAK,IAAI31B,EAAI21B,EAAa31B,GAAK,EAAGA,IAAK,CACnC,IAAM61B,EAASp4B,KAAK0d,QAAQnb,GAC5B,IAAyB,IAArB61B,EAAO5kB,UAAqB,CAC5BykB,EAAWG,EACX,KACJ,CACJ,CACA,QAAIH,IACAj4B,KAAKud,QAAQ0a,IACN,EAKf,GAAC,qBACD,SAAQtd,EAAM0d,GACV,IAAItqB,EACEkqB,EAAWj4B,KAAKk2B,KAClBvb,IAASsd,IAEbj4B,KAAKi4B,SAAWA,EAChBj4B,KAAKk2B,KAAOvb,EACZA,EAAK2d,OACDL,IACAA,EAAS5vB,UAAY4vB,EAASzI,iBAC9B7U,EAAK6U,iBACL7U,EAAK4d,WAAaN,EACdI,IACA1d,EAAK4d,WAAWC,iBAAkB,GAElCP,EAASQ,WACT9d,EAAK8d,SAAWR,EAASQ,SACzB9d,EAAK8d,SAASrJ,aACV6I,EAASS,iBAAmBT,EAAS7I,eAEpB,QAApBrhB,EAAK4M,EAAKtE,YAAyB,IAAPtI,OAAgB,EAASA,EAAG4qB,cACzDhe,EAAKie,eAAgB,IAGP,IADIje,EAAKlc,QAAnBo6B,WAEJZ,EAASa,QAerB,GAAC,mCACD,WACI94B,KAAK0d,QAAQoC,SAAQ,SAACnF,GAClB,IAAI5M,EAAIgG,EAAIkW,EAAIC,EAAI6O,EAC0B,QAA7ChlB,GAAMhG,EAAK4M,EAAKlc,SAAS0b,sBAAmC,IAAPpG,GAAyBA,EAAG/J,KAAK+D,GACmB,QAAzGgrB,EAAkC,QAA5B9O,EAAKtP,EAAKqe,oBAAiC,IAAP/O,OAAgB,GAAUC,EAAKD,EAAGxrB,SAAS0b,sBAAmC,IAAP4e,GAAyBA,EAAG/uB,KAAKkgB,EACvJ,GACJ,GAAC,4BACD,WACIlqB,KAAK0d,QAAQoC,SAAQ,SAACnF,GAClBA,EAAKtS,UAAYsS,EAAK6U,gBAAe,EACzC,GACJ,GACA,gCAIA,WACQxvB,KAAKk2B,MAAQl2B,KAAKk2B,KAAKuC,WACvBz4B,KAAKk2B,KAAKuC,cAAWxzB,EAE7B,KAAC,EAxGU,GCFf,SAASg0B,GAAyBj3B,EAAO2Z,EAAWud,GAChD,IAAI/wB,EAAY,GAOVgxB,EAAan3B,EAAMhE,EAAEsG,UAAYqX,EAAU3d,EAC3Co7B,EAAap3B,EAAM/D,EAAEqG,UAAYqX,EAAU1d,EAWjD,IAVIk7B,GAAcC,KACdjxB,EAAY,eAAH,OAAkBgxB,EAAU,eAAOC,EAAU,YAMtC,IAAhBzd,EAAU3d,GAA2B,IAAhB2d,EAAU1d,IAC/BkK,GAAa,SAAJ,OAAa,EAAIwT,EAAU3d,EAAC,aAAK,EAAI2d,EAAU1d,EAAC,OAEzDi7B,EAAiB,CACjB,IAAQtyB,EAA6BsyB,EAA7BtyB,OAAQC,EAAqBqyB,EAArBryB,QAASC,EAAYoyB,EAAZpyB,QACrBF,IACAuB,GAAa,UAAJ,OAAcvB,EAAM,UAC7BC,IACAsB,GAAa,WAAJ,OAAetB,EAAO,UAC/BC,IACAqB,GAAa,WAAJ,OAAerB,EAAO,SACvC,CAKA,IAAMuyB,EAAgBr3B,EAAMhE,EAAEoG,MAAQuX,EAAU3d,EAC1Cs7B,EAAgBt3B,EAAM/D,EAAEmG,MAAQuX,EAAU1d,EAIhD,OAHsB,IAAlBo7B,GAAyC,IAAlBC,IACvBnxB,GAAa,SAAJ,OAAakxB,EAAa,aAAKC,EAAa,MAElDnxB,GAAa,MACxB,CCvCA,IAAMoxB,GAAiB,SAACl6B,EAAGC,GAAC,OAAKD,EAAE6b,MAAQ5b,EAAE4b,KAAK,ECG5Cse,GAAQ,WACV,cAAc,eACVx5B,KAAK2uB,SAAW,GAChB3uB,KAAKy5B,SAAU,CACnB,CAaC,OAbA,2BACD,SAAI1W,IACAgV,EAAAA,GAAAA,IAAc/3B,KAAK2uB,SAAU5L,GAC7B/iB,KAAKy5B,SAAU,CACnB,GAAC,oBACD,SAAO1W,IACHiV,EAAAA,GAAAA,IAAWh4B,KAAK2uB,SAAU5L,GAC1B/iB,KAAKy5B,SAAU,CACnB,GAAC,qBACD,SAAQ3zB,GACJ9F,KAAKy5B,SAAWz5B,KAAK2uB,SAAS9L,KAAK0W,IACnCv5B,KAAKy5B,SAAU,EACfz5B,KAAK2uB,SAAS7O,QAAQha,EAC1B,KAAC,EAjBS,G,YCmBR4zB,GAAgB,CAAC,GAAI,IAAK,IAAK,KAMjCrf,GAAK,EACT,SAASsf,GAAqB,GAA4F,IAA1FC,EAAoB,EAApBA,qBAAsBC,EAAa,EAAbA,cAAeC,EAAa,EAAbA,cAAeC,EAAiB,EAAjBA,kBAAmBC,EAAc,EAAdA,eACnG,kBACI,WAAYC,GAAsH,WAA3G7K,EAAe,UAAH,6CAAG,CAAC,EAAGxqB,EAAS,UAAH,6CAAqB,OAAlBi1B,QAA4C,IAAlBA,OAA2B,EAASA,KAAe,eAI5H75B,KAAKqa,GAAKA,KAIVra,KAAK6gB,YAAc,EAOnB7gB,KAAK2uB,SAAW,IAAIrkB,IAKpBtK,KAAKvB,QAAU,CAAC,EAMhBuB,KAAKk6B,iBAAkB,EACvBl6B,KAAK8T,oBAAqB,EAO1B9T,KAAK44B,eAAgB,EACrB54B,KAAKgxB,kBAAmB,EAKxBhxB,KAAKm6B,mBAAoB,EAIzBn6B,KAAKo6B,uBAAwB,EAC7Bp6B,KAAKq6B,uBAAwB,EAK7Br6B,KAAK24B,YAAa,EAIlB34B,KAAKs6B,OAAQ,EAKbt6B,KAAKu6B,YAAa,EAIlBv6B,KAAKw6B,sBAAuB,EAS5Bx6B,KAAK2b,UAAY,CAAE3d,EAAG,EAAGC,EAAG,GAI5B+B,KAAKy6B,cAAgB,IAAI3L,IAEzB9uB,KAAK06B,eAAiB,IAAI5L,IAC1B9uB,KAAK26B,kBAAoB,WACjB,EAAKhC,aACL,EAAKA,YAAa,EAClB,EAAKiC,oBAEb,EAMA56B,KAAK66B,iBAAmB,WACpB,EAAKC,MAAMhb,QAAQib,IACnB,EAAKD,MAAMhb,QAAQkb,IACnB,EAAKF,MAAMhb,QAAQmb,GACvB,EACAj7B,KAAKk7B,cAAe,EACpBl7B,KAAKm7B,WAAY,EACjBn7B,KAAKo7B,kBAAoB,EAKzBp7B,KAAKq7B,YAAc,IAAIvM,IACvB9uB,KAAKi6B,UAAYA,EACjBj6B,KAAKovB,aAAeA,EACpBpvB,KAAKqW,KAAOzR,EAASA,EAAOyR,MAAQzR,EAAS5E,KAC7CA,KAAKs7B,KAAO12B,EAAS,GAAH,gBAAOA,EAAO02B,MAAI,CAAE12B,IAAU,GAChD5E,KAAK4E,OAASA,EACd5E,KAAKkb,MAAQtW,EAASA,EAAOsW,MAAQ,EAAI,EACzC+e,GAAaj6B,KAAKqW,KAAKklB,sBAAsBtB,EAAWj6B,MACxD,IAAK,IAAIuC,EAAI,EAAGA,EAAIvC,KAAKs7B,KAAKj5B,OAAQE,IAClCvC,KAAKs7B,KAAK/4B,GAAGi4B,sBAAuB,EAEpCx6B,KAAKqW,OAASrW,OACdA,KAAK86B,MAAQ,IAAItB,GACzB,CAq+BC,OAr+BA,wCACD,SAAiB12B,EAAM3E,GAInB,OAHK6B,KAAKy6B,cAAc9vB,IAAI7H,IACxB9C,KAAKy6B,cAActuB,IAAIrJ,EAAM,IAAI0wB,GAAAA,GAE9BxzB,KAAKy6B,cAAcvoB,IAAIpP,GAAMia,IAAI5e,EAC5C,GAAC,6BACD,SAAgB2E,GAC6C,IAAzD,IAAM04B,EAAsBx7B,KAAKy6B,cAAcvoB,IAAIpP,GAAM,mBADpC2wB,EAAI,iCAAJA,EAAI,kBAED,OAAxB+H,QAAwD,IAAxBA,GAA0CA,EAAoBxY,OAAM,MAA1BwY,EAA8B/H,EAC5G,GAAC,0BACD,SAAa3wB,GACT,OAAO9C,KAAKy6B,cAAc9vB,IAAI7H,EAClC,GAAC,mCACD,SAAsBm3B,EAAWtf,GAC7B3a,KAAK06B,eAAevuB,IAAI8tB,EAAWtf,EACvC,GACA,mBAGA,SAAMtS,GAAiC,IAC/B0F,EAD+B,OAAvB6qB,EAAgB,UAAH,8CAEzB,IAAI54B,KAAKqI,SAAT,CAEArI,KAAKs6B,MACDjyB,aAAoBozB,YAAmC,QAArBpzB,EAASktB,QAC/Cv1B,KAAKqI,SAAWA,EAChB,MAA4CrI,KAAKvB,QAAzCke,EAAQ,EAARA,SAAU7X,EAAM,EAANA,OAAQ2N,EAAa,EAAbA,cAU1B,GATIA,IAAkBA,EAAcxT,SAChCwT,EAAcsd,MAAM1nB,GAExBrI,KAAKqW,KAAKykB,MAAM/d,IAAI/c,MACG,QAAtB+N,EAAK/N,KAAK4E,cAA2B,IAAPmJ,GAAyBA,EAAG4gB,SAAS5R,IAAI/c,MACxEA,KAAKi6B,WAAaj6B,KAAKqW,KAAKqkB,eAAezZ,OAAOjhB,KAAKi6B,WACnDrB,IAAkB9zB,GAAU6X,KAC5B3c,KAAK44B,eAAgB,GAErBgB,EAAsB,CACtB,IAAI8B,EACEC,EAAsB,WAAH,OAAU,EAAKtlB,KAAKgkB,uBAAwB,CAAK,EAC1ET,EAAqBvxB,GAAU,WAC3B,EAAKgO,KAAKgkB,uBAAwB,EAClCqB,GAAeA,IACfA,EAAc/vB,GAAMgwB,EAAqB,KACrCxe,GAAAA,EAAAA,yBACAA,GAAAA,EAAAA,wBAA+C,EAC/C,EAAK2d,MAAMhb,QAAQ8b,IAE3B,GACJ,CACIjf,GACA3c,KAAKqW,KAAKwlB,mBAAmBlf,EAAU3c,OAGd,IAAzBA,KAAKvB,QAAQ2M,SACbqH,IACCkK,GAAY7X,IACb9E,KAAKrB,iBAAiB,aAAa,YAA+E,IAC1GoP,EAAIgG,EAAIkW,EAAIC,EAAI6O,EADc/2B,EAAK,EAALA,MAAO0W,EAAgB,EAAhBA,iBAAkBojB,EAAwB,EAAxBA,yBAAkCC,EAAS,EAAjBj3B,OAErF,GAAI,EAAKk3B,yBAGL,OAFA,EAAKz9B,YAAS0G,OACd,EAAKg3B,oBAAiBh3B,GAI1B,IAAMi3B,EAAmI,QAA/GnoB,EAAwC,QAAlChG,EAAK,EAAKtP,QAAQ+S,kBAA+B,IAAPzD,EAAgBA,EAAK0E,EAAcxD,8BAA2C,IAAP8E,EAAgBA,EAAKooB,GACtK,EAA+D1pB,EAAcE,WAArEypB,EAAsB,EAAtBA,uBAAwBC,EAAyB,EAAzBA,0BAK1BC,GAAiB,EAAKC,eACvB3E,GAAU,EAAK2E,aAAcR,IAC9BD,EAMEU,GAAgC9jB,GAAoBojB,EAC1D,IAAgC,QAA1B7R,EAAK,EAAKsO,kBAA+B,IAAPtO,OAAgB,EAASA,EAAG5hB,WAChEm0B,GACC9jB,IACI4jB,IAAkB,EAAKpvB,kBAAoB,CAC5C,EAAKqrB,aACL,EAAKS,aAAe,EAAKT,WACzB,EAAKS,aAAaA,kBAAe/zB,GAErC,EAAKw3B,mBAAmBz6B,EAAOw6B,GAC/B,IAAME,GAAmB,kBAClB3qB,GAAmBmqB,EAAkB,WAAS,IACjDS,OAAQP,EACR1xB,WAAY2xB,IAEZ5pB,EAAciQ,qBACdga,EAAiB/wB,MAAQ,EACzB+wB,EAAiBl7B,MAAO,GAE5B,EAAKsM,eAAe4uB,EACxB,MAOShkB,GAC0B,IAA3B,EAAK0iB,mBACLQ,GAAgB,GAEpB,EAAKje,WAA2D,QAA7Cob,GAAM7O,EAAK,EAAKzrB,SAAS0b,sBAAmC,IAAP4e,GAAyBA,EAAG/uB,KAAKkgB,IAE7G,EAAKqS,aAAeR,CACxB,GA1FM,CA4Fd,GAAC,qBACD,WACI,IAAIhuB,EAAIgG,EACR/T,KAAKvB,QAAQke,UAAY3c,KAAKsd,aAC9Btd,KAAKqW,KAAKykB,MAAMhd,OAAO9d,MACI,QAA1B+N,EAAK/N,KAAKyd,kBAA+B,IAAP1P,GAAyBA,EAAG+P,OAAO9d,MAC/C,QAAtB+T,EAAK/T,KAAK4E,cAA2B,IAAPmP,GAAyBA,EAAG4a,SAAS1N,OAAOjhB,MAC3EA,KAAKqI,cAAWpD,EAChBnD,EAAAA,GAAAA,UAAqB9B,KAAK66B,iBAC9B,GACA,yBACA,WACI76B,KAAKo6B,uBAAwB,CACjC,GAAC,2BACD,WACIp6B,KAAKo6B,uBAAwB,CACjC,GAAC,6BACD,WACI,OAAOp6B,KAAKo6B,uBAAyBp6B,KAAKq6B,qBAC9C,GAAC,oCACD,WACI,IAAItsB,EACJ,OAAQ/N,KAAK8T,qBACe,QAAtB/F,EAAK/N,KAAK4E,cAA2B,IAAPmJ,OAAgB,EAASA,EAAGiuB,4BAC5D,CACR,GACA,yBACA,WACI,IAAIjuB,EACA/N,KAAK48B,oBAET58B,KAAK24B,YAAa,EACI,QAArB5qB,EAAK/N,KAAK86B,aAA0B,IAAP/sB,GAAyBA,EAAG+R,QAAQ+c,IAClE78B,KAAK6gB,cACT,GAAC,wBACD,WAAyC,IACjC9S,EAAIgG,EAAIkW,EADL6S,IAAwB,UAAH,+CAE5B,GAAI98B,KAAKqW,KAAKumB,kBACoC,QAA7C7oB,GAAMhG,EAAK/N,KAAKvB,SAAS0b,sBAAmC,IAAPpG,GAAyBA,EAAG/J,KAAK+D,QAI3F,IADC/N,KAAKqW,KAAKsiB,YAAc34B,KAAKqW,KAAK0mB,eAC/B/8B,KAAK44B,cAAT,CAEA54B,KAAK44B,eAAgB,EACrB,IAAK,IAAIr2B,EAAI,EAAGA,EAAIvC,KAAKs7B,KAAKj5B,OAAQE,IAAK,CACvC,IAAMoY,EAAO3a,KAAKs7B,KAAK/4B,GACvBoY,EAAK6f,sBAAuB,EAC5B7f,EAAK1C,aAAa,WACtB,CACA,MAA6BjY,KAAKvB,QAA1Bke,EAAQ,EAARA,SAAU7X,EAAM,EAANA,OAClB,QAAiBG,IAAb0X,GAA2B7X,EAA/B,CAEA,IAAMiT,EAA0D,QAArCkS,EAAKjqB,KAAKvB,QAAQgU,qBAAkC,IAAPwX,OAAgB,EAASA,EAAGtX,WAAWoF,kBAC/G/X,KAAKg9B,2BAAmD,OAAtBjlB,QAAoD,IAAtBA,OAA+B,EAASA,EAAkB/X,KAAKovB,aAAc,IAC7IpvB,KAAKi9B,iBACLH,GAAyB98B,KAAKk9B,gBAAgB,aAJpC,CATA,CAcd,GACA,uBACA,WAKI,GAJyBl9B,KAAK48B,kBAQ1B,OAHA58B,KAAKm9B,gBACLn9B,KAAK46B,yBACL56B,KAAK86B,MAAMhb,QAAQsd,IAGlBp9B,KAAK24B,aAEV34B,KAAK24B,YAAa,EAOd34B,KAAK06B,eAAe7Y,OACpB7hB,KAAK06B,eAAe5a,QAAQud,IAC5Br9B,KAAK06B,eAAe/J,SAKxB3wB,KAAK86B,MAAMhb,QAAQwd,IAKnBt9B,KAAK86B,MAAMhb,QAAQ5H,IAKnBlY,KAAK86B,MAAMhb,QAAQyd,IACnBv9B,KAAK46B,oBAEL4C,EAAAA,GAAAA,SACAA,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,SACJ,GAAC,+BACD,WACIx9B,KAAK86B,MAAMhb,QAAQ2d,IACnBz9B,KAAKq7B,YAAYvb,QAAQ4d,GAC7B,GAAC,sCACD,WACIx8B,EAAAA,GAAAA,UAAelB,KAAK66B,kBAAkB,GAAO,EACjD,GAAC,uCACD,WAA4B,WAMxB35B,EAAAA,GAAAA,YAAgB,WACR,EAAK03B,cACL,EAAKviB,KAAK2G,YAGV,EAAK3G,KAAKskB,mBAElB,GACJ,GACA,4BAGA,YACQ36B,KAAKy4B,UAAaz4B,KAAKqI,WAE3BrI,KAAKy4B,SAAWz4B,KAAK29B,UACzB,GAAC,0BACD,WACI,IAAI5vB,EACJ,GAAK/N,KAAKqI,WAGVrI,KAAKiY,eACCjY,KAAKvB,QAAQszB,qBAAuB/xB,KAAK2d,UAC1C3d,KAAK44B,eADV,CAWA,GAAI54B,KAAKu4B,aAAev4B,KAAKu4B,WAAWlwB,SACpC,IAAK,IAAI9F,EAAI,EAAGA,EAAIvC,KAAKs7B,KAAKj5B,OAAQE,IAAK,CAC1BvC,KAAKs7B,KAAK/4B,GAClB0V,cACT,CAEJ,IAAM2lB,EAAa59B,KAAK8E,OACxB9E,KAAK8E,OAAS9E,KAAK29B,SAAQ,GAC3B39B,KAAK69B,gBtDxZQ,CACrB7/B,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsD0Z7B1D,KAAK44B,eAAgB,EACrB54B,KAAK4b,qBAAkB3W,EACvBjF,KAAKk9B,gBAAgB,UAAWl9B,KAAK8E,OAAOqP,WACN,QAArCpG,EAAK/N,KAAKvB,QAAQgU,qBAAkC,IAAP1E,GAAyBA,EAAGiV,OAAO,gBAAiBhjB,KAAK8E,OAAOqP,UAA0B,OAAfypB,QAAsC,IAAfA,OAAwB,EAASA,EAAWzpB,UApB5L,CAqBJ,GAAC,0BACD,WAAgC,IAAnB2pB,EAAQ,UAAH,6CAAG,UACbC,EAAmBtd,QAAQzgB,KAAKvB,QAAQqzB,cAAgB9xB,KAAKqI,UAC7DrI,KAAKmW,QACLnW,KAAKmW,OAAO0K,cAAgB7gB,KAAKqW,KAAKwK,aACtC7gB,KAAKmW,OAAO2nB,QAAUA,IACtBC,GAAmB,GAEnBA,IACA/9B,KAAKmW,OAAS,CACV0K,YAAa7gB,KAAKqW,KAAKwK,YACvBid,MAAAA,EACAE,OAAQjE,EAAkB/5B,KAAKqI,UAC/B3H,OAAQo5B,EAAc95B,KAAKqI,WAGvC,GAAC,4BACD,WACI,IAAI0F,EACJ,GAAKisB,EAAL,CAEA,IAAMiE,EAAmBj+B,KAAK44B,eAAiB54B,KAAKw6B,qBAC9C0D,EAAgBl+B,KAAK4b,kBAAoB+b,GAAY33B,KAAK4b,iBAC1D7D,EAA0D,QAArChK,EAAK/N,KAAKvB,QAAQgU,qBAAkC,IAAP1E,OAAgB,EAASA,EAAG4E,WAAWoF,kBACzGomB,EAA+C,OAAtBpmB,QAAoD,IAAtBA,OAA+B,EAASA,EAAkB/X,KAAKovB,aAAc,IACpIgP,EAA8BD,IAA2Bn+B,KAAKg9B,2BAChEiB,IACCC,GACG13B,GAAaxG,KAAKovB,eAClBgP,KACJpE,EAAeh6B,KAAKqI,SAAU81B,GAC9Bn+B,KAAKw6B,sBAAuB,EAC5Bx6B,KAAKwvB,iBAZC,CAcd,GAAC,qBACD,WAAgC,IAAxB6O,IAAkB,UAAH,+CACbC,EAAUt+B,KAAKoW,iBACjBjC,EAAYnU,KAAKu+B,oBAAoBD,GAUzC,OAJID,IACAlqB,EAAYnU,KAAKq+B,gBAAgBlqB,IAErCqqB,GAASrqB,GACF,CACH0M,YAAa7gB,KAAKqW,KAAKwK,YACvB4d,YAAaH,EACbnqB,UAAAA,EACAib,aAAc,CAAC,EACfprB,OAAQhE,KAAKqa,GAErB,GAAC,4BACD,WACI,IAAQ5H,EAAkBzS,KAAKvB,QAAvBgU,cACR,IAAKA,EACD,MtDvdS,CACrBzU,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsDyd7B,IAAM2D,EAAMoL,EAAcrK,qBAElB+N,EAAWnW,KAAKqW,KAAhBF,OAKR,OAJIA,IACA1O,GAAcJ,EAAIrJ,EAAGmY,EAAOzV,OAAO1C,GACnCyJ,GAAcJ,EAAIpJ,EAAGkY,EAAOzV,OAAOzC,IAEhCoJ,CACX,GAAC,iCACD,SAAoBA,GAChB,IAAMq3B,EtDleO,CACrB1gC,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsDoe7BwzB,GAAYwH,EAAkBr3B,GAK9B,IAAK,IAAI9E,EAAI,EAAGA,EAAIvC,KAAKs7B,KAAKj5B,OAAQE,IAAK,CACvC,IAAMoY,EAAO3a,KAAKs7B,KAAK/4B,GACf4T,EAAoBwE,EAApBxE,OAAQ1X,EAAYkc,EAAZlc,QAChB,GAAIkc,IAAS3a,KAAKqW,MAAQF,GAAU1X,EAAQqzB,aAAc,CAKtD,GAAI3b,EAAO6nB,OAAQ,CACf9G,GAAYwH,EAAkBr3B,GAC9B,IAAgBs3B,EAAe3+B,KAAKqW,KAA5BF,OAKJwoB,IACAl3B,GAAci3B,EAAiB1gC,GAAI2gC,EAAWj+B,OAAO1C,GACrDyJ,GAAci3B,EAAiBzgC,GAAI0gC,EAAWj+B,OAAOzC,GAE7D,CACAwJ,GAAci3B,EAAiB1gC,EAAGmY,EAAOzV,OAAO1C,GAChDyJ,GAAci3B,EAAiBzgC,EAAGkY,EAAOzV,OAAOzC,EACpD,CACJ,CACA,OAAOygC,CACX,GAAC,4BACD,SAAer3B,GAA4B,IAAvBu3B,EAAgB,UAAH,8CACvBC,EtDngBO,CACrB7gC,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsDqgB7BwzB,GAAY2H,EAAgBx3B,GAC5B,IAAK,IAAI9E,EAAI,EAAGA,EAAIvC,KAAKs7B,KAAKj5B,OAAQE,IAAK,CACvC,IAAMoY,EAAO3a,KAAKs7B,KAAK/4B,IAClBq8B,GACDjkB,EAAKlc,QAAQqzB,cACbnX,EAAKxE,QACLwE,IAASA,EAAKtE,MACdnO,GAAa22B,EAAgB,CACzB7gC,GAAI2c,EAAKxE,OAAOzV,OAAO1C,EACvBC,GAAI0c,EAAKxE,OAAOzV,OAAOzC,IAG1BuI,GAAamU,EAAKyU,eAEvBlnB,GAAa22B,EAAgBlkB,EAAKyU,aACtC,CAIA,OAHI5oB,GAAaxG,KAAKovB,eAClBlnB,GAAa22B,EAAgB7+B,KAAKovB,cAE/ByP,CACX,GAAC,6BACD,SAAgBx3B,GACZ,IAAI0G,EACE+wB,EtD3hBO,CACrB9gC,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsD6hB7BwzB,GAAY4H,EAAqBz3B,GACjC,IAAK,IAAI9E,EAAI,EAAGA,EAAIvC,KAAKs7B,KAAKj5B,OAAQE,IAAK,CACvC,IAAMoY,EAAO3a,KAAKs7B,KAAK/4B,GACvB,GAAKoY,EAAKtS,UAEL7B,GAAamU,EAAKyU,cAAvB,CAEA/oB,GAASsU,EAAKyU,eAAiBzU,EAAKsiB,iBACpC,IAAMxF,EtDpiBG,CACrBz5B,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsDuiBzBwzB,GAAYO,EADI9c,EAAKvE,kBAErBohB,GAAoBsH,EAAqBnkB,EAAKyU,aAAuC,QAAxBrhB,EAAK4M,EAAK8d,gBAA6B,IAAP1qB,OAAgB,EAASA,EAAGoG,UAAWsjB,EALxH,CAMhB,CAIA,OAHIjxB,GAAaxG,KAAKovB,eAClBoI,GAAoBsH,EAAqB9+B,KAAKovB,cAE3C0P,CACX,GACA,4BAGA,SAAe98B,GACXhC,KAAK++B,YAAc/8B,EACnBhC,KAAKm6B,mBAAoB,EACzBn6B,KAAKqW,KAAK2oB,0BACd,GAAC,wBACD,SAAWvgC,GACPuB,KAAKvB,SAAU,0BACRuB,KAAKvB,SACLA,GAAO,IACVo6B,eAAiC5zB,IAAtBxG,EAAQo6B,WAA0Bp6B,EAAQo6B,WAE7D,GAAC,+BACD,WACI74B,KAAKmW,YAASlR,EACdjF,KAAK8E,YAASG,EACdjF,KAAKy4B,cAAWxzB,EAChBjF,KAAKg9B,gCAA6B/3B,EAClCjF,KAAK++B,iBAAc95B,EACnBjF,KAAKzB,YAAS0G,EACdjF,KAAK44B,eAAgB,CACzB,GACA,gCAGA,WACI,IAAI7qB,EAMEmoB,EAAOl2B,KAAKi/B,UAOlB,GANAj/B,KAAKm6B,oBAAsBn6B,KAAKm6B,kBAAoBjE,EAAKiE,mBACzDn6B,KAAKgxB,mBAAqBhxB,KAAKgxB,iBAAmBkF,EAAKlF,kBAKlDhxB,KAAKm6B,mBAAsBn6B,KAAKk/B,+BAArC,CAEA,MAA6Bl/B,KAAKvB,QAA1BqG,EAAM,EAANA,OAAQ6X,EAAQ,EAARA,SAIhB,GAAK3c,KAAK8E,SAAYA,GAAU6X,GAAhC,CAQA,IAAK3c,KAAK++B,cAAgB/+B,KAAKi8B,eAAgB,CAE3C,IAAMkD,EAAiBn/B,KAAKo/B,6BACxBD,GAAkBA,EAAer6B,QACjC9E,KAAKm/B,eAAiBA,EACtBn/B,KAAKi8B,etD1mBA,CACrBj+B,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsD4mBrB1D,KAAKq/B,qBtD3mBA,CACrBrhC,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsD6mBrBqB,EAAqB/E,KAAKq/B,qBAAsBr/B,KAAK8E,OAAOqP,UAAWgrB,EAAer6B,OAAOqP,WAC7F+iB,GAAYl3B,KAAKi8B,eAAgBj8B,KAAKq/B,uBAGtCr/B,KAAKm/B,eAAiBn/B,KAAKi8B,oBAAiBh3B,CAEpD,ChFlmBZ,IAAyB1G,EAAQoG,EAAUC,EgFumB/B,GAAK5E,KAAKi8B,gBAAmBj8B,KAAK++B,YAuClC,GAlCK/+B,KAAKzB,SACNyB,KAAKzB,OtD7nBI,CACrBP,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsD+nBzB1D,KAAKs/B,qBtD9nBI,CACrBthC,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,KsDooBzB1D,KAAKi8B,gBACLj8B,KAAKq/B,uBAC2B,QAA9BtxB,EAAK/N,KAAKm/B,sBAAmC,IAAPpxB,OAAgB,EAASA,EAAGxP,ShFrnB3DA,EgFsnBOyB,KAAKzB,OhFtnBJoG,EgFsnBY3E,KAAKi8B,ehFtnBPr3B,EgFsnBuB5E,KAAKm/B,eAAe5gC,OhFrnBlFmG,EAAiBnG,EAAOP,EAAG2G,EAAS3G,EAAG4G,EAAO5G,GAC9C0G,EAAiBnG,EAAON,EAAG0G,EAAS1G,EAAG2G,EAAO3G,IgFynB7B+B,KAAK++B,aACNte,QAAQzgB,KAAKg5B,cAEbh5B,KAAKzB,OAASyB,KAAKu/B,eAAev/B,KAAK8E,OAAOqP,WAG9C+iB,GAAYl3B,KAAKzB,OAAQyB,KAAK8E,OAAOqP,WAEzC/M,GAAcpH,KAAKzB,OAAQyB,KAAK++B,cAMhC7H,GAAYl3B,KAAKzB,OAAQyB,KAAK8E,OAAOqP,WAKrCnU,KAAKk/B,+BAAgC,CACrCl/B,KAAKk/B,gCAAiC,EACtC,IAAMC,EAAiBn/B,KAAKo/B,6BACxBD,GACA1e,QAAQ0e,EAAenG,gBACnBvY,QAAQzgB,KAAKg5B,gBAChBmG,EAAe1gC,QAAQqzB,cACxBqN,EAAe5gC,QACfyB,KAAKm/B,eAAiBA,EACtBn/B,KAAKi8B,etDvqBA,CACrBj+B,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsDyqBrB1D,KAAKq/B,qBtDxqBA,CACrBrhC,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsD0qBrBqB,EAAqB/E,KAAKq/B,qBAAsBr/B,KAAKzB,OAAQ4gC,EAAe5gC,QAC5E24B,GAAYl3B,KAAKi8B,eAAgBj8B,KAAKq/B,uBAGtCr/B,KAAKm/B,eAAiBn/B,KAAKi8B,oBAAiBh3B,CAEpD,CAjFU,CANA,CAwFd,GAAC,wCACD,WACI,GAAKjF,KAAK4E,SACNyB,GAASrG,KAAK4E,OAAOwqB,gBACrB1oB,GAAe1G,KAAK4E,OAAOwqB,cAE/B,OAAKpvB,KAAK4E,OAAOq3B,gBAAkBj8B,KAAK4E,OAAOm6B,cAC3C/+B,KAAK4E,OAAOE,OACL9E,KAAK4E,OAGL5E,KAAK4E,OAAOw6B,4BAE3B,GAAC,4BACD,WACI,IAAIrxB,EACIosB,EAAwCn6B,KAAxCm6B,kBAAmBnJ,EAAqBhxB,KAArBgxB,iBAC3BhxB,KAAKm6B,kBAAoBn6B,KAAKgxB,kBAAmB,EACjD,IAAMkF,EAAOl2B,KAAKi/B,UACZO,EAAW/e,QAAQzgB,KAAKg5B,eAAiBh5B,OAASk2B,EACpDuJ,GAAU,EAKd,GAJItF,IACAsF,GAAU,GACVD,GAAYxO,IACZyO,GAAU,IACVA,EAAJ,CAEA,MAA6Bz/B,KAAKvB,QAA1BqG,EAAM,EAANA,OAAQ6X,EAAQ,EAARA,SAWhB,GANA3c,KAAKk6B,gBAAkBzZ,SAAgC,QAAtB1S,EAAK/N,KAAK4E,cAA2B,IAAPmJ,OAAgB,EAASA,EAAGmsB,kBACvFl6B,KAAKkN,kBACLlN,KAAK0/B,kBACJ1/B,KAAKk6B,kBACNl6B,KAAK++B,YAAc/+B,KAAKi8B,oBAAiBh3B,GAExCjF,KAAK8E,SAAYA,GAAU6X,GAAhC,CAMAua,GAAYl3B,KAAK69B,gBAAiB79B,KAAK8E,OAAOqP,W1E/rB1D,SAAyB9M,EAAKsU,EAAWgkB,GAAsC,IACvE5xB,EAAIgG,EADuC6rB,EAAqB,UAAH,8CAE3DC,EAAaF,EAASt9B,OAC5B,GAAKw9B,EAAL,CAIA,IAAIllB,EACA3Y,EAFJ2Z,EAAU3d,EAAI2d,EAAU1d,EAAI,EAG5B,IAAK,IAAIsE,EAAI,EAAGA,EAAIs9B,EAAYt9B,IAE5BP,GADA2Y,EAAOglB,EAASp9B,IACHqZ,gBACuH,cAAjD,QAA7E7H,EAA8B,QAAxBhG,EAAK4M,EAAKtS,gBAA6B,IAAP0F,OAAgB,EAASA,EAAGiK,aAA0B,IAAPjE,OAAgB,EAASA,EAAG4Y,WAEnHiT,GACAjlB,EAAKlc,QAAQqzB,cACbnX,EAAKxE,QACLwE,IAASA,EAAKtE,MACdnO,GAAab,EAAK,CACdrJ,GAAI2c,EAAKxE,OAAOzV,OAAO1C,EACvBC,GAAI0c,EAAKxE,OAAOzV,OAAOzC,IAG3B+D,IAEA2Z,EAAU3d,GAAKgE,EAAMhE,EAAEoG,MACvBuX,EAAU1d,GAAK+D,EAAM/D,EAAEmG,MAEvBgD,GAAcC,EAAKrF,IAEnB49B,GAAsBp5B,GAAamU,EAAKyU,eACxClnB,GAAab,EAAKsT,EAAKyU,eAO/BzT,EAAU3d,EAAIsJ,GAAcqU,EAAU3d,GACtC2d,EAAU1d,EAAIqJ,GAAcqU,EAAU1d,EAnC5B,CAoCd,C0E4pBY6hC,CAAgB9/B,KAAK69B,gBAAiB79B,KAAK2b,UAAW3b,KAAKs7B,KAAMkE,GACjE,IAAQjhC,EAAW23B,EAAX33B,OACR,GAAKA,EAAL,CAEKyB,KAAK4b,kBACN5b,KAAK4b,gBtD3uBM,CACvB5d,EAP2B,CAC3BsG,UAAW,EACXF,MAAO,EACPH,OAAQ,EACRC,YAAa,GAIbjG,EAR2B,CAC3BqG,UAAW,EACXF,MAAO,EACPH,OAAQ,EACRC,YAAa,IsD8uBDlE,KAAK+/B,6BtD5uBM,CACvB/hC,EAP2B,CAC3BsG,UAAW,EACXF,MAAO,EACPH,OAAQ,EACRC,YAAa,GAIbjG,EAR2B,CAC3BqG,UAAW,EACXF,MAAO,EACPH,OAAQ,EACRC,YAAa,KsDgvBL,IAAM87B,EAAiBhgC,KAAK2b,UAAU3d,EAChCiiC,EAAiBjgC,KAAK2b,UAAU1d,EAChCiiC,EAA0BlgC,KAAKmgC,oBAUrC57B,EAAavE,KAAK4b,gBAAiB5b,KAAK69B,gBAAiBt/B,EAAQyB,KAAKovB,cACtEpvB,KAAKmgC,oBAAsBlH,GAAyBj5B,KAAK4b,gBAAiB5b,KAAK2b,WAC3E3b,KAAKmgC,sBAAwBD,GAC7BlgC,KAAK2b,UAAU3d,IAAMgiC,GACrBhgC,KAAK2b,UAAU1d,IAAMgiC,IACrBjgC,KAAKk7B,cAAe,EACpBl7B,KAAKwvB,iBACLxvB,KAAKk9B,gBAAgB,mBAAoB3+B,GAxBnC,CAbA,CAbA,CAoDd,GAAC,kBACD,WACIyB,KAAKm7B,WAAY,CAErB,GAAC,kBACD,WACIn7B,KAAKm7B,WAAY,CAErB,GAAC,4BACD,WAAiC,IACzBptB,EAAIgG,EAAIkW,EADDmW,IAAY,UAAH,+CAE0B,QAA7CrsB,GAAMhG,EAAK/N,KAAKvB,SAAS+wB,sBAAmC,IAAPzb,GAAyBA,EAAG/J,KAAK+D,GACvFqyB,IAAyC,QAA1BnW,EAAKjqB,KAAKyd,kBAA+B,IAAPwM,GAAyBA,EAAGuF,kBACzExvB,KAAKg5B,eAAiBh5B,KAAKg5B,aAAa3wB,WACxCrI,KAAKg5B,kBAAe/zB,EAE5B,GAAC,gCACD,SAAmBjD,GAA6C,IACxD+L,EAAIgG,EADoD,OAAtCyoB,EAA+B,UAAH,8CAE5C/D,EAAWz4B,KAAKy4B,SAChB4H,GAAqC,OAAb5H,QAAkC,IAAbA,OAAsB,EAASA,EAASrJ,eAAiB,CAAC,EACvGkR,GAAc,UAAKtgC,KAAKovB,cACxB2P,EtDzxBS,CACvB/gC,EAP2B,CAC3BsG,UAAW,EACXF,MAAO,EACPH,OAAQ,EACRC,YAAa,GAIbjG,EAR2B,CAC3BqG,UAAW,EACXF,MAAO,EACPH,OAAQ,EACRC,YAAa,IsD4xBLlE,KAAKi8B,eAAiBj8B,KAAKq/B,0BAAuBp6B,EAClDjF,KAAKk/B,gCAAkC1C,EACvC,IAAM+D,EtDvxBO,CACrBviC,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsDyxBvB88B,GAAwC,OAAb/H,QAAkC,IAAbA,OAAsB,EAASA,EAASz0B,WAAoC,QAAtB+J,EAAK/N,KAAK8E,cAA2B,IAAPiJ,OAAgB,EAASA,EAAG/J,QAChKoyB,IAA4C,QAA1BriB,EAAK/T,KAAKyd,kBAA+B,IAAP1J,OAAgB,EAASA,EAAG2J,QAAQrb,SAAW,IAAM,EACzG8zB,EAAyB1V,QAAQ+f,IAClCpK,IAC0B,IAA3Bp2B,KAAKvB,QAAQo6B,YACZ74B,KAAKs7B,KAAKrT,KAAKwY,KACpBzgC,KAAKo7B,kBAAoB,EACzBp7B,KAAK0gC,eAAiB,SAACjpB,GACnB,IAAI1J,EACE6J,EAAWH,EAAS,IAC1BkpB,GAAa5B,EAAY/gC,EAAGgE,EAAMhE,EAAG4Z,GACrC+oB,GAAa5B,EAAY9gC,EAAG+D,EAAM/D,EAAG2Z,GACrC,EAAKgpB,eAAe7B,GAChB,EAAK9C,gBACL,EAAKoD,sBACL,EAAKv6B,SAC2B,QAA9BiJ,EAAK,EAAKoxB,sBAAmC,IAAPpxB,OAAgB,EAASA,EAAGjJ,UACpEC,EAAqBw7B,EAAgB,EAAKz7B,OAAOqP,UAAW,EAAKgrB,eAAer6B,OAAOqP,WACvF0sB,GAAO,EAAK5E,eAAgB,EAAKoD,qBAAsBkB,EAAgB3oB,IAEvE4oB,IACA,EAAK9H,gBAAkB4H,EACvBtK,GAAUsK,EAAaD,EAAsB,EAAKjR,aAAcxX,EAAUue,EAAwBC,IAEtG,EAAK/f,KAAK2oB,2BACV,EAAKxP,iBACL,EAAK4L,kBAAoBxjB,CAC7B,EACA5X,KAAK0gC,eAAe,EACxB,GAAC,4BACD,SAAejiC,GAAS,IAChBsP,EAAIgG,EADY,OAEpB/T,KAAKk9B,gBAAgB,kBACY,QAAhCnvB,EAAK/N,KAAKkN,wBAAqC,IAAPa,GAAyBA,EAAGzB,OACjEtM,KAAKg5B,eACyC,QAA7CjlB,EAAK/T,KAAKg5B,aAAa9rB,wBAAqC,IAAP6G,GAAyBA,EAAGzH,QAElFtM,KAAK0/B,mBACL59B,EAAAA,GAAAA,OAAkB9B,KAAK0/B,kBACvB1/B,KAAK0/B,sBAAmBz6B,GAO5BjF,KAAK0/B,iBAAmBx+B,EAAAA,GAAAA,QAAY,WAChCic,GAAAA,EAAAA,wBAA+C,EAC/C,EAAKjQ,iBCpzBrB,SAAiBqE,EAAMgc,GAAqB,IAAjB/b,EAAa,UAAH,6CAAG,CAAC,EAC/B3N,GAAQ6c,EAAAA,GAAAA,GAAcnP,GAAQA,GAAOoH,EAAAA,GAAAA,GAAYpH,GAEvD,OADA1N,EAAM8I,MAAMwF,GAA2B,GAAItO,EAAO0pB,EAAI/b,IAC/C,CACHlF,KAAM,kBAAMzI,EAAMyI,MAAM,EACxBw0B,YAAa,kBAAMj9B,EAAMi9B,aAAa,EAE9C,CD6yBwC11B,CAAQ,EAxzBxB,KAwzB4C,kBAC7C3M,GAAO,IACVgM,SAAU,SAACgN,GACP,IAAI1J,EACJ,EAAK2yB,eAAejpB,GACQ,QAA3B1J,EAAKtP,EAAQgM,gBAA6B,IAAPsD,GAAyBA,EAAG/D,KAAKvL,EAASgZ,EAClF,EACA/M,WAAY,WACR,IAAIqD,EAC0B,QAA7BA,EAAKtP,EAAQiM,kBAA+B,IAAPqD,GAAyBA,EAAG/D,KAAKvL,GACvE,EAAKsiC,mBACT,KAEA,EAAK/H,eACL,EAAKA,aAAa9rB,iBAAmB,EAAKA,kBAE9C,EAAKwyB,sBAAmBz6B,CAC5B,GACJ,GAAC,+BACD,WACI,IAAI8I,EACA/N,KAAKg5B,eACLh5B,KAAKg5B,aAAa9rB,sBAAmBjI,EACrCjF,KAAKg5B,aAAaR,qBAAkBvzB,GAEb,QAA1B8I,EAAK/N,KAAKyd,kBAA+B,IAAP1P,GAAyBA,EAAGizB,wBAC/DhhC,KAAKg5B,aACDh5B,KAAKkN,iBACDlN,KAAK04B,qBACDzzB,EACZjF,KAAKk9B,gBAAgB,oBACzB,GAAC,6BACD,WACI,IAAInvB,EACA/N,KAAKkN,mBAC0B,QAA9Ba,EAAK/N,KAAK0gC,sBAAmC,IAAP3yB,GAAyBA,EAAG/D,KAAKhK,KA31BhE,KA41BRA,KAAKkN,iBAAiBZ,QAE1BtM,KAAK+gC,mBACT,GAAC,qCACD,WACI,IAAM7K,EAAOl2B,KAAKi/B,UACZK,EAAuDpJ,EAAvDoJ,qBAAsB/gC,EAAiC23B,EAAjC33B,OAAQuG,EAAyBoxB,EAAzBpxB,OAAQsqB,EAAiB8G,EAAjB9G,aAC5C,GAAKkQ,GAAyB/gC,GAAWuG,EAAzC,CAOA,GAAI9E,OAASk2B,GACTl2B,KAAK8E,QACLA,GACAm8B,GAA0BjhC,KAAKvB,QAAQuzB,cAAehyB,KAAK8E,OAAOqP,UAAWrP,EAAOqP,WAAY,CAChG5V,EAASyB,KAAKzB,QtD93BL,CACrBP,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsDg4BzB,IAAMw9B,EAAU19B,EAAWxD,KAAK8E,OAAOqP,UAAUnW,GACjDO,EAAOP,EAAE2F,IAAMuyB,EAAK33B,OAAOP,EAAE2F,IAC7BpF,EAAOP,EAAE0F,IAAMnF,EAAOP,EAAE2F,IAAMu9B,EAC9B,IAAMC,EAAU39B,EAAWxD,KAAK8E,OAAOqP,UAAUlW,GACjDM,EAAON,EAAE0F,IAAMuyB,EAAK33B,OAAON,EAAE0F,IAC7BpF,EAAON,EAAEyF,IAAMnF,EAAON,EAAE0F,IAAMw9B,CAClC,CACAjK,GAAYoI,EAAsB/gC,GAMlC2J,GAAao3B,EAAsBlQ,GAOnC7qB,EAAavE,KAAK+/B,6BAA8B//B,KAAK69B,gBAAiByB,EAAsBlQ,EA/BlF,CAgCd,GAAC,gCACD,SAAmBzS,EAAUhC,GACzB,IAAI5M,EAAIgG,EAAIkW,EACPjqB,KAAKq7B,YAAY1wB,IAAIgS,IACtB3c,KAAKq7B,YAAYlvB,IAAIwQ,EAAU,IAAImb,IAEzB93B,KAAKq7B,YAAYnpB,IAAIyK,GAC7BI,IAAIpC,GACVA,EAAK4C,QAAQ,CACT/L,WAA2D,QAA9CzD,EAAK4M,EAAKlc,QAAQwzB,8BAA2C,IAAPlkB,OAAgB,EAASA,EAAGyD,WAC/F6mB,sBAAiJ,QAAzHpO,EAAoD,QAA9ClW,EAAK4G,EAAKlc,QAAQwzB,8BAA2C,IAAPle,OAAgB,EAASA,EAAGqtB,mCAAgD,IAAPnX,OAAgB,EAASA,EAAGjgB,KAAK+J,EAAI4G,IAEtM,GAAC,oBACD,WACI,IAAM0mB,EAAQrhC,KAAKyd,WACnB,OAAO4jB,GAAQA,EAAMnL,OAASl2B,IAClC,GAAC,qBACD,WACI,IAAI+N,EAEJ,OADqB/N,KAAKvB,QAAlBke,WACsC,QAA1B5O,EAAK/N,KAAKyd,kBAA+B,IAAP1P,OAAgB,EAASA,EAAGmoB,OAAgBl2B,IACtG,GAAC,yBACD,WACI,IAAI+N,EAEJ,OADqB/N,KAAKvB,QAAlBke,SACqC,QAA1B5O,EAAK/N,KAAKyd,kBAA+B,IAAP1P,OAAgB,EAASA,EAAGkqB,cAAWhzB,CAChG,GAAC,sBACD,WACI,IAAQ0X,EAAa3c,KAAKvB,QAAlBke,SACR,GAAIA,EACA,OAAO3c,KAAKqW,KAAKglB,YAAYnpB,IAAIyK,EACzC,GAAC,qBACD,WAAiE,6DAAJ,CAAC,EAApD4d,EAAU,EAAVA,WAAY/oB,EAAU,EAAVA,WAAY6mB,EAAqB,EAArBA,sBACxBgJ,EAAQrhC,KAAKyd,WACf4jB,GACAA,EAAM9jB,QAAQvd,KAAMq4B,GACpBkC,IACAv6B,KAAK4b,qBAAkB3W,EACvBjF,KAAKu6B,YAAa,GAElB/oB,GACAxR,KAAKkd,WAAW,CAAE1L,WAAAA,GAC1B,GAAC,sBACD,WACI,IAAM6vB,EAAQrhC,KAAKyd,WACnB,QAAI4jB,GACOA,EAAM7jB,SAASxd,KAK9B,GAAC,2BACD,WACI,IAAQyS,EAAkBzS,KAAKvB,QAAvBgU,cACR,GAAKA,EAAL,CAGA,IAAI6uB,GAAY,EAKRlS,EAAiB3c,EAAjB2c,aAQR,IAPIA,EAAaxoB,QACbwoB,EAAavoB,SACbuoB,EAAatoB,SACbsoB,EAAaxgB,WACb0yB,GAAY,GAGXA,EAAL,CAIA,IAFA,IAAMC,EAAc,CAAC,EAEZh/B,EAAI,EAAGA,EAAIm3B,GAAcr3B,OAAQE,IAAK,CAC3C,IAAMqF,EAAM,SAAW8xB,GAAcn3B,GAEjC6sB,EAAaxnB,KACb25B,EAAY35B,GAAOwnB,EAAaxnB,GAChC6K,EAAcma,eAAehlB,EAAK,GAE1C,CAKA,IAAK,IAAMA,KAFO,OAAlB6K,QAA4C,IAAlBA,GAAoCA,EAAcmC,SAE1D2sB,EACd9uB,EAAcma,eAAehlB,EAAK25B,EAAY35B,IAIlD6K,EAAc+c,gBApBJ,CAhBA,CAqCd,GAAC,iCACD,WAAoC,IAC5BzhB,EAAIgG,EAAIkW,EADI6K,EAAY,UAAH,6CAAG,CAAC,EAGvB0M,EAAS,CAAC,EAChB,IAAKxhC,KAAKqI,UAAYrI,KAAKs6B,MACvB,OAAOkH,EACX,IAAKxhC,KAAKm7B,UACN,MAAO,CAAEsG,WAAY,UAGrBD,EAAOC,WAAa,GAExB,IAAM1pB,EAA0D,QAArChK,EAAK/N,KAAKvB,QAAQgU,qBAAkC,IAAP1E,OAAgB,EAASA,EAAG4E,WAAWoF,kBAC/G,GAAI/X,KAAKu6B,WAQL,OAPAv6B,KAAKu6B,YAAa,EAClBiH,EAAO3yB,QAAU,GACjB2yB,EAAOE,eACHC,EAAAA,GAAAA,GAAmB7M,EAAU4M,gBAAkB,GACnDF,EAAOr5B,UAAY4P,EACbA,EAAkB/X,KAAKovB,aAAc,IACrC,OACCoS,EAEX,IAAMtL,EAAOl2B,KAAKi/B,UAClB,IAAKj/B,KAAK4b,kBAAoB5b,KAAK8E,SAAWoxB,EAAK33B,OAAQ,CACvD,IAAMqjC,EAAc,CAAC,EAerB,OAdI5hC,KAAKvB,QAAQke,WACbilB,EAAY/yB,aACsB5J,IAA9BjF,KAAKovB,aAAavgB,QACZ7O,KAAKovB,aAAavgB,QAClB,EACV+yB,EAAYF,eACRC,EAAAA,GAAAA,GAAmB7M,EAAU4M,gBAAkB,IAEnD1hC,KAAKk7B,eAAiB10B,GAAaxG,KAAKovB,gBACxCwS,EAAYz5B,UAAY4P,EAClBA,EAAkB,CAAC,EAAG,IACtB,OACN/X,KAAKk7B,cAAe,GAEjB0G,CACX,CACA,IAAMC,EAAiB3L,EAAKwC,iBAAmBxC,EAAK9G,aACpDpvB,KAAK8hC,0BACLN,EAAOr5B,UAAY8wB,GAAyBj5B,KAAK+/B,6BAA8B//B,KAAK2b,UAAWkmB,GAC3F9pB,IACAypB,EAAOr5B,UAAY4P,EAAkB8pB,EAAgBL,EAAOr5B,YAEhE,MAAiBnI,KAAK4b,gBAAd5d,EAAC,EAADA,EAAGC,EAAC,EAADA,EA+BX,IAAK,IAAM2J,KA9BX45B,EAAOO,gBAAkB,GAAH,OAAiB,IAAX/jC,EAAEiG,OAAY,aAAgB,IAAXhG,EAAEgG,OAAY,OACzDiyB,EAAKwC,gBAKL8I,EAAO3yB,QACHqnB,IAASl2B,KACiG,QAAnGiqB,EAAuC,QAAjClW,EAAK8tB,EAAehzB,eAA4B,IAAPkF,EAAgBA,EAAK/T,KAAKovB,aAAavgB,eAA4B,IAAPob,EAAgBA,EAAK,EACjIjqB,KAAKw4B,gBACDx4B,KAAKovB,aAAavgB,QAClBgzB,EAAevL,YAO7BkL,EAAO3yB,QACHqnB,IAASl2B,UACwBiF,IAA3B48B,EAAehzB,QACXgzB,EAAehzB,QACf,QAC2B5J,IAA/B48B,EAAevL,YACXuL,EAAevL,YACf,EAKA0L,GAAAA,EACd,QAA4B/8B,IAAxB48B,EAAej6B,GAAnB,CAEA,MAA6Bo6B,GAAAA,EAAgBp6B,GAArC8S,EAAO,EAAPA,QAASwD,EAAO,EAAPA,QAOX+jB,EAAiC,SAArBT,EAAOr5B,UACnB05B,EAAej6B,GACf8S,EAAQmnB,EAAej6B,GAAMsuB,GACnC,GAAIhY,EAEA,IADA,IAAMgkB,EAAMhkB,EAAQ7b,OACXE,EAAI,EAAGA,EAAI2/B,EAAK3/B,IACrBi/B,EAAOtjB,EAAQ3b,IAAM0/B,OAIzBT,EAAO55B,GAAOq6B,CAlBN,CAgChB,OANIjiC,KAAKvB,QAAQke,WACb6kB,EAAOE,cACHxL,IAASl2B,MACH2hC,EAAAA,GAAAA,GAAmB7M,EAAU4M,gBAAkB,GAC/C,QAEPF,CACX,GAAC,2BACD,WACIxhC,KAAKu4B,WAAav4B,KAAKy4B,cAAWxzB,CACtC,GACA,uBACA,WACIjF,KAAKqW,KAAKykB,MAAMhb,SAAQ,SAACnF,GAAW,IAAI5M,EAAI,OAAwC,QAAhCA,EAAK4M,EAAKzN,wBAAqC,IAAPa,OAAgB,EAASA,EAAGzB,MAAQ,IAChItM,KAAKqW,KAAKykB,MAAMhb,QAAQsd,IACxBp9B,KAAKqW,KAAKglB,YAAY1K,OAC1B,KAAC,EAzlCL,EA2lCJ,CACA,SAASzY,GAAayC,GAClBA,EAAKzC,cACT,CACA,SAASqlB,GAAmB5iB,GACxB,IAAI5M,EAAIgG,EAAIkW,EACNwO,GAAuC,QAA1B1qB,EAAK4M,EAAK4d,kBAA+B,IAAPxqB,OAAgB,EAASA,EAAG0qB,WAAa9d,EAAK8d,SACnG,GAAI9d,EAAKgD,UACLhD,EAAK7V,QACL2zB,GACA9d,EAAKwnB,aAAa,aAAc,CAChC,MAA2DxnB,EAAK7V,OAA7CA,EAAM,EAAjBqP,UAAgCiuB,EAAc,EAA3B3D,YACnBzM,EAAkBrX,EAAKlc,QAAvBuzB,cACFwN,EAAW/G,EAASz0B,SAAW2W,EAAK7V,OAAOd,OAG3B,SAAlBguB,EACAnsB,GAAS,SAACpC,GACN,IAAM4+B,EAAe7C,EACf/G,EAASgG,YAAYh7B,GACrBg1B,EAAStkB,UAAU1Q,GACnBpB,EAASmB,EAAW6+B,GAC1BA,EAAa1+B,IAAMmB,EAAOrB,GAAME,IAChC0+B,EAAa3+B,IAAM2+B,EAAa1+B,IAAMtB,CAC1C,IAEK4+B,GAA0BjP,EAAeyG,EAAStkB,UAAWrP,IAClEe,GAAS,SAACpC,GACN,IAAM4+B,EAAe7C,EACf/G,EAASgG,YAAYh7B,GACrBg1B,EAAStkB,UAAU1Q,GACnBpB,EAASmB,EAAWsB,EAAOrB,IACjC4+B,EAAa3+B,IAAM2+B,EAAa1+B,IAAMtB,CAC1C,IAEJ,IAAMigC,EtDtpCa,CACvBtkC,EAP2B,CAC3BsG,UAAW,EACXF,MAAO,EACPH,OAAQ,EACRC,YAAa,GAIbjG,EAR2B,CAC3BqG,UAAW,EACXF,MAAO,EACPH,OAAQ,EACRC,YAAa,IsDypCTK,EAAa+9B,EAAax9B,EAAQ2zB,EAAStkB,WAC3C,IAAMouB,EtDxpCa,CACvBvkC,EAP2B,CAC3BsG,UAAW,EACXF,MAAO,EACPH,OAAQ,EACRC,YAAa,GAIbjG,EAR2B,CAC3BqG,UAAW,EACXF,MAAO,EACPH,OAAQ,EACRC,YAAa,IsD2pCLs7B,EACAj7B,EAAag+B,EAAa5nB,EAAK4kB,eAAe6C,GAAgB,GAAO3J,EAASgG,aAG9El6B,EAAag+B,EAAaz9B,EAAQ2zB,EAAStkB,WAE/C,IAAMuE,GAAoBif,GAAY2K,GAClCxG,GAA2B,EAC/B,IAAKnhB,EAAK4d,WAAY,CAClB,IAAM4G,EAAiBxkB,EAAKykB,6BAK5B,GAAID,IAAmBA,EAAe5G,WAAY,CAC9C,IAAkBiK,EAAyCrD,EAAnD1G,SAAkCgK,EAAiBtD,EAAzBr6B,OAClC,GAAI09B,GAAkBC,EAAc,CAChC,IAAMC,EtDrqCD,CACrB1kC,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsDuqCrBqB,EAAqB29B,EAAkBjK,EAAStkB,UAAWquB,EAAeruB,WAC1E,IAAMosB,EtDvqCD,CACrBviC,EAFsB,CAAE2F,IAAK,EAAGD,IAAK,GAGrCzF,EAHsB,CAAE0F,IAAK,EAAGD,IAAK,IsDyqCrBqB,EAAqBw7B,EAAgBz7B,EAAQ29B,EAAatuB,WACrDyjB,GAAU8K,EAAkBnC,KAC7BzE,GAA2B,EAEnC,CACJ,CACJ,CACAnhB,EAAKuiB,gBAAgB,YAAa,CAC9Bp4B,OAAAA,EACA2zB,SAAAA,EACAz2B,MAAOugC,EACPD,YAAAA,EACA5pB,iBAAAA,EACAojB,yBAAAA,GAER,MACSnhB,EAAKgD,WACoC,QAA7CsM,GAAMlW,EAAK4G,EAAKlc,SAAS0b,sBAAmC,IAAP8P,GAAyBA,EAAGjgB,KAAK+J,IAO3F4G,EAAKlc,QAAQ+S,gBAAavM,CAC9B,CACA,SAAS81B,GAAoBpgB,GAKzBA,EAAKwf,oBAAsBxf,EAAKwf,kBAAoB1Z,QAAQ9F,EAAK/V,QAAU+V,EAAK/V,OAAOu1B,oBAIvFxf,EAAKqW,mBAAqBrW,EAAKqW,iBAAmBvQ,QAAQ9F,EAAK/V,QAAU+V,EAAK/V,OAAOosB,kBACzF,CACA,SAASyM,GAAc9iB,GACnBA,EAAK8iB,eACT,CACA,SAASL,GAAkBziB,GACvBA,EAAKyiB,mBACT,CACA,SAASE,GAAoB3iB,GACzB,IAAQlI,EAAkBkI,EAAKlc,QAAvBgU,eACc,OAAlBA,QAA4C,IAAlBA,OAA2B,EAASA,EAAcE,WAAWgwB,wBACvFlwB,EAAcuQ,OAAO,uBAEzBrI,EAAKqf,gBACT,CACA,SAAS4B,GAAgBjhB,GACrBA,EAAKihB,kBACLjhB,EAAKokB,YAAcpkB,EAAKshB,eAAiBthB,EAAKpc,YAAS0G,CAC3D,CACA,SAAS+1B,GAAmBrgB,GACxBA,EAAKqgB,oBACT,CACA,SAASC,GAAetgB,GACpBA,EAAKsgB,gBACT,CACA,SAAS4B,GAAcliB,GACnBA,EAAKkiB,eACT,CACA,SAASa,GAAoB2D,GACzBA,EAAMuB,oBACV,CACA,SAASjC,GAAarkB,EAAQta,EAAO+0B,GACjCza,EAAOhY,WAAYH,EAAAA,EAAAA,GAAInC,EAAMsC,UAAW,EAAGyyB,GAC3Cza,EAAOlY,OAAQD,EAAAA,EAAAA,GAAInC,EAAMoC,MAAO,EAAG2yB,GACnCza,EAAOrY,OAASjC,EAAMiC,OACtBqY,EAAOpY,YAAclC,EAAMkC,WAC/B,CACA,SAAS2+B,GAAQvmB,EAAQ/K,EAAMgc,EAAIwJ,GAC/Bza,EAAO3Y,KAAMQ,EAAAA,EAAAA,GAAIoN,EAAK5N,IAAK4pB,EAAG5pB,IAAKozB,GACnCza,EAAO5Y,KAAMS,EAAAA,EAAAA,GAAIoN,EAAK7N,IAAK6pB,EAAG7pB,IAAKqzB,EACvC,CACA,SAAS8J,GAAOvkB,EAAQ/K,EAAMgc,EAAIwJ,GAC9B8L,GAAQvmB,EAAOte,EAAGuT,EAAKvT,EAAGuvB,EAAGvvB,EAAG+4B,GAChC8L,GAAQvmB,EAAOre,EAAGsT,EAAKtT,EAAGsvB,EAAGtvB,EAAG84B,EACpC,CACA,SAAS0J,GAAoB9lB,GACzB,OAAQA,EAAK+d,sBAAwDzzB,IAArC0V,EAAK+d,gBAAgBpC,WACzD,CACA,IAAM6F,GAA0B,CAC5BnxB,SAAU,IACVhC,KAAM,CAAC,GAAK,EAAG,GAAK,IAExB,SAASq0B,GAAe1iB,EAAMsf,GAM1B,IADA,IAAI6I,EAAanoB,EAAKtE,KACb9T,EAAIoY,EAAK2gB,KAAKj5B,OAAS,EAAGE,GAAK,EAAGA,IACvC,GAAIke,QAAQ9F,EAAK2gB,KAAK/4B,GAAG8F,UAAW,CAChCy6B,EAAanoB,EAAK2gB,KAAK/4B,GACvB,KACJ,CAEJ,IACMvD,GADgB8jC,GAAcA,IAAenoB,EAAKtE,KAAOysB,EAAWz6B,SAAWmf,UACvDub,cAAc,wBAAD,OAAyB9I,EAAS,OACzEj7B,GACA2b,EAAKoV,MAAM/wB,GAAS,EAC5B,CACA,SAASgkC,GAAUv/B,GACfA,EAAKE,IAAMpE,KAAK0jC,MAAMx/B,EAAKE,KAC3BF,EAAKC,IAAMnE,KAAK0jC,MAAMx/B,EAAKC,IAC/B,CACA,SAAS86B,GAASn3B,GACd27B,GAAU37B,EAAIrJ,GACdglC,GAAU37B,EAAIpJ,EAClB,CACA,SAASgjC,GAA0BjP,EAAeyG,EAAU3zB,GACxD,MAA0B,aAAlBktB,GACe,oBAAlBA,IACIpuB,EAAOi0B,GAAYY,GAAWZ,GAAY/yB,GAAS,GAChE,CEpyCA,IAAMo+B,GAAyBvJ,GAAqB,CAChDC,qBAAsB,SAAC96B,EAAKkkB,GAAM,OAAK1kB,EAAYQ,EAAK,SAAUkkB,EAAO,EACzE8W,cAAe,iBAAO,CAClB97B,EAAGwpB,SAAS2b,gBAAgBC,YAAc5b,SAAS6b,KAAKD,WACxDnlC,EAAGupB,SAAS2b,gBAAgBG,WAAa9b,SAAS6b,KAAKC,UAC1D,EACDvJ,kBAAmB,kBAAM,CAAI,ICN3B9jB,GAAqB,CACvBhX,aAASgG,GAEPs+B,GAAqB5J,GAAqB,CAC5CG,cAAe,SAACzxB,GAAQ,MAAM,CAC1BrK,EAAGqK,EAAS+6B,WACZnlC,EAAGoK,EAASi7B,UACf,EACDzJ,cAAe,WACX,IAAK5jB,GAAmBhX,QAAS,CAC7B,IAAMukC,EAAe,IAAIN,GAAuB,EAAG,CAAC,GACpDM,EAAazT,MAAMluB,QACnB2hC,EAAatmB,WAAW,CAAE4U,cAAc,IACxC7b,GAAmBhX,QAAUukC,CACjC,CACA,OAAOvtB,GAAmBhX,OAC9B,EACA+6B,eAAgB,SAAC3xB,EAAUxE,GACvBwE,EAAS2P,MAAM7P,eAAsBlD,IAAVpB,EAAsBA,EAAQ,MAC7D,EACAk2B,kBAAmB,SAAC1xB,GAAQ,OAAKoY,QAAuD,UAA/C5e,OAAOyZ,iBAAiBjT,GAAUo7B,SAAqB,ICf9FC,IAAS,kCACRlO,IACAryB,IACAqb,IAAc,IACjBmlB,0BAA2BJ,I","sources":["../node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","../node_modules/framer-motion/dist/es/events/event-info.mjs","../node_modules/framer-motion/dist/es/utils/time-conversion.mjs","../node_modules/framer-motion/dist/es/events/use-dom-event.mjs","../node_modules/framer-motion/dist/es/events/use-pointer-event.mjs","../node_modules/framer-motion/dist/es/utils/distance.mjs","../node_modules/framer-motion/dist/es/gestures/PanSession.mjs","../node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","../node_modules/framer-motion/dist/es/render/utils/types.mjs","../node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","../node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","../node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","../node_modules/framer-motion/dist/es/projection/utils/measure.mjs","../node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","../node_modules/framer-motion/dist/es/animation/waapi/easing.mjs","../node_modules/framer-motion/dist/es/animation/waapi/supports.mjs","../node_modules/framer-motion/dist/es/animation/waapi/create-accelerated-animation.mjs","../node_modules/framer-motion/dist/es/animation/waapi/index.mjs","../node_modules/framer-motion/dist/es/animation/waapi/utils/get-final-keyframe.mjs","../node_modules/framer-motion/dist/es/utils/delay.mjs","../node_modules/framer-motion/dist/es/animation/create-instant-animation.mjs","../node_modules/framer-motion/dist/es/animation/legacy-popmotion/inertia.mjs","../node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","../node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","../node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","../node_modules/framer-motion/dist/es/animation/utils/transitions.mjs","../node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs","../node_modules/framer-motion/dist/es/animation/index.mjs","../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","../node_modules/framer-motion/dist/es/projection/geometry/models.mjs","../node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs","../node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.mjs","../node_modules/framer-motion/dist/es/motion/features/drag.mjs","../node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs","../node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs","../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","../node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","../node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","../node_modules/framer-motion/dist/es/motion/features/layout/index.mjs","../node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","../node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","../node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","../node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","../node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","../node_modules/framer-motion/dist/es/render/utils/setters.mjs","../node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","../node_modules/framer-motion/dist/es/animation/optimized-appear/handoff.mjs","../node_modules/framer-motion/dist/es/animation/optimized-appear/store-id.mjs","../node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","../node_modules/framer-motion/dist/es/render/utils/animation.mjs","../node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","../node_modules/framer-motion/dist/es/motion/features/animations.mjs","../node_modules/framer-motion/dist/es/gestures/use-hover-gesture.mjs","../node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","../node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","../node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs","../node_modules/framer-motion/dist/es/motion/features/gestures.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","../node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs","../node_modules/framer-motion/dist/es/gestures/use-focus-gesture.mjs","../node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs","../node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","../node_modules/framer-motion/dist/es/render/VisualElement.mjs","../node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","../node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","../node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","../node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","../node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","../node_modules/framer-motion/dist/es/render/dom/features-animation.mjs","../node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","../node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","../node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","../node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","../node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","../node_modules/framer-motion/dist/es/projection/shared/stack.mjs","../node_modules/framer-motion/dist/es/projection/styles/transform.mjs","../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","../node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","../node_modules/framer-motion/dist/es/animation/animate.mjs","../node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","../node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","../node_modules/framer-motion/dist/es/render/dom/features-max.mjs"],"sourcesContent":["const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[pointType + \"X\"],\n            y: event[pointType + \"Y\"],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\n\nexport { secondsToMilliseconds };\n","import { useEffect } from 'react';\n\nfunction addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n    useEffect(() => {\n        const element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [ref, eventName, handler, options]);\n}\n\nexport { addDomEvent, useDomEvent };\n","import { addDomEvent, useDomEvent } from './use-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\nfunction usePointerEvent(ref, eventName, handler, options) {\n    return useDomEvent(ref, eventName, handler && addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent, usePointerEvent };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { sync, cancelSync } from '../frameloop/index.mjs';\nimport { secondsToMilliseconds } from '../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../events/use-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { distance2D } from '../utils/distance.mjs';\nimport { frameData } from '../frameloop/data.mjs';\nimport { isPrimaryPointer } from '../events/utils/is-primary-pointer.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            sync.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.handlePointerMove), addPointerEvent(window, \"pointerup\", this.handlePointerUp), addPointerEvent(window, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelSync.update(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000;\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin === null || origin === void 0 ? void 0 : origin.originX);\n    calcAxisDelta(delta.y, source.y, target.y, origin === null || origin === void 0 ? void 0 : origin.originY);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","var AnimationType;\n(function (AnimationType) {\n    AnimationType[\"Animate\"] = \"animate\";\n    AnimationType[\"Hover\"] = \"whileHover\";\n    AnimationType[\"Tap\"] = \"whileTap\";\n    AnimationType[\"Drag\"] = \"whileDrag\";\n    AnimationType[\"Focus\"] = \"whileFocus\";\n    AnimationType[\"InView\"] = \"whileInView\";\n    AnimationType[\"Exit\"] = \"exit\";\n})(AnimationType || (AnimationType = {}));\n\nexport { AnimationType };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mix } from '../../utils/mix.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    var _a, _b;\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        if (((_b = (_a = node.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === \"contents\")\n            continue;\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    treeScale.x = snapToDefault(treeScale.x);\n    treeScale.y = snapToDefault(treeScale.y);\n}\nfunction snapToDefault(scale) {\n    if (Number.isInteger(scale))\n        return scale;\n    return scale > 1.0000000000001 || scale < 0.999999999999 ? scale : 1;\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform, xKeys);\n    transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","function isWaapiSupportedEasing(easing) {\n    return (!easing || // Default easing\n        Array.isArray(easing) || // Bezier curve\n        (typeof easing === \"string\" && supportedWaapiEasing[easing]));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasing(easing) {\n    if (!easing)\n        return undefined;\n    return Array.isArray(easing)\n        ? cubicBezierAsString(easing)\n        : supportedWaapiEasing[easing];\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","const featureTests = {\n    waapi: () => Object.hasOwnProperty.call(Element.prototype, \"animate\"),\n};\nconst results = {};\nconst supports = {};\n/**\n * Generate features tests that cache their results.\n */\nfor (const key in featureTests) {\n    supports[key] = () => {\n        if (results[key] === undefined)\n            results[key] = featureTests[key]();\n        return results[key];\n    };\n}\n\nexport { supports };\n","import { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\"opacity\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0;\n    if (!canAccelerateAnimation)\n        return false;\n    let { keyframes, duration = 300, elapsed = 0, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n        /**\n         * If we need to pre-generate keyframes and repeat is infinite then\n         * early return as this will lock the thread.\n         */\n        if (options.repeat === Infinity)\n            return;\n        const sampleAnimation = animate({ ...options, elapsed: 0 });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < 20000) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        delay: -elapsed,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        get currentTime() {\n            return animation.currentTime || 0;\n        },\n        set currentTime(t) {\n            animation.currentTime = t;\n        },\n        stop: () => {\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animate({ ...options, autoplay: false });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            sync.update(() => animation.cancel());\n        },\n    };\n}\n\nexport { createAcceleratedAnimation };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction animateStyle(element, valueName, keyframes, { delay = 0, duration, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    return element.animate({ [valueName]: keyframes, offset: times }, {\n        delay,\n        duration,\n        easing: mapEasingToNativeEasing(ease),\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { animateStyle };\n","function getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }) {\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : keyframes.length - 1;\n    return keyframes[index];\n}\n\nexport { getFinalKeyframe };\n","import { sync, cancelSync } from '../frameloop/index.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelSync.read(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    sync.read(checkElapsed, true);\n    return () => cancelSync.read(checkElapsed);\n}\n\nexport { delay };\n","import { delay } from '../utils/delay.mjs';\n\nfunction createInstantAnimation({ keyframes, elapsed, onUpdate, onComplete, }) {\n    const setValue = () => {\n        onUpdate && onUpdate(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n    };\n    return elapsed ? { stop: delay(setValue, -elapsed) } : setValue();\n}\n\nexport { createInstantAnimation };\n","import { animate } from './index.mjs';\nimport { velocityPerSecond } from '../../utils/velocity-per-second.mjs';\nimport { frameData } from '../../frameloop/data.mjs';\n\nfunction inertia({ keyframes, velocity = 0, min, max, power = 0.8, timeConstant = 750, bounceStiffness = 500, bounceDamping = 10, restDelta = 1, modifyTarget, driver, onUpdate, onComplete, onStop, }) {\n    const origin = keyframes[0];\n    let currentAnimation;\n    function isOutOfBounds(v) {\n        return (min !== undefined && v < min) || (max !== undefined && v > max);\n    }\n    function findNearestBoundary(v) {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    }\n    function startAnimation(options) {\n        currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();\n        currentAnimation = animate({\n            keyframes: [0, 1],\n            velocity: 0,\n            ...options,\n            driver,\n            onUpdate: (v) => {\n                var _a;\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);\n                (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, v);\n            },\n            onComplete,\n            onStop,\n        });\n    }\n    function startSpring(options) {\n        startAnimation({\n            type: \"spring\",\n            stiffness: bounceStiffness,\n            damping: bounceDamping,\n            restDelta,\n            ...options,\n        });\n    }\n    if (isOutOfBounds(origin)) {\n        // Start the animation with spring if outside the defined boundaries\n        startSpring({\n            velocity,\n            keyframes: [origin, findNearestBoundary(origin)],\n        });\n    }\n    else {\n        /**\n         * Or if the value is out of bounds, simulate the inertia movement\n         * with the decay animation.\n         *\n         * Pre-calculate the target so we can detect if it's out-of-bounds.\n         * If it is, we want to check per frame when to switch to a spring\n         * animation\n         */\n        let target = power * velocity + origin;\n        if (typeof modifyTarget !== \"undefined\")\n            target = modifyTarget(target);\n        const boundary = findNearestBoundary(target);\n        const heading = boundary === min ? -1 : 1;\n        let prev;\n        let current;\n        const checkBoundary = (v) => {\n            prev = current;\n            current = v;\n            velocity = velocityPerSecond(v - prev, frameData.delta);\n            if ((heading === 1 && v > boundary) ||\n                (heading === -1 && v < boundary)) {\n                startSpring({ keyframes: [v, boundary], velocity });\n            }\n        };\n        startAnimation({\n            type: \"decay\",\n            keyframes: [origin, 0],\n            velocity,\n            timeConstant,\n            power,\n            restDelta,\n            modifyTarget,\n            onUpdate: isOutOfBounds(target) ? checkBoundary : undefined,\n        });\n    }\n    return {\n        stop: () => currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop(),\n    };\n}\n\nexport { inertia };\n","const underDampedSpring = () => ({\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n});\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst linearTween = () => ({\n    type: \"keyframes\",\n    ease: \"linear\",\n    duration: 0.3,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\nconst defaultTransitions = {\n    x: underDampedSpring,\n    y: underDampedSpring,\n    z: underDampedSpring,\n    rotate: underDampedSpring,\n    rotateX: underDampedSpring,\n    rotateY: underDampedSpring,\n    rotateZ: underDampedSpring,\n    scaleX: criticallyDampedSpring,\n    scaleY: criticallyDampedSpring,\n    scale: criticallyDampedSpring,\n    opacity: linearTween,\n    backgroundColor: linearTween,\n    color: linearTween,\n    default: criticallyDampedSpring,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else {\n        const factory = defaultTransitions[valueKey] || defaultTransitions.default;\n        return factory(keyframes[1]);\n    }\n};\n\nexport { criticallyDampedSpring, getDefaultTransition, linearTween, underDampedSpring };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (key, value) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (key === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        complex.test(value) && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    var _a;\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);\n}\n\nexport { getAnimatableNone };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\n\n/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\nfunction isZero(value) {\n    return (value === 0 ||\n        (typeof value === \"string\" &&\n            parseFloat(value) === 0 &&\n            value.indexOf(\" \") === -1));\n}\nfunction getZeroUnit(potentialUnitType) {\n    return typeof potentialUnitType === \"number\"\n        ? 0\n        : getAnimatableNone(\"\", potentialUnitType);\n}\nfunction getValueTransition(transition, key) {\n    return transition[key] || transition[\"default\"] || transition;\n}\n\nexport { getValueTransition, getZeroUnit, isTransitionDefined, isZero };\n","import { getAnimatableNone } from '../../render/dom/value-types/animatable-none.mjs';\nimport { isAnimatable } from './is-animatable.mjs';\nimport { isZero, getZeroUnit } from './transitions.mjs';\n\nfunction getKeyframes(value, valueName, target, transition) {\n    const isTargetAnimatable = isAnimatable(valueName, target);\n    let origin = transition.from !== undefined ? transition.from : value.get();\n    if (origin === \"none\" && isTargetAnimatable && typeof target === \"string\") {\n        /**\n         * If we're trying to animate from \"none\", try and get an animatable version\n         * of the target. This could be improved to work both ways.\n         */\n        origin = getAnimatableNone(valueName, target);\n    }\n    else if (isZero(origin) && typeof target === \"string\") {\n        origin = getZeroUnit(target);\n    }\n    else if (!Array.isArray(target) &&\n        isZero(target) &&\n        typeof origin === \"string\") {\n        target = getZeroUnit(origin);\n    }\n    /**\n     * If the target has been defined as a series of keyframes\n     */\n    if (Array.isArray(target)) {\n        /**\n         * Ensure an initial wildcard keyframe is hydrated by the origin.\n         * TODO: Support extra wildcard keyframes i.e [1, null, 0]\n         */\n        if (target[0] === null) {\n            target[0] = origin;\n        }\n        return target;\n    }\n    else {\n        return [origin, target];\n    }\n}\n\nexport { getKeyframes };\n","import { warning } from 'hey-listen';\nimport { secondsToMilliseconds } from '../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from './waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from './create-instant-animation.mjs';\nimport { animate } from './legacy-popmotion/index.mjs';\nimport { inertia } from './legacy-popmotion/inertia.mjs';\nimport { getDefaultTransition } from './utils/default-transitions.mjs';\nimport { isAnimatable } from './utils/is-animatable.mjs';\nimport { getKeyframes } from './utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from './utils/transitions.mjs';\n\nconst createMotionValueAnimation = (valueName, value, target, transition = {}) => {\n    return (onComplete) => {\n        const valueTransition = getValueTransition(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */\n        const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */\n        let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */\n        const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ...valueTransition,\n            elapsed,\n            onUpdate: (v) => {\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: () => {\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n        };\n        if (!isOriginAnimatable ||\n            !isTargetAnimatable ||\n            instantAnimationState.current ||\n            valueTransition.type === false) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */\n            return createInstantAnimation(options);\n        }\n        else if (valueTransition.type === \"inertia\") {\n            /**\n             * If this is an inertia animation, we currently don't support pre-generating\n             * keyframes for this as such it must always run on the main thread.\n             */\n            return inertia(options);\n        }\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */\n        if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options),\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */\n        if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        const visualElement = value.owner;\n        const element = visualElement && visualElement.current;\n        /**\n         * Animate via WAAPI if possible.\n         */\n        if (visualElement &&\n            element instanceof HTMLElement &&\n            !(visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onUpdate)) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation)\n                return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */\n        return animate(options);\n    };\n};\n\nexport { createMotionValueAnimation };\n","import { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        if (this.visualElement.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            var _a;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                var _a, _b;\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const measuredAxis = (_b = (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.layoutBox[axis];\n                    if (measuredAxis) {\n                        const length = calcLength(measuredAxis);\n                        current = length * (parseFloat(current) / 100);\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n            (_a = this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n    }\n    cancel() {\n        var _a, _b;\n        this.isDragging = false;\n        if (this.visualElement.projection) {\n            this.visualElement.projection.isAnimationBlocked = false;\n        }\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints === null || constraints === void 0 ? void 0 : constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(createMotionValueAnimation(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        var _a;\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const externalMotionValue = this.visualElement.getProps()[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, ((_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        var _a;\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        var _a;\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","import { useEffect } from 'react';\n\nfunction useUnmountEffect(callback) {\n    return useEffect(() => () => callback(), []);\n}\n\nexport { useUnmountEffect };\n","const makeRenderlessComponent = (hook) => (props) => {\n    hook(props);\n    return null;\n};\n\nexport { makeRenderlessComponent };\n","import { useDrag } from '../../gestures/drag/use-drag.mjs';\nimport { usePanGesture } from '../../gestures/use-pan-gesture.mjs';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.mjs';\n\nconst drag = {\n    pan: makeRenderlessComponent(usePanGesture),\n    drag: makeRenderlessComponent(useDrag),\n};\n\nexport { drag };\n","import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { PanSession } from './PanSession.mjs';\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @privateRemarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\nfunction usePanGesture({ onPan, onPanStart, onPanEnd, onPanSessionStart, visualElement, }) {\n    const hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n    const panSession = useRef(null);\n    const { transformPagePoint } = useContext(MotionConfigContext);\n    const handlers = {\n        onSessionStart: onPanSessionStart,\n        onStart: onPanStart,\n        onMove: onPan,\n        onEnd: (event, info) => {\n            panSession.current = null;\n            onPanEnd && onPanEnd(event, info);\n        },\n    };\n    useEffect(() => {\n        if (panSession.current !== null) {\n            panSession.current.updateHandlers(handlers);\n        }\n    });\n    function onPointerDown(event) {\n        panSession.current = new PanSession(event, handlers, {\n            transformPagePoint,\n        });\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n    useUnmountEffect(() => panSession.current && panSession.current.end());\n}\n\nexport { usePanGesture };\n","import { useEffect } from 'react';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\n\n/**\n * A hook that allows an element to be dragged.\n *\n * @internal\n */\nfunction useDrag(props) {\n    const { dragControls: groupDragControls, visualElement } = props;\n    const dragControls = useConstant(() => new VisualElementDragControls(visualElement));\n    // If we've been provided a DragControls for manual control over the drag gesture,\n    // subscribe this component to it on mount.\n    useEffect(() => groupDragControls && groupDragControls.subscribe(dragControls), [dragControls, groupDragControls]);\n    // Apply the event listeners to the element\n    useEffect(() => dragControls.addListeners(), [dragControls]);\n}\n\nexport { useDrag };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    // Replace with useId when released in React\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { invariant } from 'hey-listen';\n\nfunction isCSSVariable(value) {\n    return typeof value === \"string\" && value.startsWith(\"var(--\");\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    const match = cssVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token, fallback] = match;\n    return [token, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariable(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, { ...target }, transitionEnd) {\n    const element = visualElement.current;\n    if (!(element instanceof Element))\n        return { target, transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = { ...transitionEnd };\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.values.forEach((value) => {\n        const current = value.get();\n        if (!isCSSVariable(current))\n            return;\n        const resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (const key in target) {\n        const current = target[key];\n        if (!isCSSVariable(current))\n            continue;\n        const resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd && transitionEnd[key] === undefined) {\n            transitionEnd[key] = current;\n        }\n    }\n    return { target, transitionEnd };\n}\n\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };\n","import { cssVariableRegex } from '../../render/dom/utils/css-variables-conversion.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst varToken = \"_$css\";\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        /**\n         * We need to first strip and store CSS variables from the string.\n         */\n        const containsCSSVariables = latest.includes(\"var(\");\n        const cssVariables = [];\n        if (containsCSSVariables) {\n            latest = latest.replace(cssVariableRegex, (match) => {\n                cssVariables.push(match);\n                return varToken;\n            });\n        }\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        let output = template(shadow);\n        if (containsCSSVariables) {\n            let i = 0;\n            output = output.replace(varToken, () => {\n                const cssVariable = cssVariables[i];\n                i++;\n                return cssVariable;\n            });\n        }\n        return output;\n    },\n};\n\nexport { correctBoxShadow };\n","import { sync } from '../../../frameloop/index.mjs';\nimport React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                sync.postRender(() => {\n                    var _a;\n                    if (!((_a = projection.getStack()) === null || _a === void 0 ? void 0 : _a.members.length)) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            if (!projection.currentAnimation && projection.isLead()) {\n                this.safeToRemove();\n            }\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { MeasureLayout } from './MeasureLayout.mjs';\n\nconst layoutFeatures = {\n    measureLayout: MeasureLayout,\n};\n\nexport { layoutFeatures };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^\\-?\\d*\\.?\\d+$/.test(v);\n\nexport { isNumericalString };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/.test(v);\n\nexport { isZeroValueString };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\n/**\n * Creates an object containing the latest state of every MotionValue on a VisualElement\n */\nfunction getCurrent(visualElement) {\n    const current = {};\n    visualElement.values.forEach((value, key) => (current[key] = value.get()));\n    return current;\n}\n/**\n * Creates an object containing the latest velocity of every MotionValue on a VisualElement\n */\nfunction getVelocity(visualElement) {\n    const velocity = {};\n    visualElement.values.forEach((value, key) => (velocity[key] = value.getVelocity()));\n    return velocity;\n}\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));\n}\n\nexport { resolveVariant };\n","import { isNumericalString } from '../../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.mjs';\nimport { findValueType } from '../dom/value-types/find.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        var _a;\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => {\n            setVariants(child, variantLabels);\n        });\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (let i = 0; i < numNewValues; i++) {\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" &&\n            (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value, { owner: visualElement }));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        if (value !== null)\n            visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    var _a;\n    const origin = {};\n    for (const key in target) {\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        origin[key] =\n            transitionOrigin !== undefined\n                ? transitionOrigin\n                : (_a = visualElement.getValue(key)) === null || _a === void 0 ? void 0 : _a.get();\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","import { sync } from '../../frameloop/index.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { appearStoreId } from './store-id.mjs';\n\nfunction handoffOptimizedAppearAnimation(id, name, value) {\n    const { MotionAppearAnimations } = window;\n    const animationId = appearStoreId(id, transformProps.has(name) ? \"transform\" : name);\n    const animation = MotionAppearAnimations && MotionAppearAnimations.get(animationId);\n    if (animation) {\n        const sampledTime = performance.now();\n        /**\n         * Resync handoff animation with optimised animation.\n         *\n         * This step would be unnecessary if we triggered animateChanges() in useEffect,\n         * but due to potential hydration errors we currently fire them in useLayoutEffect.\n         *\n         * By the time we're safely ready to cancel the optimised WAAPI animation,\n         * the main thread might have been blocked and desynced the two animations.\n         *\n         * Here, we resync the two animations before the optimised WAAPI animation is cancelled.\n         */\n        sync.update(() => {\n            if (value.animation) {\n                value.animation.currentTime = performance.now() - sampledTime;\n            }\n        });\n        /**\n         * We allow the animation to persist until the next frame:\n         *   1. So it continues to play until Framer Motion is ready to render\n         *      (avoiding a potential flash of the element's original state)\n         *   2. As all independent transforms share a single transform animation, stopping\n         *      it synchronously would prevent subsequent transforms from handing off.\n         */\n        sync.render(() => {\n            MotionAppearAnimations.delete(animationId);\n            /**\n             * Animation.cancel() throws so it needs to be wrapped in a try/catch\n             */\n            try {\n                animation.cancel();\n            }\n            catch (e) { }\n        });\n        return animation.currentTime || 0;\n    }\n    else {\n        return 0;\n    }\n}\n\nexport { handoffOptimizedAppearAnimation };\n","const appearStoreId = (id, value) => `${id}: ${value}`;\n\nexport { appearStoreId };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","import { setTarget } from './setters.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { handoffOptimizedAppearAnimation } from '../../animation/optimized-appear/handoff.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = animateTarget(visualElement, resolvedDefinition, options);\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\nfunction animateVariant(visualElement, variant, options = {}) {\n    var _a;\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => animateTarget(visualElement, resolved, options)\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = ((_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.size)\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(last);\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\n/**\n * @internal\n */\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    var _a;\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type && ((_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.getState()[type]);\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = { delay, elapsed: 0, ...transition };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (!value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                valueTransition.elapsed = handoffOptimizedAppearAnimation(appearId, key, value);\n            }\n        }\n        let animation = value.start(createMotionValueAnimation(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation = animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    return Promise.all(animations).then(() => {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\n\nexport { animateVisualElement, sortByTreeOrder, stopAnimation };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { animateVisualElement } from './animation.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { AnimationType } from './types.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\nconst variantPriorityOrder = [\n    AnimationType.Animate,\n    AnimationType.InView,\n    AnimationType.Focus,\n    AnimationType.Hover,\n    AnimationType.Tap,\n    AnimationType.Drag,\n    AnimationType.Exit,\n];\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined ? props[type] : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        [AnimationType.Animate]: createTypeState(true),\n        [AnimationType.InView]: createTypeState(),\n        [AnimationType.Hover]: createTypeState(),\n        [AnimationType.Tap]: createTypeState(),\n        [AnimationType.Drag]: createTypeState(),\n        [AnimationType.Focus]: createTypeState(),\n        [AnimationType.Exit]: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState, variantPriorityOrder };\n","import { useEffect, useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { usePresence } from '../../components/AnimatePresence/use-presence.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { createAnimationState } from '../../render/utils/animation-state.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.mjs';\n\nconst animations = {\n    animation: makeRenderlessComponent(({ visualElement, animate }) => {\n        /**\n         * We dynamically generate the AnimationState manager as it contains a reference\n         * to the underlying animation library. We only want to load that if we load this,\n         * so people can optionally code split it out using the `m` component.\n         */\n        visualElement.animationState || (visualElement.animationState = createAnimationState(visualElement));\n        /**\n         * Subscribe any provided AnimationControls to the component's VisualElement\n         */\n        if (isAnimationControls(animate)) {\n            useEffect(() => animate.subscribe(visualElement), [animate]);\n        }\n    }),\n    exit: makeRenderlessComponent((props) => {\n        const { custom, visualElement } = props;\n        const [isPresent, safeToRemove] = usePresence();\n        const presenceContext = useContext(PresenceContext);\n        useEffect(() => {\n            visualElement.isPresent = isPresent;\n            const animation = visualElement.animationState &&\n                visualElement.animationState.setActive(AnimationType.Exit, !isPresent, {\n                    custom: (presenceContext && presenceContext.custom) ||\n                        custom,\n                });\n            if (animation && !isPresent) {\n                animation.then(safeToRemove);\n            }\n        }, [isPresent]);\n    }),\n};\n\nexport { animations };\n","import { AnimationType } from '../render/utils/types.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { useMemo } from 'react';\n\nfunction createHoverEvent(visualElement, isActive, applyVariants, callback) {\n    return (event, info) => {\n        if (event.type === \"touch\" || isDragActive())\n            return;\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (applyVariants && visualElement.animationState) {\n            visualElement.animationState.setActive(AnimationType.Hover, isActive);\n        }\n        callback && callback(event, info);\n    };\n}\nfunction useHoverGesture({ onHoverStart, onHoverEnd, whileHover, visualElement, }) {\n    usePointerEvent(visualElement, \"pointerenter\", useMemo(() => {\n        return onHoverStart || whileHover\n            ? createHoverEvent(visualElement, true, Boolean(whileHover), onHoverStart)\n            : undefined;\n    }, [onHoverStart, Boolean(whileHover), visualElement]), { passive: !onHoverStart });\n    usePointerEvent(visualElement, \"pointerleave\", useMemo(() => {\n        return onHoverEnd || whileHover\n            ? createHoverEvent(visualElement, false, Boolean(whileHover), onHoverEnd)\n            : undefined;\n    }, [onHoverStart, Boolean(whileHover), visualElement]), { passive: !onHoverEnd });\n}\n\nexport { useHoverGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { useRef, useEffect } from 'react';\nimport { AnimationType } from '../../../render/utils/types.mjs';\nimport { warnOnce } from '../../../utils/warn-once.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nfunction useViewport({ visualElement, whileInView, onViewportEnter, onViewportLeave, viewport = {}, }) {\n    const state = useRef({\n        hasEnteredView: false,\n        isInView: false,\n    });\n    let shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);\n    if (viewport.once && state.current.hasEnteredView)\n        shouldObserve = false;\n    const useObserver = typeof IntersectionObserver === \"undefined\"\n        ? useMissingIntersectionObserver\n        : useIntersectionObserver;\n    useObserver(shouldObserve, state.current, visualElement, viewport);\n}\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nfunction useIntersectionObserver(shouldObserve, state, visualElement, { root, margin: rootMargin, amount = \"some\", once }) {\n    useEffect(() => {\n        if (!shouldObserve || !visualElement.current)\n            return;\n        const options = {\n            root: root === null || root === void 0 ? void 0 : root.current,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const intersectionCallback = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (state.isInView === isIntersecting)\n                return;\n            state.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && state.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                state.hasEnteredView = true;\n            }\n            if (visualElement.animationState) {\n                visualElement.animationState.setActive(AnimationType.InView, isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const props = visualElement.getProps();\n            const callback = isIntersecting\n                ? props.onViewportEnter\n                : props.onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(visualElement.current, options, intersectionCallback);\n    }, [shouldObserve, root, rootMargin, amount]);\n}\n/**\n * If IntersectionObserver is missing, we activate inView and fire onViewportEnter\n * on mount. This way, the page will be in the state the author expects users\n * to see it in for everyone.\n */\nfunction useMissingIntersectionObserver(shouldObserve, state, visualElement, { fallback = true }) {\n    useEffect(() => {\n        if (!shouldObserve || !fallback)\n            return;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, \"IntersectionObserver not available on this device. whileInView animations will trigger on mount.\");\n        }\n        /**\n         * Fire this in an rAF because, at this point, the animation state\n         * won't have flushed for the first time and there's certain logic in\n         * there that behaves differently on the initial animation.\n         *\n         * This hook should be quite rarely called so setting this in an rAF\n         * is preferred to changing the behaviour of the animation state.\n         */\n        requestAnimationFrame(() => {\n            state.hasEnteredView = true;\n            const { onViewportEnter } = visualElement.getProps();\n            onViewportEnter && onViewportEnter(null);\n            if (visualElement.animationState) {\n                visualElement.animationState.setActive(AnimationType.InView, true);\n            }\n        });\n    }, [shouldObserve]);\n}\n\nexport { useViewport };\n","import { useFocusGesture } from '../../gestures/use-focus-gesture.mjs';\nimport { useHoverGesture } from '../../gestures/use-hover-gesture.mjs';\nimport { useTapGesture } from '../../gestures/use-tap-gesture.mjs';\nimport { useViewport } from './viewport/use-viewport.mjs';\nimport { makeRenderlessComponent } from '../utils/make-renderless-component.mjs';\n\nconst gestureAnimations = {\n    inView: makeRenderlessComponent(useViewport),\n    tap: makeRenderlessComponent(useTapGesture),\n    focus: makeRenderlessComponent(useFocusGesture),\n    hover: makeRenderlessComponent(useHoverGesture),\n};\n\nexport { gestureAnimations };\n","import { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from 'hey-listen';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nvar BoundingBoxDimension;\n(function (BoundingBoxDimension) {\n    BoundingBoxDimension[\"width\"] = \"width\";\n    BoundingBoxDimension[\"height\"] = \"height\";\n    BoundingBoxDimension[\"left\"] = \"left\";\n    BoundingBoxDimension[\"right\"] = \"right\";\n    BoundingBoxDimension[\"top\"] = \"top\";\n    BoundingBoxDimension[\"bottom\"] = \"bottom\";\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.render();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.current;\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.render();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        value && value.jump(origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                value.jump(to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.render();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { BoundingBoxDimension, positionalValues, unitConversion };\n","import { useRef, useCallback } from 'react';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { addPointerEvent, usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { AnimationType } from '../render/utils/types.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\n/**\n * @param handlers -\n * @internal\n */\nfunction useTapGesture({ onTap, onTapStart, onTapCancel, whileTap, visualElement, ...props }) {\n    const hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;\n    const isPressing = useRef(false);\n    const cancelPointerEndListeners = useRef(null);\n    /**\n     * Only set listener to passive if there are no external listeners.\n     */\n    const eventOptions = {\n        passive: !(onTapStart ||\n            onTap ||\n            onTapCancel ||\n            props[\"onPointerDown\"]),\n    };\n    function removePointerEndListener() {\n        cancelPointerEndListeners.current && cancelPointerEndListeners.current();\n        cancelPointerEndListeners.current = null;\n    }\n    function checkPointerEnd() {\n        removePointerEndListener();\n        isPressing.current = false;\n        const latestProps = visualElement.getProps();\n        if (latestProps.whileTap && visualElement.animationState) {\n            visualElement.animationState.setActive(AnimationType.Tap, false);\n        }\n        return !isDragActive();\n    }\n    function onPointerUp(event, info) {\n        var _a, _b, _c, _d;\n        if (!checkPointerEnd())\n            return;\n        /**\n         * We only count this as a tap gesture if the event.target is the same\n         * as, or a child of, this component's element\n         */\n        !isNodeOrChild(visualElement.current, event.target)\n            ? (_b = (_a = visualElement.getProps()).onTapCancel) === null || _b === void 0 ? void 0 : _b.call(_a, event, info)\n            : (_d = (_c = visualElement.getProps()).onTap) === null || _d === void 0 ? void 0 : _d.call(_c, event, info);\n    }\n    function onPointerCancel(event, info) {\n        var _a, _b;\n        if (!checkPointerEnd())\n            return;\n        (_b = (_a = visualElement.getProps()).onTapCancel) === null || _b === void 0 ? void 0 : _b.call(_a, event, info);\n    }\n    const startPress = useCallback((event, info) => {\n        var _a;\n        removePointerEndListener();\n        if (isPressing.current)\n            return;\n        isPressing.current = true;\n        cancelPointerEndListeners.current = pipe(addPointerEvent(window, \"pointerup\", onPointerUp, eventOptions), addPointerEvent(window, \"pointercancel\", onPointerCancel, eventOptions));\n        const latestProps = visualElement.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (latestProps.whileTap && visualElement.animationState) {\n            visualElement.animationState.setActive(AnimationType.Tap, true);\n        }\n        (_a = latestProps.onTapStart) === null || _a === void 0 ? void 0 : _a.call(latestProps, event, info);\n    }, [Boolean(onTapStart), visualElement]);\n    usePointerEvent(visualElement, \"pointerdown\", hasPressListeners ? startPress : undefined, eventOptions);\n    useUnmountEffect(removePointerEndListener);\n}\n\nexport { useTapGesture };\n","import { AnimationType } from '../render/utils/types.mjs';\nimport { useDomEvent } from '../events/use-dom-event.mjs';\nimport { useCallback } from 'react';\n\n/**\n *\n * @param props\n * @param ref\n * @internal\n */\nfunction useFocusGesture({ whileFocus, visualElement, }) {\n    const { animationState } = visualElement;\n    const onFocus = useCallback(() => {\n        animationState && animationState.setActive(AnimationType.Focus, true);\n    }, [animationState]);\n    const onBlur = useCallback(() => {\n        animationState && animationState.setActive(AnimationType.Focus, false);\n    }, [animationState]);\n    useDomEvent(visualElement, \"focus\", whileFocus ? onFocus : undefined);\n    useDomEvent(visualElement, \"blur\", whileFocus ? onBlur : undefined);\n}\n\nexport { useFocusGesture };\n","import { resolveCSSVariables } from './css-variables-conversion.mjs';\nimport { unitConversion } from './unit-conversion.mjs';\n\n/**\n * Parse a DOM variant to make it animatable. This involves resolving CSS variables\n * and ensuring animations like \"20%\" => \"calc(50vw)\" are performed in pixels.\n */\nconst parseDomVariant = (visualElement, target, origin, transitionEnd) => {\n    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);\n    target = resolved.target;\n    transitionEnd = resolved.transitionEnd;\n    return unitConversion(visualElement, target, origin, transitionEnd);\n};\n\nexport { parseDomVariant };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","import { sync, cancelSync } from '../frameloop/index.mjs';\nimport { invariant } from 'hey-listen';\nimport { createElement } from 'react';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Tracks whether this VisualElement's React component is currently present\n         * within the defined React tree.\n         */\n        this.isPresent = true;\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => sync.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps) {\n        return {};\n    }\n    mount(instance) {\n        var _a;\n        this.current = instance;\n        if (this.projection) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.setProps(this.props);\n    }\n    unmount() {\n        var _a, _b, _c;\n        (_a = this.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(this.notifyUpdate);\n        cancelSync.render(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        (_b = this.removeFromVariantTree) === null || _b === void 0 ? void 0 : _b.call(this);\n        (_c = this.parent) === null || _c === void 0 ? void 0 : _c.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                sync.update(this.notifyUpdate, false, true);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type)\n            return 0;\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n        const features = [];\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (process.env.NODE_ENV !== \"production\" &&\n            preloadedFeatures &&\n            isStrict) {\n            invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Component } = featureDefinitions[name];\n            /**\n             * It might be possible in the future to use this moment to\n             * dynamically request functionality. In initial tests this\n             * was producing a lot of duplication amongst bundles.\n             */\n            if (isEnabled(renderedProps) && Component) {\n                features.push(createElement(Component, {\n                    key: name,\n                    ...renderedProps,\n                    visualElement: this,\n                }));\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n            });\n        }\n        return features;\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    setProps(props) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        const prevProps = this.props;\n        this.props = props;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, prevProps), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        var _a;\n        return (_a = this.props.variants) === null || _a === void 0 ? void 0 : _a[name];\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        var _a;\n        return this.isVariantNode ? this : (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getClosestVariantNode();\n    }\n    getVariantContext(startAtParent = false) {\n        var _a, _b;\n        if (startAtParent)\n            return (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getVariantContext();\n        if (!this.isControllingVariants) {\n            const context = ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.getVariantContext()) || {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        var _a;\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (value !== this.values.get(key)) {\n            this.removeValue(key);\n            this.bindToMotionValue(key, value);\n        }\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        var _a;\n        this.values.delete(key);\n        (_a = this.valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        this.valueSubscriptions.delete(key);\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        var _a;\n        (_a = this.events[eventName]) === null || _a === void 0 ? void 0 : _a.notify(...args);\n    }\n}\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nexport { VisualElement };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"8.4.7\", `Attempting to mix Framer Motion versions ${nextValue.version} with 8.4.7 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariable } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariable(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, options, props) {\n        buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderHTML(instance, renderState, styleProp, projection);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.isSVGTag = false;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        var _a;\n        if (transformProps.has(key)) {\n            return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    scrapeMotionValuesFromProps(props, prevProps) {\n        return scrapeMotionValuesFromProps(props, prevProps);\n    }\n    build(renderState, latestValues, options, props) {\n        buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { animations } from '../../motion/features/animations.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\n\n/**\n * @public\n */\nconst domAnimation = {\n    renderer: createDomVisualElement,\n    ...animations,\n    ...gestureAnimations,\n};\n\nexport { domAnimation };\n","import { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options, { enableHardwareAcceleration: false })\n        : new HTMLVisualElement(options, { enableHardwareAcceleration: true });\n};\n\nexport { createDomVisualElement };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        var _a;\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if ((_a = node.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            var _a, _b, _c, _d, _e;\n            (_b = (_a = node.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_e = (_c = node.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { cancelSync, flushSync, sync } from '../../frameloop/index.mjs';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            this.isTransformDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this or any\n             * child might need recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(elementId, node) {\n            this.potentialNodes.set(elementId, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            var _a;\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    var _a, _b, _c, _d, _e;\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n            this.animationId++;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            var _a, _b, _c;\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.layoutBox);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            var _a;\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            var _a;\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layoutBox, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.isProjectionDirty = true;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            if (!this.isProjectionDirty && !this.attemptToResolveRelativeTarget)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            var _a;\n            const { isProjectionDirty, isTransformDirty } = this;\n            this.isProjectionDirty = this.isTransformDirty = false;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            if (isProjectionDirty)\n                canSkip = false;\n            if (isShared && isTransformDirty)\n                canSkip = false;\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a, _b, _c;\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            var _a, _b;\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const isSharedLayoutAnimation = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.source) !== ((_a = this.layout) === null || _a === void 0 ? void 0 : _a.source);\n            const isOnlyMember = (((_b = this.getStack()) === null || _b === void 0 ? void 0 : _b.members.length) || 0) <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                var _a;\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        }\n        startAnimation(options) {\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        var _a;\n                        this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    },\n                    onComplete: () => {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b, _c;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Propagate isProjectionDirty. Nodes are ordered by depth, so if the parent here\n     * is dirty we can simply pass this forward.\n     */\n    node.isProjectionDirty || (node.isProjectionDirty = Boolean(node.parent && node.parent.isProjectionDirty));\n    /**\n     * Propagate isTransformDirty.\n     */\n    node.isTransformDirty || (node.isTransformDirty = Boolean(node.parent && node.parent.isTransformDirty));\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, elementId) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { createMotionValueAnimation } from './index.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\n\n/**\n * Animate a single value or a `MotionValue`.\n *\n * The first argument is either a `MotionValue` to animate, or an initial animation value.\n *\n * The second is either a value to animate to, or an array of keyframes to animate through.\n *\n * The third argument can be either tween or spring options, and optional lifecycle methods: `onUpdate`, `onPlay`, `onComplete`, `onRepeat` and `onStop`.\n *\n * Returns `AnimationPlaybackControls`, currently just a `stop` method.\n *\n * ```javascript\n * const x = useMotionValue(0)\n *\n * useEffect(() => {\n *   const controls = animate(x, 100, {\n *     type: \"spring\",\n *     stiffness: 2000,\n *     onComplete: v => {}\n *   })\n *\n *   return controls.stop\n * })\n * ```\n *\n * @public\n */\nfunction animate(from, to, transition = {}) {\n    const value = isMotionValue(from) ? from : motionValue(from);\n    value.start(createMotionValueAnimation(\"\", value, to, transition));\n    return {\n        stop: () => value.stop(),\n        isAnimating: () => value.isAnimating(),\n    };\n}\n\nexport { animate };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode(0, {});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { drag } from '../../motion/features/drag.mjs';\nimport { layoutFeatures } from '../../motion/features/layout/index.mjs';\nimport { domAnimation } from './features-animation.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\n/**\n * @public\n */\nconst domMax = {\n    ...domAnimation,\n    ...drag,\n    ...layoutFeatures,\n    projectionNodeConstructor: HTMLProjectionNode,\n};\n\nexport { domMax };\n"],"names":["isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","point","x","y","addPointerInfo","handler","secondsToMilliseconds","seconds","addDomEvent","target","eventName","options","passive","addEventListener","removeEventListener","useDomEvent","ref","useEffect","element","current","addPointerEvent","usePointerEvent","distance","a","b","Math","abs","distance2D","xDelta","yDelta","sqrt","PanSession","handlers","transformPagePoint","this","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","offset","timestamp","frameData","push","onStart","onMove","handlePointerMove","transformPoint","sync","handlePointerUp","end","onEnd","onSessionEnd","panInfo","type","initialInfo","onSessionStart","removeListeners","pipe","window","cancelSync","subtractPoint","delta","lastDevicePoint","startDevicePoint","velocity","getVelocity","length","timeDelta","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity","createLock","name","lock","globalHorizontalLock","globalVerticalLock","getGlobalLock","drag","openHorizontal","openVertical","isDragActive","openGestureLock","calcLength","axis","max","min","isNear","value","maxDistance","calcAxisDelta","source","origin","originPoint","mix","scale","isNaN","translate","calcBoxDelta","originX","originY","calcRelativeAxis","relative","parent","calcRelativeAxisPosition","layout","calcRelativePosition","calcRelativeAxisConstraints","undefined","calcViewportAxisConstraints","layoutAxis","constraintsAxis","AnimationType","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","eachAxis","callback","convertBoundingBoxToBox","top","left","right","bottom","isIdentityScale","hasScale","scaleX","scaleY","hasTransform","values","has2DTranslate","z","rotate","rotateX","rotateY","is2DTranslate","scalePoint","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","snapToDefault","Number","isInteger","translateAxis","transformAxis","transforms","key","scaleKey","originKey","axisOrigin","xKeys","yKeys","transformBox","transform","measureViewportBox","instance","topLeft","bottomRight","transformBoxPoints","getBoundingClientRect","instantAnimationState","cubicBezierAsString","c","d","supportedWaapiEasing","linear","ease","easeIn","easeOut","easeInOut","circIn","circOut","backIn","backOut","mapEasingToNativeEasing","easing","Array","isArray","featureTests","waapi","Object","hasOwnProperty","call","Element","prototype","results","supports","acceleratedValues","Set","createAcceleratedAnimation","valueName","onUpdate","onComplete","has","repeatDelay","repeatType","damping","keyframes","duration","elapsed","repeat","sampleAnimation","animate","state","done","pregeneratedKeyframes","t","sample","animation","delay","times","fill","iterations","direction","animateStyle","owner","onfinish","set","getFinalKeyframe","currentTime","stop","autoplay","setWithVelocity","cancel","timeout","start","performance","now","checkElapsed","createInstantAnimation","setValue","inertia","currentAnimation","power","timeConstant","bounceStiffness","bounceDamping","restDelta","modifyTarget","driver","onStop","isOutOfBounds","v","findNearestBoundary","startAnimation","_a","startSpring","stiffness","prev","boundary","heading","velocityPerSecond","underDampedSpring","restSpeed","criticallyDampedSpring","linearTween","keyframesTransition","defaultTransitions","rotateZ","opacity","backgroundColor","color","default","getDefaultTransition","valueKey","isAnimatable","complex","startsWith","maxDefaults","applyDefaultFilter","slice","split","match","floatRegex","number","unit","replace","defaultValue","functionRegex","filter","getAnimatableNone","functions","map","join","defaultValueTypes","numberValueTypes","outlineColor","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","defaultValueType","isTransitionDefined","when","delayChildren","staggerChildren","staggerDirection","from","transition","keys","isZero","parseFloat","indexOf","getZeroUnit","potentialUnitType","getValueTransition","getKeyframes","isTargetAnimatable","get","createMotionValueAnimation","valueTransition","originKeyframe","targetKeyframe","isOriginAnimatable","warning","visualElement","HTMLElement","getProps","acceleratedAnimation","elementDragControls","WeakMap","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","isPresent","stopAnimation","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","_b","getAxisMotionValue","percent","measuredAxis","layoutBox","animationState","setActive","Drag","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","updateAxis","render","panSession","getTransformPagePoint","onDragEnd","_point","shouldDrag","axisValue","next","applyConstraints","dragConstraints","prevConstraints","isRefObject","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","invariant","constraintsBox","rootProjectionNode","viewportBox","scroll","measurePageBox","root","measuredConstraints","calcViewportConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","startAxisValueAnimation","Promise","all","then","dragKey","toUpperCase","externalMotionValue","getValue","initial","boxProgress","latest","sourceLength","targetLength","progress","clamp","calcOrigin","transformTemplate","style","updateScroll","updateLayout","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","scalePositionWithinConstraints","stopLayoutUpdateListener","hasLayoutChanged","motionValue","props","lockThreshold","useUnmountEffect","makeRenderlessComponent","hook","pan","onPan","onPanStart","onPanEnd","onPanSessionStart","hasPanEvents","useRef","useContext","MotionConfigContext","updateHandlers","groupDragControls","dragControls","useConstant","subscribe","addListeners","usePresence","context","PresenceContext","onExitComplete","register","id","useId","pixelsToPercent","pixels","correctBorderRadius","correct","node","px","isCSSVariable","cssVariableRegex","parseCSSVariable","exec","getVariableValue","depth","token","fallback","resolved","getComputedStyle","getPropertyValue","trim","varToken","correctBoxShadow","treeScale","projectionDelta","original","containsCSSVariables","includes","cssVariables","shadow","template","xScale","yScale","averageScale","output","cssVariable","MeasureLayoutWithContext","layoutGroup","switchLayoutGroup","layoutId","addScaleCorrector","defaultScaleCorrectors","group","add","didUpdate","safeToRemove","setOptions","globalProjectionState","prevProps","layoutDependency","willUpdate","promote","relegate","getStack","members","isLead","promoteContext","scheduleCheckAfterUnmount","remove","deregister","React__default","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","layoutFeatures","measureLayout","LayoutGroupContext","SwitchLayoutGroupContext","shallowCompare","prevLength","isZeroValueString","test","testValueType","dimensionValueTypes","degrees","vw","vh","parse","findDimensionValueType","find","valueTypes","findValueType","resolveVariant","definition","custom","resolveVariantFromProps","forEach","getCurrent","setMotionValue","hasValue","addValue","setTarget","makeTargetAnimatable","transitionEnd","resolveFinalValueInKeyframes","getOriginFromTransition","isWillChangeMotionValue","Boolean","isMotionValue","handoffOptimizedAppearAnimation","MotionAppearAnimations","animationId","appearStoreId","transformProps","sampledTime","delete","e","optimizedAppearDataAttribute","camelToDash","animateVariant","variant","transitionOverride","getAnimation","animateTarget","resolve","getChildAnimations","variantChildren","size","forwardDelay","animateChildren","first","last","willChange","animations","animationTypeState","getState","valueTarget","shouldBlockAnimation","hasAnimated","appearId","shouldReduceMotion","maxStaggerDuration","generateStaggerDuration","sort","sortByTreeOrder","child","notify","sortNodePosition","protectedKeys","needsAnimating","shouldBlock","variantPriorityOrder","Animate","InView","Focus","Hover","Tap","Exit","reversePriorityOrder","reverse","numAnimationTypes","animateList","resolvedDefinition","animateVisualElement","createAnimationState","createTypeState","createState","isInitialRender","buildResolvedTypeValues","acc","animateChanges","changedActiveType","getVariantContext","removedKeys","encounteredKeys","removedVariantIndex","typeState","prop","propIsVariant","isVariantLabel","activeDelta","isActive","isInherited","manuallyAnimateOnMount","prevProp","isAnimationControls","variantDidChange","checkVariantsDidChange","shouldAnimateType","definitionList","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","isKeyframesTarget","blockInitialAnimation","fallbackAnimation","fallbackTarget","getBaseTarget","shouldAnimate","setAnimateFunction","makeAnimator","exit","presenceContext","createHoverEvent","applyVariants","isNodeOrChild","parentElement","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","observeIntersection","rootInteresectionObserver","lookupRoot","document","rootObservers","JSON","stringify","IntersectionObserver","initIntersectionObserver","observe","unobserve","thresholdNames","some","useIntersectionObserver","shouldObserve","rootMargin","margin","amount","once","threshold","isIntersecting","isInView","hasEnteredView","onViewportEnter","onViewportLeave","useMissingIntersectionObserver","requestAnimationFrame","BoundingBoxDimension","gestureAnimations","inView","whileInView","viewport","tap","onTap","onTapStart","onTapCancel","whileTap","hasPressListeners","isPressing","cancelPointerEndListeners","eventOptions","removePointerEndListener","checkPointerEnd","onPointerUp","_c","_d","onPointerCancel","startPress","useCallback","latestProps","focus","whileFocus","onFocus","onBlur","hover","onHoverStart","onHoverEnd","whileHover","useMemo","positionalKeys","isPositionalKey","isNumOrPxType","getPosFromMatrix","matrix","pos","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","transformKeys","nonTranslationalTransformKeys","transformPropOrder","removeNonTranslationalTransform","removedTransforms","positionalValues","width","paddingLeft","paddingRight","height","paddingTop","paddingBottom","convertChangedValueTypes","changedKeys","originBbox","elementComputedStyle","display","setStaticValue","targetBbox","jump","unitConversion","hasPositionalKey","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","toType","fromType","to","numKeyframes","fromIndex","scrollY","pageYOffset","convertedTarget","isBrowser","scrollTo","checkAndConvertChangedValueTypes","parseDomVariant","resolveCSSVariables","prefersReducedMotion","hasReducedMotionListener","featureNames","featureDefinitions","numFeatures","propEventHandlers","VisualElement","reducedMotionConfig","visualState","children","isVariantNode","isControllingVariants","Map","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","latestValues","triggerBuild","renderInstance","renderState","scheduleRender","baseTarget","initialValues","scrapeMotionValuesFromProps","initialMotionValues","_props","_prevProps","mount","removeFromVariantTree","addVariantChild","bindToMotionValue","matchMedia","motionMediaQuery","setReducedMotionPreferences","matches","addListener","initPrefersReducedMotion","setProps","unmount","clear","valueIsTransform","removeOnChange","on","latestValue","isTransformDirty","removeOnRenderRequest","other","sortInstanceNodePosition","isStrict","preloadedFeatures","projectionId","ProjectionNodeConstructor","initialLayoutGroupConfig","renderedProps","features","isEnabled","Component","createElement","layoutScroll","alwaysMeasureLayout","animationType","initialPromotionConfig","build","measureInstanceViewportBox","canMutate","makeTargetAnimatableFromInstance","listener","nextValue","prevValue","existingValue","getStaticValue","removeValue","updateMotionValuesFromProps","handleChildMotionValue","variants","getClosestVariantNode","startAtParent","numVariantProps","variantProps","closestVariantNode","removeValueFromRenderState","readValueFromInstance","valueFromInitial","getBaseTargetFromProps","SubscriptionManager","args","DOMVisualElement","compareDocumentPosition","vars","isMounted","transformValues","transitionOrigin","getOrigin","newValueKeys","numNewValues","targetValue","readValue","setBaseTarget","checkTargetForNewValues","parsed","HTMLVisualElement","defaultType","computedStyle","buildHTMLStyles","childSubscription","textContent","styleProp","renderHTML","SVGVisualElement","arguments","isSVGTag","camelCaseAttributes","getAttribute","buildSVGAttrs","renderSVG","tagName","domAnimation","renderer","isSVGComponent","enableHardwareAcceleration","borders","numBorders","asNumber","isPx","mixValues","follow","lead","shouldCrossfadeOpacity","isOnlyMember","easeCrossfadeIn","opacityExit","easeCrossfadeOut","borderLabel","followRadius","getRadius","leadRadius","radiusName","compress","noop","p","copyAxisInto","originAxis","copyBoxInto","originBox","removePointDelta","removeAxisTransforms","sourceAxis","removeAxisDelta","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEquals","aspectRatio","NodeStack","addUniqueItem","removeItem","prevLead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","_e","resumingFrom","buildProjectionTransform","latestTransform","xTranslate","yTranslate","elementScaleX","elementScaleY","compareByDepth","FlatTree","isDirty","transformAxes","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","elementId","isTreeAnimating","isProjectionDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","path","registerPotentialNode","subscriptionManager","SVGElement","cancelDelay","resizeUnblockUpdate","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","setAnimationOrigin","animationOptions","onPlay","isUpdateBlocked","resetRotation","shouldNotifyListeners","startUpdate","prevTransformTemplateValue","updateSnapshot","notifyListeners","unblockUpdate","clearMeasurements","mountNodeEarly","resetTransformStyle","notifyLayoutUpdate","flushSync","clearSnapshot","removeLeadSnapshots","measure","prevLayout","layoutCorrected","phase","needsMeasurement","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundBox","measuredBox","boxWithoutScroll","rootScroll","transformOnly","withTransforms","boxWithoutTransform","targetDelta","scheduleUpdateProjection","getLead","attemptToResolveRelativeTarget","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","applyTransform","isShared","canSkip","pendingAnimation","treePath","isSharedTransition","treeLength","applyTreeDeltas","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","hasOpacityCrossfade","mixTargetDelta","mixAxisDelta","setTargetDelta","mixBox","isAnimating","completeAnimation","exitAnimationComplete","shouldAnimatePositionOnly","xLength","yLength","shouldPreserveFollowOpacity","stack","hasRotate","resetValues","styles","visibility","pointerEvents","resolveMotionValue","emptyStyles","valuesToRender","applyTransformsToTarget","transformOrigin","scaleCorrectors","corrected","num","hasListeners","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","mixAxis","searchNode","querySelector","roundAxis","round","DocumentProjectionNode","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","position","domMax","projectionNodeConstructor"],"sourceRoot":""}